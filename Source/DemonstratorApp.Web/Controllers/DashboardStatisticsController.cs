// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using AppCode;
using DemonstratorApp.BO;
using DemonstratorApp.UI.ViewModels.DashboardStatistics;
using Identity = zAppDev.DotNet.Framework.Identity;
using log4net;
using Newtonsoft.Json;
using NHibernate.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Identity;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Mvc;
using zAppDev.DotNet.Framework.Utilities;

namespace DemonstratorApp.UI.Controllers.DashboardStatistics
{

    [RoutePrefix("DashboardStatistics")]
    public class DashboardStatisticsController : ControllerBase<DashboardStatisticsViewModel, DashboardStatisticsViewModelDTO>
    {

        /*<Form:DashboardStatistics:0/>*/
        public DashboardStatisticsController()
        {
            _logger = log4net.LogManager.GetLogger(typeof(DashboardStatisticsController));
            if (ViewModelDTOBase.DTOHelper == null)
            {
                ViewModelDTOBase.DTOHelper = new DTOHelper();
            }
        }

        protected override void ViewModelLoaded()
        {
            var masterViewModel = new DemonstratorApp.UI.ViewModels.MasterPage.MasterPageViewModel
            {
                Title = model.Title
            };
            _parentController = new MasterPage.MasterPageController(masterViewModel);
            _parentController.IsDirty = IsDirty;
        }

        public void SetModel(DashboardStatisticsViewModel m)
        {
            @model = m;
        }


        public override void CommitAllFiles()
        {
        }

        public override void CommitAllFilesLegacy()
        {
        }

        public override void ClearPendingFiles()
        {
        }






        [HttpGet]

        [Route("GetViewDTO")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ContentResult GetViewDTO(int hash)
        {
            return Content(GetViewFromViewDTOsDicSerialized(hash));
        }

        [HttpPost]

        [Route("UpdateInstance")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult UpdateInstance()
        {
            return PrepareUpdateInstanceResult(typeof(DashboardStatisticsViewModel));
        }

        [HttpPost]

        [Route("_Raise")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "GeneralOperation", ClaimType = ClaimTypes.GenericAction)]
        public ActionResult _Raise()
        {
            return _RaiseEvent();
        }


        [HttpGet]
        [Route("DownloadFileByPath")]
        [CustomControllerActionFilter(HasDefaultResultView=true)]
        public FileContentResult DownloadFileByPath(string path, string defaultPath = null)
        {
            if (IdentityHelper.GetCurrentIdentityUser() == null) return null;
            if (string.IsNullOrWhiteSpace(path) && string.IsNullOrWhiteSpace(defaultPath))
            {
                throw new ApplicationException("Please provide a path.");
            }
            return FileHelper.PendingDownloadInstance.DownloadByPath(path, defaultPath);
        }




        #region Controller Actions
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("Render")]
        public ActionResult Render()

        {
            @model = new DashboardStatisticsViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_DashboardStatistics"] = "Render";
            return null;
        }

        [CustomControllerActionFilter(FillDropDownInitialValues=true, ActionName="Render", ClaimType = ClaimTypes.ControllerAction)]
        [HttpGet]
        [Route("_API_Render")]
        public ActionResult _API_Render()

        {
            @model = new DashboardStatisticsViewModel();
            System.Web.HttpContext.Current.Session["LastEntryPoint_DashboardStatistics"] = "Render";
            PushToHistory();
            var _masterController = new DemonstratorApp.UI.Controllers.MasterPage.MasterPageController(@model);
            _masterController.ExecuteRender();
            var redirectInfo = ExecuteRender();
            return redirectInfo;
        }

        [CustomControllerActionFilter(CausesValidation=true, ActionName="CloseModal", ClaimType = ClaimTypes.ControllerAction)]
        [HttpPost]
        [Route("CloseModal")]
        public ActionResult CloseModal()

        {
            var _data = _LoadViewModel();
            var _failedValidationsResult = GetFailedDataValidationsResult();
            if (_failedValidationsResult != null) return _failedValidationsResult;
            var redirectInfo = ExecuteCloseModal();
            return redirectInfo;
        }

        #endregion
        #region Controller Actions Implementation
        /*<ControllerActionImplementation:Render:1/>*/
        public ActionResult ExecuteRender()
        {
            if (_parentController == null) _parentController = new MasterPage.MasterPageController(new  DemonstratorApp.UI.ViewModels.MasterPage.MasterPageViewModel());
            ((MasterPage.MasterPageController) _parentController).ExecuteRender();
            ActionResult _result = null;
            @model.TotalOnTime = new DemonstratorApp.DAL.Repository().GetCount<DemonstratorApp.BO.ProofOfDelivery>((a) => a.DeliveryStatus == "On time" && a.Transaction.Supplier.SupplierStatus == "ActiveSupplier");
            @model.TotalAsOrdered = new DemonstratorApp.DAL.Repository().GetCount<DemonstratorApp.BO.ProofOfDelivery>((a) => a.QualityStatus == "As ordered" && a.Transaction.Supplier.SupplierStatus == "ActiveSupplier");
            @model.TotalInFull = new DemonstratorApp.DAL.Repository().GetCount<DemonstratorApp.BO.ProofOfDelivery>((a) => a.QuantityStatus == "In full" && a.Transaction.Supplier.SupplierStatus == "ActiveSupplier");
            @model.TotalImpeachments = new DemonstratorApp.DAL.Repository().GetCount<DemonstratorApp.BO.ProofOfDelivery>((a) => a.DeliveryStatus != "On time" || a.QualityStatus != "As ordered" || a.QuantityStatus != "In full" && a.Transaction.Supplier.SupplierStatus == "ActiveSupplier");
            @model.TotalTransactions = (zAppDev.DotNet.Framework.Utilities.Common.GetItemFromList(DemonstratorApp.BO.SupplierStatisticExtensions.Get5MostProfitableSuppliers(), 0)?.TotalTransactions ?? 0);
            return _result;
        }
        /*<ControllerActionImplementation:CloseModal:1/>*/
        public ActionResult ExecuteCloseModal()
        {
            ActionResult _result = null;
            return _result;
        }
        #endregion
        #region Datasource controls
        /*<Datasource:ChartDataQuality:1/>*/
        /*<DataSourceFilter:ChartDataQuality:2/>*/
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_ChartDataQuality_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ChartDataQuality_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_ChartDataQuality_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DemonstratorApp.BO.SupplierStatisticExtensions.GetSupplierDataStatistics2().AsQueryable();
            return __items.Where(@this => @this.Supplier.SupplierStatus == "ActiveSupplier");
        }


        /*<DataSourceEntryPoint:ChartDataQuality:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierStatisticDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("ChartDataQuality_Datasource")]
        public JsonResult ChartDataQuality_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ChartDataQuality_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartDataQuality_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartDataQuality_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartDataQuality_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "dataquality", "Data Quality"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new SupplierStatisticDataSet_SupplierStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Supplier?.Company, new List<object> { _dto?.DataQuality }, new List<object> { "Data Quality" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ChartDataAvailability:1/>*/
        /*<DataSourceFilter:ChartDataAvailability:2/>*/
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_ChartDataAvailability_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ChartDataAvailability_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_ChartDataAvailability_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DemonstratorApp.BO.SupplierStatisticExtensions.GetSupplierDataStatistics2().AsQueryable();
            return __items.Where(@this => @this.Supplier.SupplierStatus == "ActiveSupplier");
        }


        /*<DataSourceEntryPoint:ChartDataAvailability:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierStatisticDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("ChartDataAvailability_Datasource")]
        public JsonResult ChartDataAvailability_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ChartDataAvailability_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartDataAvailability_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartDataAvailability_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartDataAvailability_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                {
                    { "dataavailability", "Data Availability"
                    }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new SupplierStatisticDataSet_SupplierStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Supplier?.Company, new List<object> { _dto?.DataAvailability }, new List<object> { "Data Availability" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:Chart:1/>*/
        /*<DataSourceFilter:Chart:2/>*/
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_Chart_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_Chart_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_Chart_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DemonstratorApp.BO.SupplierStatisticExtensions.GetSupplierStatistics().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:Chart:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierStatisticDataSetOnTime", ClaimType = ClaimTypes.Dataset)]
        [Route("Chart_Datasource")]
        public JsonResult Chart_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_Chart_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_Chart_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                { { "ontimedeliveries", "On Time" }, { "asordereddeliveries", "As Ordered" }, { "infulldeliveries", "In Full" }, { "totalimpeachments", "Impeachments" }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new SupplierStatisticDataSetOnTime_SupplierStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Supplier?.Company, new List<object> { _dto?.OnTimeDeliveries, _dto?.AsOrderedDeliveries, _dto?.InFullDeliveries, _dto?.TotalImpeachments }, new List<object> { "On Time", "As Ordered", "In Full", "Impeachments" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:ChartTurnover:1/>*/
        /*<DataSourceFilter:ChartTurnover:2/>*/
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_ChartTurnover_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_ChartTurnover_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_ChartTurnover_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DemonstratorApp.BO.SupplierStatisticExtensions.GetSupplierTurnover().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceEntryPoint:ChartTurnover:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierTurnoverDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("ChartTurnover_Datasource")]
        public JsonResult ChartTurnover_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_ChartTurnover_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartTurnover_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartTurnover_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_ChartTurnover_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                IDictionary<string, string> groupLabels = new Dictionary<string, string>()
                { { "currentturnover", "Current Turnover" }, { "nextturnover", "Next Year Turnover" }, { "previousturnover", "Actual Previous Turnover" }
                };
                var data = new List<ChartHelper.ChartResult>();
                foreach (var group in groups.SubGroups)
                {
                    var result = new ChartHelper.ChartResult();
                    result.Label = group.KeyFormatted;
                    foreach (var aggr in group.Aggregates)
                    {
                        if (aggr.Column == "__Count") continue;
                        result.Values.Add(aggr.Value);
                        if (groupLabels.ContainsKey(aggr.Column.ToLower()))
                        {
                            result.ValueLabels.Add(groupLabels[aggr.Column.ToLower()]);
                        }
                        else
                        {
                            result.ValueLabels.Add(aggr.Column);
                        }
                    }
                    data.Add(result);
                }
                response.Data = data;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                var _dtos = items.Select(i => new SupplierTurnoverDataSet_SupplierStatisticDTO(i, true)).ToList();
                var chartData = new List<ChartHelper.ChartResult>();
                foreach(var _dto in _dtos)
                {
                    chartData.Add(new ChartHelper.ChartResult(_dto, _dto?.Supplier?.Company, new List<object> { _dto?.CurrentTurnover, _dto?.NextTurnover, _dto?.PreviousTurnover }, new List<object> { "Current Turnover", "Next Year Turnover", "Actual Previous Turnover" }, new List<object> {  }));
                }
                response.Data = chartData;
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:DashboardStatistics_SupplierStatisticDataSet:1/>*/
        /*<DataSourceFilter:DashboardStatistics_SupplierStatisticDataSet:2/>*/
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_DashboardStatistics_SupplierStatisticDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DashboardStatistics_SupplierStatisticDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_DashboardStatistics_SupplierStatisticDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DemonstratorApp.BO.SupplierStatisticExtensions.GetSupplierDataStatistics2().AsQueryable();
            return __items.Where(@this => @this.Supplier.SupplierStatus == "ActiveSupplier");
        }


        /*<DataSourceGetFullRecordset:DashboardStatistics_SupplierStatisticDataSet:1/>*/

        [HttpPost]
        [Route("DashboardStatistics_SupplierStatisticDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierStatisticDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DashboardStatistics_SupplierStatisticDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DashboardStatistics_SupplierStatisticDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SupplierStatisticDataSet_SupplierStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(DashboardStatisticsViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DashboardStatistics_SupplierStatisticDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DashboardStatistics_SupplierStatisticDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierStatisticDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("DashboardStatistics_SupplierStatisticDataSet_Datasource")]
        public JsonResult DashboardStatistics_SupplierStatisticDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DashboardStatistics_SupplierStatisticDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierStatisticDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierStatisticDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierStatisticDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DemonstratorApp.BO.SupplierStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:DashboardStatistics_SupplierStatisticDataSetOnTime:1/>*/
        /*<DataSourceFilter:DashboardStatistics_SupplierStatisticDataSetOnTime:2/>*/
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_DashboardStatistics_SupplierStatisticDataSetOnTime_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DashboardStatistics_SupplierStatisticDataSetOnTime_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_DashboardStatistics_SupplierStatisticDataSetOnTime_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DemonstratorApp.BO.SupplierStatisticExtensions.GetSupplierStatistics().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:DashboardStatistics_SupplierStatisticDataSetOnTime:1/>*/

        [HttpPost]
        [Route("DashboardStatistics_SupplierStatisticDataSetOnTime_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierStatisticDataSetOnTime", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DashboardStatistics_SupplierStatisticDataSetOnTime_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DashboardStatistics_SupplierStatisticDataSetOnTime_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SupplierStatisticDataSetOnTime_SupplierStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(DashboardStatisticsViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DashboardStatistics_SupplierStatisticDataSetOnTime");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DashboardStatistics_SupplierStatisticDataSetOnTime:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierStatisticDataSetOnTime", ClaimType = ClaimTypes.Dataset)]
        [Route("DashboardStatistics_SupplierStatisticDataSetOnTime_Datasource")]
        public JsonResult DashboardStatistics_SupplierStatisticDataSetOnTime_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DashboardStatistics_SupplierStatisticDataSetOnTime_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierStatisticDataSetOnTime_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierStatisticDataSetOnTime_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierStatisticDataSetOnTime_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DemonstratorApp.BO.SupplierStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:DashboardStatistics_SupplierTurnoverDataSet:1/>*/
        /*<DataSourceFilter:DashboardStatistics_SupplierTurnoverDataSet:2/>*/
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_DashboardStatistics_SupplierTurnoverDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DashboardStatistics_SupplierTurnoverDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_DashboardStatistics_SupplierTurnoverDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DemonstratorApp.BO.SupplierStatisticExtensions.GetSupplierTurnover().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:DashboardStatistics_SupplierTurnoverDataSet:1/>*/

        [HttpPost]
        [Route("DashboardStatistics_SupplierTurnoverDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierTurnoverDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DashboardStatistics_SupplierTurnoverDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DashboardStatistics_SupplierTurnoverDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new SupplierTurnoverDataSet_SupplierStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(DashboardStatisticsViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DashboardStatistics_SupplierTurnoverDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DashboardStatistics_SupplierTurnoverDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "SupplierTurnoverDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("DashboardStatistics_SupplierTurnoverDataSet_Datasource")]
        public JsonResult DashboardStatistics_SupplierTurnoverDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DashboardStatistics_SupplierTurnoverDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierTurnoverDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierTurnoverDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_SupplierTurnoverDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DemonstratorApp.BO.SupplierStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        /*<Datasource:DashboardStatistics_OnTimeDataSet:1/>*/
        /*<DataSourceFilter:DashboardStatistics_OnTimeDataSet:2/>*/
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_DashboardStatistics_OnTimeDataSet_DatasourceQueryable(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            if (shouldEvict)
            {
                @model?.Evict();
            }
            var __items = Get_DashboardStatistics_OnTimeDataSet_DatasourceQueryableImplementation(__request);
            return __items;
        }
        public IQueryable<DemonstratorApp.BO.SupplierStatistic> Get_DashboardStatistics_OnTimeDataSet_DatasourceQueryableImplementation(DatasourceRequest __request = null, bool shouldEvict = true)
        {
            __request = __request ?? new DatasourceRequest(0, int.MaxValue);
            var __items = DemonstratorApp.BO.SupplierStatisticExtensions.GetSupplierStatistics().AsQueryable();
            return __items.Where(@this => true);
        }


        /*<DataSourceGetFullRecordset:DashboardStatistics_OnTimeDataSet:1/>*/

        [HttpPost]
        [Route("DashboardStatistics_OnTimeDataSet_GetFullRecordset")]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OnTimeDataSet", ClaimType = ClaimTypes.Dataset)]
        public JsonResult DashboardStatistics_OnTimeDataSet_GetFullRecordset()
        {
            var postedData = _ParsePostedData();
            var dataType = postedData["dataType"].ToString();
            var keysToExclude = postedData["keys"] == null
                                ? new List<object>()
                                : postedData["keys"].ToString()
                                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(x => x as object)
                                .ToList();
            var indexes = postedData["indexes"] == null
                          ? null
                          : postedData["indexes"].ToString()
                          .Split(new char[] { '_' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(x => int.Parse(x))
                          .ToArray();
            var postedDatasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            _LoadViewModel();
            var datasourceRequest = new DatasourceRequest(0, 2147483647, postedDatasourceRequest.Filters, null, keysToExclude, indexes);
            var queryable = Get_DashboardStatistics_OnTimeDataSet_DatasourceQueryable(datasourceRequest);
            var items = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable);
            //The following method of creating DTO responses has been changed due to the fact that the returned objects were missing properties that were not used by the client.
            //It now uses the UpdateInstance method. To be removed after some testing if no problems occur.
            //var data = items.Select(i => new OnTimeDataSet_SupplierStatisticDTO(i, true)).ToList();
            var data = CreateDtoInstancesFromKeys(typeof(DashboardStatisticsViewModel), dataType, items.Select(i => i.Id.ToString()).ToList(), "DashboardStatistics_OnTimeDataSet");
            var __result = Json(new
            {
                Type = "UpdateInstance",Data = Utilities.Serialize(data)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }
        /*<DataSourceEntryPoint:DashboardStatistics_OnTimeDataSet:1/>*/

        [HttpPost]
        [CustomControllerActionFilter(HasDefaultResultView=true, ActionName = "OnTimeDataSet", ClaimType = ClaimTypes.Dataset)]
        [Route("DashboardStatistics_OnTimeDataSet_Datasource")]
        public JsonResult DashboardStatistics_OnTimeDataSet_Datasource()
        {
            var postedData = _LoadViewModel();
            var datasourceRequest = DeserializeDatasourceRequest(postedData["datasourceRequest"].ToString());
            var queryable = Get_DashboardStatistics_OnTimeDataSet_DatasourceQueryable(datasourceRequest);
            var response = new ListResponse
            {
                TotalRows = DatasourceRetriever.ApplyDynamicFilterToQueryable(datasourceRequest, queryable).Count(),
            };
            //Total items count
            if (CLMS.AppDev.Cache.CacheManager.Current.HasKey($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_OnTimeDataSet_TotalItems"))
            {
                CLMS.AppDev.Cache.CacheManager.Current.Set($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_OnTimeDataSet_TotalItems", response.TotalRows);
            }
            else
            {
                CLMS.AppDev.Cache.CacheManager.Current.Add($"{Request.RequestContext.HttpContext.Session.SessionID}_DashboardStatistics_OnTimeDataSet_TotalItems", response.TotalRows);
            }
            if (response.TotalRows < datasourceRequest.StartRow + 1)
            {
                datasourceRequest.StartRow = 0;
            }
            var _dto = DynamicDtoInfo.CreateFromPropsArray(datasourceRequest.DtoProperties);
            var _convertionMethod = _dto.GetConvertionFunc<DemonstratorApp.BO.SupplierStatistic>();
            if (datasourceRequest.GroupBy.Any())
            {
                var groups = DatasourceRetriever.RetrieveGrouped(datasourceRequest, queryable, q => q.Id, postedData);
                var items = groups.GetAllItems();
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
                response.Groups = groups;
//Fix for total items in GetGroupsClosed
                if (datasourceRequest.GroupBy.FirstOrDefault().GetGroupsClosed)
                {
                    response.TotalRows = DatasourceRetriever.GetTotalGroups(groups);
                }
            }
            else
            {
                var items = DatasourceRetriever.Retrieve(datasourceRequest, queryable);;
                response.Data = items.ToList().Select(i => _convertionMethod(i)).ToList();
            }
            var __result = Json(new
            {
                Type = "DatasourceData",Data = Serialize(response)
            }, JsonRequestBehavior.AllowGet);
            __result.MaxJsonLength = int.MaxValue;
            return __result;
        }


        #endregion

        public override ActionResult PreActionFilterHook(bool causesValidation, bool listenToEvent, string actionName)
        {
            System.Web.HttpContext.Current.Items["_currentControllerAction"] = actionName;
            if (listenToEvent) return null;
            return null;
        }
        public override ActionResult PostActionFilterHook(bool hasDefaultResultView, bool fillDropDownInitialValues = false)
        {
            if (HasClientResponse())
            {
                viewDTO.ClientResponse = GetClientResponse();
            }
            else
            {
                var _modelDTO = new DashboardStatisticsViewModelDTO(@model);
                viewDTO.Model = _modelDTO;
            }
            if (!hasDefaultResultView)
            {
                var __result = Json(new
                {
                    Type = "Data",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            return View("DashboardStatistics");
        }

        #region Data Validations


        private ActionResult GetFailedDataValidationsResult()
        {
            try
            {
                RunDataValidations();
                if (!viewDTO.DataValidationsHaveFailed) return null;
                var __result = Json(new
                {
                    Type = "RuleEvaluation",Data = viewDTO.Serialize()
                }, JsonRequestBehavior.AllowGet);
                __result.MaxJsonLength = int.MaxValue;
                return __result;
            }
            catch (Exception e)
            {
                _logger.Error("!!! DANGER: Error while evaluating Data Validations !!!", e);
                log4net.LogManager.GetLogger(this.GetType()).Error("Form: DashboardStatistics, Action: " + System.Web.HttpContext.Current.Items["_currentControllerAction"], e);
                //throw;
                return null;
            }
        }
        public List<RuleResult> RunDataValidations()
        {
            var masterPageDataValidations = (_parentController as Controllers.MasterPage.MasterPageController).RunDataValidations();
            if (masterPageDataValidations?.Any() == true)
            {
                viewDTO.RuleEvaluations.DataValidations.AddRange(masterPageDataValidations);
            }
            return viewDTO.RuleEvaluations.DataValidations;
        }

        #endregion
    }
}
