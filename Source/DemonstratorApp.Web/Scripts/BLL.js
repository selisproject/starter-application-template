var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
var DemonstratorApp;
(function (DemonstratorApp) {
    var BO;
    (function (BO) {
        var Domain_LocalResourcesDefinition = (function () {
            function Domain_LocalResourcesDefinition() {
                this._originalTypeClassName = "DemonstratorApp.BO.Domain_LocalResourcesDefinition";
                this.Domain = DemonstratorApp.BO;
            }
            return Domain_LocalResourcesDefinition;
        }());
        BO.Domain_LocalResourcesDefinition = Domain_LocalResourcesDefinition;
        var Agreement = (function () {
            function Agreement() {
                this._originalTypeClassName = "DemonstratorApp.BO.Agreement";
                this.Domain = DemonstratorApp.BO;
                this.FundedTransactions = [];
                this.AgreementStatus = [];
                this.CommercialAgreements = [];
                this['_key'] = this.Id = 0;
            }
            Agreement.ApprovedFromEverybody = function ($this) {
                if (Joove.Common.nullSafe(function () { return $this.AgreementStatus.linq.any(function (a) { return Joove.Common.nullSafe(function () { return a.Status; }, "") == "Approved by Administrator" && Joove.Common.nullSafe(function () { return $this.AgreementStatus.linq.any(function (b) { return Joove.Common.nullSafe(function () { return b.Status; }, "") == "Approved by Investor"; }); }, false) && Joove.Common.nullSafe(function () { return $this.AgreementStatus.linq.any(function (c) { return Joove.Common.nullSafe(function () { return c.Status; }, "") == "Approved by Supplier"; }); }, false); }); }, false)) {
                    return true;
                }
                return false;
            };
            Agreement.Get_CurrentAgreementStatus = function ($this) {
                if (Joove.Common.nullSafe(function () { return $this.AgreementStatus; }, null) != null) {
                    var firstAgreementStatus_1 = Joove.Common.nullSafe(function () { return $this.AgreementStatus.linq.orderByDescending(function (a) { return Joove.Common.nullSafe(function () { return a.DateOccured; }, new Date('1753-01-01')); }).toArray(); }, null);
                    if ((CLMS.Framework.Number.GreaterThan(function () { return firstAgreementStatus_1.length; }, function () { return 0; }))) {
                        return Joove.Common.nullSafe(function () { return firstAgreementStatus_1.linq.where().firstOrDefault(null).Status; }, "");
                    }
                    else {
                        return "";
                    }
                }
                else {
                    return "";
                }
            };
            Agreement.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Agreement;
        }());
        Agreement.setInvestor = function ($this, value) {
            var oldValue = $this.Investor;
            $this.Investor = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Investor.removeAgreements(oldValue, $this);
                }
                DemonstratorApp.BO.Investor.addAgreements(value, $this);
            }
        };
        Agreement.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Supplier.removeAgreements(oldValue, $this);
                }
                DemonstratorApp.BO.Supplier.addAgreements(value, $this);
            }
        };
        Agreement.setFundedTransactions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.FundedTransactions == null)
                $this.FundedTransactions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.FundedTransactions.length > 0) {
                DemonstratorApp.BO.Agreement.removeFundedTransactions($this, $this.FundedTransactions[0]);
            }
            DemonstratorApp.BO.Agreement.addManyFundedTransactions($this, copyItems);
        };
        Agreement.addManyFundedTransactions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Agreement.addFundedTransactions($this, items[i]);
            }
        };
        Agreement.addFundedTransactions = function ($this, item) {
            if ($this.FundedTransactions == null)
                $this.FundedTransactions = [];
            if (item == null || $this.FundedTransactions.indexOf(item) > -1)
                return;
            $this.FundedTransactions.push(item);
        };
        Agreement.addRangeFundedTransactions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Agreement.addFundedTransactions($this, item); });
        };
        Agreement.removeFundedTransactions = function ($this, item) {
            if ($this == null || $this.FundedTransactions == null || $this.FundedTransactions.indexOf(item) === -1)
                return;
            var _index = $this.FundedTransactions.indexOf(item);
            $this.FundedTransactions.splice(_index, 1);
        };
        Agreement.clearFundedTransactions = function ($this) {
            $this.FundedTransactions = null;
        };
        Agreement.setAgreementStatus = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.AgreementStatus == null)
                $this.AgreementStatus = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.AgreementStatus.length > 0) {
                DemonstratorApp.BO.Agreement.removeAgreementStatus($this, $this.AgreementStatus[0]);
            }
            DemonstratorApp.BO.Agreement.addManyAgreementStatus($this, copyItems);
        };
        Agreement.addManyAgreementStatus = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Agreement.addAgreementStatus($this, items[i]);
            }
        };
        Agreement.addAgreementStatus = function ($this, item) {
            if ($this.AgreementStatus == null)
                $this.AgreementStatus = [];
            if (item == null || $this.AgreementStatus.indexOf(item) > -1)
                return;
            $this.AgreementStatus.push(item);
        };
        Agreement.addRangeAgreementStatus = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Agreement.addAgreementStatus($this, item); });
        };
        Agreement.removeAgreementStatus = function ($this, item) {
            if ($this == null || $this.AgreementStatus == null || $this.AgreementStatus.indexOf(item) === -1)
                return;
            var _index = $this.AgreementStatus.indexOf(item);
            $this.AgreementStatus.splice(_index, 1);
        };
        Agreement.clearAgreementStatus = function ($this) {
            $this.AgreementStatus = null;
        };
        Agreement.setDocumentAgreement = function ($this, value) {
            var oldValue = $this.DocumentAgreement;
            $this.DocumentAgreement = value;
            if (value != null) {
                if (oldValue != null && oldValue.Agreement != null) {
                    oldValue.Agreement = null;
                }
                if ($this.DocumentAgreement.Agreement !== $this) {
                    DemonstratorApp.BO.DocumentAgreement.setAgreement(value, $this);
                }
            }
        };
        Agreement.setCommercialAgreements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CommercialAgreements == null)
                $this.CommercialAgreements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CommercialAgreements.length > 0) {
                DemonstratorApp.BO.Agreement.removeCommercialAgreements($this, $this.CommercialAgreements[0]);
            }
            DemonstratorApp.BO.Agreement.addManyCommercialAgreements($this, copyItems);
        };
        Agreement.addManyCommercialAgreements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Agreement.addCommercialAgreements($this, items[i]);
            }
        };
        Agreement.addCommercialAgreements = function ($this, item) {
            if ($this.CommercialAgreements == null)
                $this.CommercialAgreements = [];
            if (item == null || $this.CommercialAgreements.indexOf(item) > -1)
                return;
            $this.CommercialAgreements.push(item);
            if (item.Agreement != $this) {
                DemonstratorApp.BO.CommercialAgreement.setAgreement(item, $this);
            }
        };
        Agreement.addRangeCommercialAgreements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Agreement.addCommercialAgreements($this, item); });
        };
        Agreement.removeCommercialAgreements = function ($this, item) {
            if ($this == null || $this.CommercialAgreements == null || $this.CommercialAgreements.indexOf(item) === -1)
                return;
            var _index = $this.CommercialAgreements.indexOf(item);
            $this.CommercialAgreements.splice(_index, 1);
            item.Agreement = null;
        };
        Agreement.clearCommercialAgreements = function ($this) {
            $this.CommercialAgreements = null;
        };
        BO.Agreement = Agreement;
        var CommercialAgreement = (function () {
            function CommercialAgreement() {
                this._originalTypeClassName = "DemonstratorApp.BO.CommercialAgreement";
                this.Domain = DemonstratorApp.BO;
                this.Orders = [];
                this.Transactions = [];
                this['_key'] = this.Id = 0;
            }
            CommercialAgreement.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return CommercialAgreement;
        }());
        CommercialAgreement.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Supplier.removeCommercialAgreements(oldValue, $this);
                }
                DemonstratorApp.BO.Supplier.addCommercialAgreements(value, $this);
            }
        };
        CommercialAgreement.setBuyer = function ($this, value) {
            var oldValue = $this.Buyer;
            $this.Buyer = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Buyer.removeCommercialAgreements(oldValue, $this);
                }
                DemonstratorApp.BO.Buyer.addCommercialAgreements(value, $this);
            }
        };
        CommercialAgreement.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.CommercialAgreement.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.CommercialAgreement.addManyOrders($this, copyItems);
        };
        CommercialAgreement.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.CommercialAgreement.addOrders($this, items[i]);
            }
        };
        CommercialAgreement.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            if (item.CommercialAgreement != $this) {
                DemonstratorApp.BO.Order.setCommercialAgreement(item, $this);
            }
        };
        CommercialAgreement.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.CommercialAgreement.addOrders($this, item); });
        };
        CommercialAgreement.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            item.CommercialAgreement = null;
        };
        CommercialAgreement.clearOrders = function ($this) {
            $this.Orders = null;
        };
        CommercialAgreement.setImportedBuyer = function ($this, value) {
            var oldValue = $this.ImportedBuyer;
            $this.ImportedBuyer = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.ImportedBuyer.removeCommercialAgreement(oldValue, $this);
                }
                DemonstratorApp.BO.ImportedBuyer.addCommercialAgreement(value, $this);
            }
        };
        CommercialAgreement.setTransactions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Transactions == null)
                $this.Transactions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Transactions.length > 0) {
                DemonstratorApp.BO.CommercialAgreement.removeTransactions($this, $this.Transactions[0]);
            }
            DemonstratorApp.BO.CommercialAgreement.addManyTransactions($this, copyItems);
        };
        CommercialAgreement.addManyTransactions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.CommercialAgreement.addTransactions($this, items[i]);
            }
        };
        CommercialAgreement.addTransactions = function ($this, item) {
            if ($this.Transactions == null)
                $this.Transactions = [];
            if (item == null || $this.Transactions.indexOf(item) > -1)
                return;
            $this.Transactions.push(item);
            if (item.CommercialAgreement != $this) {
                DemonstratorApp.BO.Transaction.setCommercialAgreement(item, $this);
            }
        };
        CommercialAgreement.addRangeTransactions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.CommercialAgreement.addTransactions($this, item); });
        };
        CommercialAgreement.removeTransactions = function ($this, item) {
            if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1)
                return;
            var _index = $this.Transactions.indexOf(item);
            $this.Transactions.splice(_index, 1);
            item.CommercialAgreement = null;
        };
        CommercialAgreement.clearTransactions = function ($this) {
            $this.Transactions = null;
        };
        CommercialAgreement.setAgreement = function ($this, value) {
            var oldValue = $this.Agreement;
            $this.Agreement = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Agreement.removeCommercialAgreements(oldValue, $this);
                }
                DemonstratorApp.BO.Agreement.addCommercialAgreements(value, $this);
            }
        };
        BO.CommercialAgreement = CommercialAgreement;
        var FundedTransaction = (function () {
            function FundedTransaction() {
                this._originalTypeClassName = "DemonstratorApp.BO.FundedTransaction";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            FundedTransaction.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return FundedTransaction;
        }());
        BO.FundedTransaction = FundedTransaction;
        var AgreementStatus = (function () {
            function AgreementStatus() {
                this._originalTypeClassName = "DemonstratorApp.BO.AgreementStatus";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            AgreementStatus.SortStatusDesc = function ($this) { };
            AgreementStatus.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AgreementStatus;
        }());
        BO.AgreementStatus = AgreementStatus;
        var DocumentAgreement = (function () {
            function DocumentAgreement() {
                this._originalTypeClassName = "DemonstratorApp.BO.DocumentAgreement";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            DocumentAgreement.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DocumentAgreement;
        }());
        DocumentAgreement.setAgreement = function ($this, value) {
            var oldValue = $this.Agreement;
            $this.Agreement = value;
            if (value != null) {
                if (oldValue != null && oldValue.DocumentAgreement != null) {
                    oldValue.DocumentAgreement = null;
                }
                if ($this.Agreement.DocumentAgreement !== $this) {
                    DemonstratorApp.BO.Agreement.setDocumentAgreement(value, $this);
                }
            }
        };
        BO.DocumentAgreement = DocumentAgreement;
        var AlgorithmCheck = (function () {
            function AlgorithmCheck() {
                this._originalTypeClassName = "DemonstratorApp.BO.AlgorithmCheck";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            AlgorithmCheck.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AlgorithmCheck;
        }());
        BO.AlgorithmCheck = AlgorithmCheck;
        var BillOfLanding = (function () {
            function BillOfLanding() {
                this._originalTypeClassName = "DemonstratorApp.BO.BillOfLanding";
                this.Domain = DemonstratorApp.BO;
                this.Orders = [];
                this['_key'] = this.Id = 0;
            }
            BillOfLanding.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return BillOfLanding;
        }());
        BillOfLanding.setMeanOfTransport = function ($this, value) {
            var oldValue = $this.MeanOfTransport;
            $this.MeanOfTransport = value;
            if (value != null) {
            }
        };
        BillOfLanding.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.BillOfLanding.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.BillOfLanding.addManyOrders($this, copyItems);
        };
        BillOfLanding.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.BillOfLanding.addOrders($this, items[i]);
            }
        };
        BillOfLanding.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            Order.addBillOfLandings(item, $this);
        };
        BillOfLanding.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.BillOfLanding.addOrders($this, item); });
        };
        BillOfLanding.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            Order.removeBillOfLandings(item, $this);
        };
        BillOfLanding.clearOrders = function ($this) {
            $this.Orders = null;
        };
        BillOfLanding.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removeBillOfLandings(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addBillOfLandings(value, $this);
            }
        };
        BO.BillOfLanding = BillOfLanding;
        var Contact = (function () {
            function Contact() {
                this._originalTypeClassName = "DemonstratorApp.BO.Contact";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            Contact.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Contact;
        }());
        BO.Contact = Contact;
        var CreditNoteProduct = (function () {
            function CreditNoteProduct() {
                this._originalTypeClassName = "DemonstratorApp.BO.CreditNoteProduct";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            CreditNoteProduct.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return CreditNoteProduct;
        }());
        CreditNoteProduct.setCreditNote = function ($this, value) {
            var oldValue = $this.CreditNote;
            $this.CreditNote = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.CreditNote.removeCreditNoteProducts(oldValue, $this);
                }
                DemonstratorApp.BO.CreditNote.addCreditNoteProducts(value, $this);
            }
        };
        BO.CreditNoteProduct = CreditNoteProduct;
        var Dashboard = (function () {
            function Dashboard() {
                this._originalTypeClassName = "DemonstratorApp.BO.Dashboard";
                this.Domain = DemonstratorApp.BO;
                this.SupplierStatistics = [];
                this.BuyerStatistics = [];
                this['_key'] = this.Id = 0;
            }
            Dashboard.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Dashboard;
        }());
        Dashboard.setSupplierStatistics = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.SupplierStatistics == null)
                $this.SupplierStatistics = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.SupplierStatistics.length > 0) {
                DemonstratorApp.BO.Dashboard.removeSupplierStatistics($this, $this.SupplierStatistics[0]);
            }
            DemonstratorApp.BO.Dashboard.addManySupplierStatistics($this, copyItems);
        };
        Dashboard.addManySupplierStatistics = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Dashboard.addSupplierStatistics($this, items[i]);
            }
        };
        Dashboard.addSupplierStatistics = function ($this, item) {
            if ($this.SupplierStatistics == null)
                $this.SupplierStatistics = [];
            if (item == null || $this.SupplierStatistics.indexOf(item) > -1)
                return;
            $this.SupplierStatistics.push(item);
        };
        Dashboard.addRangeSupplierStatistics = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Dashboard.addSupplierStatistics($this, item); });
        };
        Dashboard.removeSupplierStatistics = function ($this, item) {
            if ($this == null || $this.SupplierStatistics == null || $this.SupplierStatistics.indexOf(item) === -1)
                return;
            var _index = $this.SupplierStatistics.indexOf(item);
            $this.SupplierStatistics.splice(_index, 1);
        };
        Dashboard.clearSupplierStatistics = function ($this) {
            $this.SupplierStatistics = null;
        };
        Dashboard.setBuyerStatistics = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.BuyerStatistics == null)
                $this.BuyerStatistics = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.BuyerStatistics.length > 0) {
                DemonstratorApp.BO.Dashboard.removeBuyerStatistics($this, $this.BuyerStatistics[0]);
            }
            DemonstratorApp.BO.Dashboard.addManyBuyerStatistics($this, copyItems);
        };
        Dashboard.addManyBuyerStatistics = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Dashboard.addBuyerStatistics($this, items[i]);
            }
        };
        Dashboard.addBuyerStatistics = function ($this, item) {
            if ($this.BuyerStatistics == null)
                $this.BuyerStatistics = [];
            if (item == null || $this.BuyerStatistics.indexOf(item) > -1)
                return;
            $this.BuyerStatistics.push(item);
        };
        Dashboard.addRangeBuyerStatistics = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Dashboard.addBuyerStatistics($this, item); });
        };
        Dashboard.removeBuyerStatistics = function ($this, item) {
            if ($this == null || $this.BuyerStatistics == null || $this.BuyerStatistics.indexOf(item) === -1)
                return;
            var _index = $this.BuyerStatistics.indexOf(item);
            $this.BuyerStatistics.splice(_index, 1);
        };
        Dashboard.clearBuyerStatistics = function ($this) {
            $this.BuyerStatistics = null;
        };
        BO.Dashboard = Dashboard;
        var SupplierStatistic = (function () {
            function SupplierStatistic() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierStatistic";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierStatistic.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierStatistic;
        }());
        SupplierStatistic.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        BO.SupplierStatistic = SupplierStatistic;
        var BuyerStatistic = (function () {
            function BuyerStatistic() {
                this._originalTypeClassName = "DemonstratorApp.BO.BuyerStatistic";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            BuyerStatistic.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return BuyerStatistic;
        }());
        BuyerStatistic.setBuyer = function ($this, value) {
            var oldValue = $this.Buyer;
            $this.Buyer = value;
            if (value != null) {
            }
        };
        BO.BuyerStatistic = BuyerStatistic;
        var DeliveryNote = (function () {
            function DeliveryNote() {
                this._originalTypeClassName = "DemonstratorApp.BO.DeliveryNote";
                this.Domain = DemonstratorApp.BO;
                this.Products = [];
                this.DeliveryNoteProducts = [];
                this.Orders = [];
                this['_key'] = this.Id = 0;
            }
            DeliveryNote.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DeliveryNote;
        }());
        DeliveryNote.setProducts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Products == null)
                $this.Products = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Products.length > 0) {
                DemonstratorApp.BO.DeliveryNote.removeProducts($this, $this.Products[0]);
            }
            DemonstratorApp.BO.DeliveryNote.addManyProducts($this, copyItems);
        };
        DeliveryNote.addManyProducts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.DeliveryNote.addProducts($this, items[i]);
            }
        };
        DeliveryNote.addProducts = function ($this, item) {
            if ($this.Products == null)
                $this.Products = [];
            if (item == null || $this.Products.indexOf(item) > -1)
                return;
            $this.Products.push(item);
        };
        DeliveryNote.addRangeProducts = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.DeliveryNote.addProducts($this, item); });
        };
        DeliveryNote.removeProducts = function ($this, item) {
            if ($this == null || $this.Products == null || $this.Products.indexOf(item) === -1)
                return;
            var _index = $this.Products.indexOf(item);
            $this.Products.splice(_index, 1);
        };
        DeliveryNote.clearProducts = function ($this) {
            $this.Products = null;
        };
        DeliveryNote.setDeliveryNoteProducts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.DeliveryNoteProducts == null)
                $this.DeliveryNoteProducts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.DeliveryNoteProducts.length > 0) {
                DemonstratorApp.BO.DeliveryNote.removeDeliveryNoteProducts($this, $this.DeliveryNoteProducts[0]);
            }
            DemonstratorApp.BO.DeliveryNote.addManyDeliveryNoteProducts($this, copyItems);
        };
        DeliveryNote.addManyDeliveryNoteProducts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.DeliveryNote.addDeliveryNoteProducts($this, items[i]);
            }
        };
        DeliveryNote.addDeliveryNoteProducts = function ($this, item) {
            if ($this.DeliveryNoteProducts == null)
                $this.DeliveryNoteProducts = [];
            if (item == null || $this.DeliveryNoteProducts.indexOf(item) > -1)
                return;
            $this.DeliveryNoteProducts.push(item);
            if (item.DeliveryNote != $this) {
                DemonstratorApp.BO.DeliveryNoteProduct.setDeliveryNote(item, $this);
            }
        };
        DeliveryNote.addRangeDeliveryNoteProducts = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.DeliveryNote.addDeliveryNoteProducts($this, item); });
        };
        DeliveryNote.removeDeliveryNoteProducts = function ($this, item) {
            if ($this == null || $this.DeliveryNoteProducts == null || $this.DeliveryNoteProducts.indexOf(item) === -1)
                return;
            var _index = $this.DeliveryNoteProducts.indexOf(item);
            $this.DeliveryNoteProducts.splice(_index, 1);
            item.DeliveryNote = null;
        };
        DeliveryNote.clearDeliveryNoteProducts = function ($this) {
            $this.DeliveryNoteProducts = null;
        };
        DeliveryNote.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.DeliveryNote.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.DeliveryNote.addManyOrders($this, copyItems);
        };
        DeliveryNote.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.DeliveryNote.addOrders($this, items[i]);
            }
        };
        DeliveryNote.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            Order.addDeliveryNotes(item, $this);
        };
        DeliveryNote.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.DeliveryNote.addOrders($this, item); });
        };
        DeliveryNote.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            Order.removeDeliveryNotes(item, $this);
        };
        DeliveryNote.clearOrders = function ($this) {
            $this.Orders = null;
        };
        DeliveryNote.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removeDeliveryNotes(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addDeliveryNotes(value, $this);
            }
        };
        BO.DeliveryNote = DeliveryNote;
        var DeliveryNoteProduct = (function () {
            function DeliveryNoteProduct() {
                this._originalTypeClassName = "DemonstratorApp.BO.DeliveryNoteProduct";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            DeliveryNoteProduct.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DeliveryNoteProduct;
        }());
        DeliveryNoteProduct.setDeliveryNote = function ($this, value) {
            var oldValue = $this.DeliveryNote;
            $this.DeliveryNote = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.DeliveryNote.removeDeliveryNoteProducts(oldValue, $this);
                }
                DemonstratorApp.BO.DeliveryNote.addDeliveryNoteProducts(value, $this);
            }
        };
        DeliveryNoteProduct.setSupplierProduct = function ($this, value) {
            var oldValue = $this.SupplierProduct;
            $this.SupplierProduct = value;
            if (value != null) {
            }
        };
        BO.DeliveryNoteProduct = DeliveryNoteProduct;
        var FinalAcceptanceCertificate = (function () {
            function FinalAcceptanceCertificate() {
                this._originalTypeClassName = "DemonstratorApp.BO.FinalAcceptanceCertificate";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            FinalAcceptanceCertificate.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return FinalAcceptanceCertificate;
        }());
        BO.FinalAcceptanceCertificate = FinalAcceptanceCertificate;
        var ImportedBuyer = (function () {
            function ImportedBuyer() {
                this._originalTypeClassName = "DemonstratorApp.BO.ImportedBuyer";
                this.Domain = DemonstratorApp.BO;
                this.CommercialAgreement = [];
                this.Transactions = [];
                this['_key'] = this.Id = 0;
            }
            ImportedBuyer.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ImportedBuyer;
        }());
        ImportedBuyer.setCommercialAgreement = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CommercialAgreement == null)
                $this.CommercialAgreement = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CommercialAgreement.length > 0) {
                DemonstratorApp.BO.ImportedBuyer.removeCommercialAgreement($this, $this.CommercialAgreement[0]);
            }
            DemonstratorApp.BO.ImportedBuyer.addManyCommercialAgreement($this, copyItems);
        };
        ImportedBuyer.addManyCommercialAgreement = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ImportedBuyer.addCommercialAgreement($this, items[i]);
            }
        };
        ImportedBuyer.addCommercialAgreement = function ($this, item) {
            if ($this.CommercialAgreement == null)
                $this.CommercialAgreement = [];
            if (item == null || $this.CommercialAgreement.indexOf(item) > -1)
                return;
            $this.CommercialAgreement.push(item);
            if (item.ImportedBuyer != $this) {
                DemonstratorApp.BO.CommercialAgreement.setImportedBuyer(item, $this);
            }
        };
        ImportedBuyer.addRangeCommercialAgreement = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ImportedBuyer.addCommercialAgreement($this, item); });
        };
        ImportedBuyer.removeCommercialAgreement = function ($this, item) {
            if ($this == null || $this.CommercialAgreement == null || $this.CommercialAgreement.indexOf(item) === -1)
                return;
            var _index = $this.CommercialAgreement.indexOf(item);
            $this.CommercialAgreement.splice(_index, 1);
            item.ImportedBuyer = null;
        };
        ImportedBuyer.clearCommercialAgreement = function ($this) {
            $this.CommercialAgreement = null;
        };
        ImportedBuyer.setTransactions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Transactions == null)
                $this.Transactions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Transactions.length > 0) {
                DemonstratorApp.BO.ImportedBuyer.removeTransactions($this, $this.Transactions[0]);
            }
            DemonstratorApp.BO.ImportedBuyer.addManyTransactions($this, copyItems);
        };
        ImportedBuyer.addManyTransactions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ImportedBuyer.addTransactions($this, items[i]);
            }
        };
        ImportedBuyer.addTransactions = function ($this, item) {
            if ($this.Transactions == null)
                $this.Transactions = [];
            if (item == null || $this.Transactions.indexOf(item) > -1)
                return;
            $this.Transactions.push(item);
            if (item.ImportedBuyer != $this) {
                DemonstratorApp.BO.Transaction.setImportedBuyer(item, $this);
            }
        };
        ImportedBuyer.addRangeTransactions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ImportedBuyer.addTransactions($this, item); });
        };
        ImportedBuyer.removeTransactions = function ($this, item) {
            if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1)
                return;
            var _index = $this.Transactions.indexOf(item);
            $this.Transactions.splice(_index, 1);
            item.ImportedBuyer = null;
        };
        ImportedBuyer.clearTransactions = function ($this) {
            $this.Transactions = null;
        };
        BO.ImportedBuyer = ImportedBuyer;
        var Intermediary = (function () {
            function Intermediary() {
                this._originalTypeClassName = "DemonstratorApp.BO.Intermediary";
                this.Domain = DemonstratorApp.BO;
                this.Orders = [];
                this.Transactions = [];
                this['_key'] = this.Id = 0;
            }
            Intermediary.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Intermediary;
        }());
        Intermediary.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.Intermediary.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.Intermediary.addManyOrders($this, copyItems);
        };
        Intermediary.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Intermediary.addOrders($this, items[i]);
            }
        };
        Intermediary.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            Order.addIntermediaries(item, $this);
        };
        Intermediary.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Intermediary.addOrders($this, item); });
        };
        Intermediary.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            Order.removeIntermediaries(item, $this);
        };
        Intermediary.clearOrders = function ($this) {
            $this.Orders = null;
        };
        Intermediary.setTransactions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Transactions == null)
                $this.Transactions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Transactions.length > 0) {
                DemonstratorApp.BO.Intermediary.removeTransactions($this, $this.Transactions[0]);
            }
            DemonstratorApp.BO.Intermediary.addManyTransactions($this, copyItems);
        };
        Intermediary.addManyTransactions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Intermediary.addTransactions($this, items[i]);
            }
        };
        Intermediary.addTransactions = function ($this, item) {
            if ($this.Transactions == null)
                $this.Transactions = [];
            if (item == null || $this.Transactions.indexOf(item) > -1)
                return;
            $this.Transactions.push(item);
            Transaction.addIntermediaries(item, $this);
        };
        Intermediary.addRangeTransactions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Intermediary.addTransactions($this, item); });
        };
        Intermediary.removeTransactions = function ($this, item) {
            if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1)
                return;
            var _index = $this.Transactions.indexOf(item);
            $this.Transactions.splice(_index, 1);
            Transaction.removeIntermediaries(item, $this);
        };
        Intermediary.clearTransactions = function ($this) {
            $this.Transactions = null;
        };
        BO.Intermediary = Intermediary;
        var IntermediaryType;
        (function (IntermediaryType) {
            IntermediaryType[IntermediaryType["ThirdPartyLogisticsProviders"] = 0] = "ThirdPartyLogisticsProviders";
            IntermediaryType[IntermediaryType["TransportationCompanies"] = 1] = "TransportationCompanies";
            IntermediaryType[IntermediaryType["CustomsAgents"] = 2] = "CustomsAgents";
            IntermediaryType[IntermediaryType["ShippingAgent"] = 3] = "ShippingAgent";
            IntermediaryType[IntermediaryType["Other"] = 4] = "Other";
        })(IntermediaryType = BO.IntermediaryType || (BO.IntermediaryType = {}));
        var PartialProofOfDelivery = (function () {
            function PartialProofOfDelivery() {
                this._originalTypeClassName = "DemonstratorApp.BO.PartialProofOfDelivery";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            PartialProofOfDelivery.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return PartialProofOfDelivery;
        }());
        PartialProofOfDelivery.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removePartialProofOfDeliveries(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addPartialProofOfDeliveries(value, $this);
            }
        };
        BO.PartialProofOfDelivery = PartialProofOfDelivery;
        var CustomsClearingDocumentation = (function () {
            function CustomsClearingDocumentation() {
                this._originalTypeClassName = "DemonstratorApp.BO.CustomsClearingDocumentation";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            CustomsClearingDocumentation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return CustomsClearingDocumentation;
        }());
        CustomsClearingDocumentation.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removeCustomsClearingDocumentations(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addCustomsClearingDocumentations(value, $this);
            }
        };
        BO.CustomsClearingDocumentation = CustomsClearingDocumentation;
        var AnnualTransactionVolume = (function () {
            function AnnualTransactionVolume() {
                this._originalTypeClassName = "DemonstratorApp.BO.AnnualTransactionVolume";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            AnnualTransactionVolume.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AnnualTransactionVolume;
        }());
        BO.AnnualTransactionVolume = AnnualTransactionVolume;
        var Invoice = (function () {
            function Invoice() {
                this._originalTypeClassName = "DemonstratorApp.BO.Invoice";
                this.Domain = DemonstratorApp.BO;
                this.Products = [];
                this.InvoiceProducts = [];
                this.Orders = [];
                this['_key'] = this.Id = 0;
            }
            Invoice.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Invoice;
        }());
        Invoice.setProducts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Products == null)
                $this.Products = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Products.length > 0) {
                DemonstratorApp.BO.Invoice.removeProducts($this, $this.Products[0]);
            }
            DemonstratorApp.BO.Invoice.addManyProducts($this, copyItems);
        };
        Invoice.addManyProducts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Invoice.addProducts($this, items[i]);
            }
        };
        Invoice.addProducts = function ($this, item) {
            if ($this.Products == null)
                $this.Products = [];
            if (item == null || $this.Products.indexOf(item) > -1)
                return;
            $this.Products.push(item);
        };
        Invoice.addRangeProducts = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Invoice.addProducts($this, item); });
        };
        Invoice.removeProducts = function ($this, item) {
            if ($this == null || $this.Products == null || $this.Products.indexOf(item) === -1)
                return;
            var _index = $this.Products.indexOf(item);
            $this.Products.splice(_index, 1);
        };
        Invoice.clearProducts = function ($this) {
            $this.Products = null;
        };
        Invoice.setInvoiceProducts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.InvoiceProducts == null)
                $this.InvoiceProducts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.InvoiceProducts.length > 0) {
                DemonstratorApp.BO.Invoice.removeInvoiceProducts($this, $this.InvoiceProducts[0]);
            }
            DemonstratorApp.BO.Invoice.addManyInvoiceProducts($this, copyItems);
        };
        Invoice.addManyInvoiceProducts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Invoice.addInvoiceProducts($this, items[i]);
            }
        };
        Invoice.addInvoiceProducts = function ($this, item) {
            if ($this.InvoiceProducts == null)
                $this.InvoiceProducts = [];
            if (item == null || $this.InvoiceProducts.indexOf(item) > -1)
                return;
            $this.InvoiceProducts.push(item);
            if (item.Invoice != $this) {
                DemonstratorApp.BO.InvoiceProduct.setInvoice(item, $this);
            }
        };
        Invoice.addRangeInvoiceProducts = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Invoice.addInvoiceProducts($this, item); });
        };
        Invoice.removeInvoiceProducts = function ($this, item) {
            if ($this == null || $this.InvoiceProducts == null || $this.InvoiceProducts.indexOf(item) === -1)
                return;
            var _index = $this.InvoiceProducts.indexOf(item);
            $this.InvoiceProducts.splice(_index, 1);
            item.Invoice = null;
        };
        Invoice.clearInvoiceProducts = function ($this) {
            $this.InvoiceProducts = null;
        };
        Invoice.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.Invoice.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.Invoice.addManyOrders($this, copyItems);
        };
        Invoice.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Invoice.addOrders($this, items[i]);
            }
        };
        Invoice.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            Order.addInvoices(item, $this);
        };
        Invoice.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Invoice.addOrders($this, item); });
        };
        Invoice.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            Order.removeInvoices(item, $this);
        };
        Invoice.clearOrders = function ($this) {
            $this.Orders = null;
        };
        Invoice.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removeInvoices(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addInvoices(value, $this);
            }
        };
        BO.Invoice = Invoice;
        var InvoiceProduct = (function () {
            function InvoiceProduct() {
                this._originalTypeClassName = "DemonstratorApp.BO.InvoiceProduct";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            InvoiceProduct.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return InvoiceProduct;
        }());
        InvoiceProduct.setInvoice = function ($this, value) {
            var oldValue = $this.Invoice;
            $this.Invoice = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Invoice.removeInvoiceProducts(oldValue, $this);
                }
                DemonstratorApp.BO.Invoice.addInvoiceProducts(value, $this);
            }
        };
        InvoiceProduct.setSupplierProduct = function ($this, value) {
            var oldValue = $this.SupplierProduct;
            $this.SupplierProduct = value;
            if (value != null) {
            }
        };
        BO.InvoiceProduct = InvoiceProduct;
        var LetterOfCredit = (function () {
            function LetterOfCredit() {
                this._originalTypeClassName = "DemonstratorApp.BO.LetterOfCredit";
                this.Domain = DemonstratorApp.BO;
                this.Orders = [];
                this['_key'] = this.Id = 0;
            }
            LetterOfCredit.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return LetterOfCredit;
        }());
        LetterOfCredit.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.LetterOfCredit.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.LetterOfCredit.addManyOrders($this, copyItems);
        };
        LetterOfCredit.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.LetterOfCredit.addOrders($this, items[i]);
            }
        };
        LetterOfCredit.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            Order.addLetterOfCredits(item, $this);
        };
        LetterOfCredit.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.LetterOfCredit.addOrders($this, item); });
        };
        LetterOfCredit.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            Order.removeLetterOfCredits(item, $this);
        };
        LetterOfCredit.clearOrders = function ($this) {
            $this.Orders = null;
        };
        LetterOfCredit.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removeLetterOfCredits(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addLetterOfCredits(value, $this);
            }
        };
        BO.LetterOfCredit = LetterOfCredit;
        var MeanOfTransport = (function () {
            function MeanOfTransport() {
                this._originalTypeClassName = "DemonstratorApp.BO.MeanOfTransport";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            MeanOfTransport.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return MeanOfTransport;
        }());
        BO.MeanOfTransport = MeanOfTransport;
        var Order = (function () {
            function Order() {
                this._originalTypeClassName = "DemonstratorApp.BO.Order";
                this.Domain = DemonstratorApp.BO;
                this.OrderProducts = [];
                this.ProofOfDeliveries = [];
                this.Invoices = [];
                this.DeliveryNotes = [];
                this.CreditNotes = [];
                this.OrderPayment = [];
                this.LetterOfCredits = [];
                this.BillOfLandings = [];
                this.Intermediaries = [];
                this['_key'] = this.Id = 0;
            }
            Order.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Order;
        }());
        Order.setCommercialAgreement = function ($this, value) {
            var oldValue = $this.CommercialAgreement;
            $this.CommercialAgreement = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.CommercialAgreement.removeOrders(oldValue, $this);
                }
                DemonstratorApp.BO.CommercialAgreement.addOrders(value, $this);
            }
        };
        Order.setOrderProducts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.OrderProducts == null)
                $this.OrderProducts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.OrderProducts.length > 0) {
                DemonstratorApp.BO.Order.removeOrderProducts($this, $this.OrderProducts[0]);
            }
            DemonstratorApp.BO.Order.addManyOrderProducts($this, copyItems);
        };
        Order.addManyOrderProducts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addOrderProducts($this, items[i]);
            }
        };
        Order.addOrderProducts = function ($this, item) {
            if ($this.OrderProducts == null)
                $this.OrderProducts = [];
            if (item == null || $this.OrderProducts.indexOf(item) > -1)
                return;
            $this.OrderProducts.push(item);
            if (item.Order != $this) {
                DemonstratorApp.BO.OrderProduct.setOrder(item, $this);
            }
        };
        Order.addRangeOrderProducts = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addOrderProducts($this, item); });
        };
        Order.removeOrderProducts = function ($this, item) {
            if ($this == null || $this.OrderProducts == null || $this.OrderProducts.indexOf(item) === -1)
                return;
            var _index = $this.OrderProducts.indexOf(item);
            $this.OrderProducts.splice(_index, 1);
            item.Order = null;
        };
        Order.clearOrderProducts = function ($this) {
            $this.OrderProducts = null;
        };
        Order.setProofOfDeliveries = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ProofOfDeliveries == null)
                $this.ProofOfDeliveries = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ProofOfDeliveries.length > 0) {
                DemonstratorApp.BO.Order.removeProofOfDeliveries($this, $this.ProofOfDeliveries[0]);
            }
            DemonstratorApp.BO.Order.addManyProofOfDeliveries($this, copyItems);
        };
        Order.addManyProofOfDeliveries = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addProofOfDeliveries($this, items[i]);
            }
        };
        Order.addProofOfDeliveries = function ($this, item) {
            if ($this.ProofOfDeliveries == null)
                $this.ProofOfDeliveries = [];
            if (item == null || $this.ProofOfDeliveries.indexOf(item) > -1)
                return;
            $this.ProofOfDeliveries.push(item);
            ProofOfDelivery.addOrders(item, $this);
        };
        Order.addRangeProofOfDeliveries = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addProofOfDeliveries($this, item); });
        };
        Order.removeProofOfDeliveries = function ($this, item) {
            if ($this == null || $this.ProofOfDeliveries == null || $this.ProofOfDeliveries.indexOf(item) === -1)
                return;
            var _index = $this.ProofOfDeliveries.indexOf(item);
            $this.ProofOfDeliveries.splice(_index, 1);
            ProofOfDelivery.removeOrders(item, $this);
        };
        Order.clearProofOfDeliveries = function ($this) {
            $this.ProofOfDeliveries = null;
        };
        Order.setInvoices = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Invoices == null)
                $this.Invoices = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Invoices.length > 0) {
                DemonstratorApp.BO.Order.removeInvoices($this, $this.Invoices[0]);
            }
            DemonstratorApp.BO.Order.addManyInvoices($this, copyItems);
        };
        Order.addManyInvoices = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addInvoices($this, items[i]);
            }
        };
        Order.addInvoices = function ($this, item) {
            if ($this.Invoices == null)
                $this.Invoices = [];
            if (item == null || $this.Invoices.indexOf(item) > -1)
                return;
            $this.Invoices.push(item);
            Invoice.addOrders(item, $this);
        };
        Order.addRangeInvoices = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addInvoices($this, item); });
        };
        Order.removeInvoices = function ($this, item) {
            if ($this == null || $this.Invoices == null || $this.Invoices.indexOf(item) === -1)
                return;
            var _index = $this.Invoices.indexOf(item);
            $this.Invoices.splice(_index, 1);
            Invoice.removeOrders(item, $this);
        };
        Order.clearInvoices = function ($this) {
            $this.Invoices = null;
        };
        Order.setDeliveryNotes = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.DeliveryNotes == null)
                $this.DeliveryNotes = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.DeliveryNotes.length > 0) {
                DemonstratorApp.BO.Order.removeDeliveryNotes($this, $this.DeliveryNotes[0]);
            }
            DemonstratorApp.BO.Order.addManyDeliveryNotes($this, copyItems);
        };
        Order.addManyDeliveryNotes = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addDeliveryNotes($this, items[i]);
            }
        };
        Order.addDeliveryNotes = function ($this, item) {
            if ($this.DeliveryNotes == null)
                $this.DeliveryNotes = [];
            if (item == null || $this.DeliveryNotes.indexOf(item) > -1)
                return;
            $this.DeliveryNotes.push(item);
            DeliveryNote.addOrders(item, $this);
        };
        Order.addRangeDeliveryNotes = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addDeliveryNotes($this, item); });
        };
        Order.removeDeliveryNotes = function ($this, item) {
            if ($this == null || $this.DeliveryNotes == null || $this.DeliveryNotes.indexOf(item) === -1)
                return;
            var _index = $this.DeliveryNotes.indexOf(item);
            $this.DeliveryNotes.splice(_index, 1);
            DeliveryNote.removeOrders(item, $this);
        };
        Order.clearDeliveryNotes = function ($this) {
            $this.DeliveryNotes = null;
        };
        Order.setOrderStatus = function ($this, value) {
            var oldValue = $this.OrderStatus;
            $this.OrderStatus = value;
            if (value != null) {
            }
        };
        Order.setFinalAcceptanceCertificate = function ($this, value) {
            var oldValue = $this.FinalAcceptanceCertificate;
            $this.FinalAcceptanceCertificate = value;
            if (value != null) {
            }
        };
        Order.setCreditNotes = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CreditNotes == null)
                $this.CreditNotes = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CreditNotes.length > 0) {
                DemonstratorApp.BO.Order.removeCreditNotes($this, $this.CreditNotes[0]);
            }
            DemonstratorApp.BO.Order.addManyCreditNotes($this, copyItems);
        };
        Order.addManyCreditNotes = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addCreditNotes($this, items[i]);
            }
        };
        Order.addCreditNotes = function ($this, item) {
            if ($this.CreditNotes == null)
                $this.CreditNotes = [];
            if (item == null || $this.CreditNotes.indexOf(item) > -1)
                return;
            $this.CreditNotes.push(item);
            CreditNote.addOrders(item, $this);
        };
        Order.addRangeCreditNotes = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addCreditNotes($this, item); });
        };
        Order.removeCreditNotes = function ($this, item) {
            if ($this == null || $this.CreditNotes == null || $this.CreditNotes.indexOf(item) === -1)
                return;
            var _index = $this.CreditNotes.indexOf(item);
            $this.CreditNotes.splice(_index, 1);
            CreditNote.removeOrders(item, $this);
        };
        Order.clearCreditNotes = function ($this) {
            $this.CreditNotes = null;
        };
        Order.setOrderPayment = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.OrderPayment == null)
                $this.OrderPayment = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.OrderPayment.length > 0) {
                DemonstratorApp.BO.Order.removeOrderPayment($this, $this.OrderPayment[0]);
            }
            DemonstratorApp.BO.Order.addManyOrderPayment($this, copyItems);
        };
        Order.addManyOrderPayment = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addOrderPayment($this, items[i]);
            }
        };
        Order.addOrderPayment = function ($this, item) {
            if ($this.OrderPayment == null)
                $this.OrderPayment = [];
            if (item == null || $this.OrderPayment.indexOf(item) > -1)
                return;
            $this.OrderPayment.push(item);
            if (item.Order != $this) {
                DemonstratorApp.BO.OrderPayment.setOrder(item, $this);
            }
        };
        Order.addRangeOrderPayment = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addOrderPayment($this, item); });
        };
        Order.removeOrderPayment = function ($this, item) {
            if ($this == null || $this.OrderPayment == null || $this.OrderPayment.indexOf(item) === -1)
                return;
            var _index = $this.OrderPayment.indexOf(item);
            $this.OrderPayment.splice(_index, 1);
            item.Order = null;
        };
        Order.clearOrderPayment = function ($this) {
            $this.OrderPayment = null;
        };
        Order.setLetterOfCredits = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.LetterOfCredits == null)
                $this.LetterOfCredits = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.LetterOfCredits.length > 0) {
                DemonstratorApp.BO.Order.removeLetterOfCredits($this, $this.LetterOfCredits[0]);
            }
            DemonstratorApp.BO.Order.addManyLetterOfCredits($this, copyItems);
        };
        Order.addManyLetterOfCredits = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addLetterOfCredits($this, items[i]);
            }
        };
        Order.addLetterOfCredits = function ($this, item) {
            if ($this.LetterOfCredits == null)
                $this.LetterOfCredits = [];
            if (item == null || $this.LetterOfCredits.indexOf(item) > -1)
                return;
            $this.LetterOfCredits.push(item);
            LetterOfCredit.addOrders(item, $this);
        };
        Order.addRangeLetterOfCredits = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addLetterOfCredits($this, item); });
        };
        Order.removeLetterOfCredits = function ($this, item) {
            if ($this == null || $this.LetterOfCredits == null || $this.LetterOfCredits.indexOf(item) === -1)
                return;
            var _index = $this.LetterOfCredits.indexOf(item);
            $this.LetterOfCredits.splice(_index, 1);
            LetterOfCredit.removeOrders(item, $this);
        };
        Order.clearLetterOfCredits = function ($this) {
            $this.LetterOfCredits = null;
        };
        Order.setBillOfLandings = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.BillOfLandings == null)
                $this.BillOfLandings = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.BillOfLandings.length > 0) {
                DemonstratorApp.BO.Order.removeBillOfLandings($this, $this.BillOfLandings[0]);
            }
            DemonstratorApp.BO.Order.addManyBillOfLandings($this, copyItems);
        };
        Order.addManyBillOfLandings = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addBillOfLandings($this, items[i]);
            }
        };
        Order.addBillOfLandings = function ($this, item) {
            if ($this.BillOfLandings == null)
                $this.BillOfLandings = [];
            if (item == null || $this.BillOfLandings.indexOf(item) > -1)
                return;
            $this.BillOfLandings.push(item);
            BillOfLanding.addOrders(item, $this);
        };
        Order.addRangeBillOfLandings = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addBillOfLandings($this, item); });
        };
        Order.removeBillOfLandings = function ($this, item) {
            if ($this == null || $this.BillOfLandings == null || $this.BillOfLandings.indexOf(item) === -1)
                return;
            var _index = $this.BillOfLandings.indexOf(item);
            $this.BillOfLandings.splice(_index, 1);
            BillOfLanding.removeOrders(item, $this);
        };
        Order.clearBillOfLandings = function ($this) {
            $this.BillOfLandings = null;
        };
        Order.setIntermediaries = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Intermediaries == null)
                $this.Intermediaries = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Intermediaries.length > 0) {
                DemonstratorApp.BO.Order.removeIntermediaries($this, $this.Intermediaries[0]);
            }
            DemonstratorApp.BO.Order.addManyIntermediaries($this, copyItems);
        };
        Order.addManyIntermediaries = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Order.addIntermediaries($this, items[i]);
            }
        };
        Order.addIntermediaries = function ($this, item) {
            if ($this.Intermediaries == null)
                $this.Intermediaries = [];
            if (item == null || $this.Intermediaries.indexOf(item) > -1)
                return;
            $this.Intermediaries.push(item);
            Intermediary.addOrders(item, $this);
        };
        Order.addRangeIntermediaries = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Order.addIntermediaries($this, item); });
        };
        Order.removeIntermediaries = function ($this, item) {
            if ($this == null || $this.Intermediaries == null || $this.Intermediaries.indexOf(item) === -1)
                return;
            var _index = $this.Intermediaries.indexOf(item);
            $this.Intermediaries.splice(_index, 1);
            Intermediary.removeOrders(item, $this);
        };
        Order.clearIntermediaries = function ($this) {
            $this.Intermediaries = null;
        };
        Order.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removeOrders(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addOrders(value, $this);
            }
        };
        BO.Order = Order;
        var OrderStatus = (function () {
            function OrderStatus() {
                this._originalTypeClassName = "DemonstratorApp.BO.OrderStatus";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            OrderStatus.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderStatus;
        }());
        BO.OrderStatus = OrderStatus;
        var CreditNote = (function () {
            function CreditNote() {
                this._originalTypeClassName = "DemonstratorApp.BO.CreditNote";
                this.Domain = DemonstratorApp.BO;
                this.Orders = [];
                this.CreditNoteProducts = [];
                this['_key'] = this.Id = 0;
            }
            CreditNote.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return CreditNote;
        }());
        CreditNote.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.CreditNote.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.CreditNote.addManyOrders($this, copyItems);
        };
        CreditNote.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.CreditNote.addOrders($this, items[i]);
            }
        };
        CreditNote.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            Order.addCreditNotes(item, $this);
        };
        CreditNote.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.CreditNote.addOrders($this, item); });
        };
        CreditNote.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            Order.removeCreditNotes(item, $this);
        };
        CreditNote.clearOrders = function ($this) {
            $this.Orders = null;
        };
        CreditNote.setCreditNoteProducts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CreditNoteProducts == null)
                $this.CreditNoteProducts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CreditNoteProducts.length > 0) {
                DemonstratorApp.BO.CreditNote.removeCreditNoteProducts($this, $this.CreditNoteProducts[0]);
            }
            DemonstratorApp.BO.CreditNote.addManyCreditNoteProducts($this, copyItems);
        };
        CreditNote.addManyCreditNoteProducts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.CreditNote.addCreditNoteProducts($this, items[i]);
            }
        };
        CreditNote.addCreditNoteProducts = function ($this, item) {
            if ($this.CreditNoteProducts == null)
                $this.CreditNoteProducts = [];
            if (item == null || $this.CreditNoteProducts.indexOf(item) > -1)
                return;
            $this.CreditNoteProducts.push(item);
            if (item.CreditNote != $this) {
                DemonstratorApp.BO.CreditNoteProduct.setCreditNote(item, $this);
            }
        };
        CreditNote.addRangeCreditNoteProducts = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.CreditNote.addCreditNoteProducts($this, item); });
        };
        CreditNote.removeCreditNoteProducts = function ($this, item) {
            if ($this == null || $this.CreditNoteProducts == null || $this.CreditNoteProducts.indexOf(item) === -1)
                return;
            var _index = $this.CreditNoteProducts.indexOf(item);
            $this.CreditNoteProducts.splice(_index, 1);
            item.CreditNote = null;
        };
        CreditNote.clearCreditNoteProducts = function ($this) {
            $this.CreditNoteProducts = null;
        };
        CreditNote.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removeCreditNotes(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addCreditNotes(value, $this);
            }
        };
        BO.CreditNote = CreditNote;
        var OrderPayment = (function () {
            function OrderPayment() {
                this._originalTypeClassName = "DemonstratorApp.BO.OrderPayment";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            OrderPayment.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderPayment;
        }());
        OrderPayment.setOrder = function ($this, value) {
            var oldValue = $this.Order;
            $this.Order = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Order.removeOrderPayment(oldValue, $this);
                }
                DemonstratorApp.BO.Order.addOrderPayment(value, $this);
            }
        };
        BO.OrderPayment = OrderPayment;
        var OrderProduct = (function () {
            function OrderProduct() {
                this._originalTypeClassName = "DemonstratorApp.BO.OrderProduct";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            OrderProduct.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return OrderProduct;
        }());
        OrderProduct.setOrder = function ($this, value) {
            var oldValue = $this.Order;
            $this.Order = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Order.removeOrderProducts(oldValue, $this);
                }
                DemonstratorApp.BO.Order.addOrderProducts(value, $this);
            }
        };
        OrderProduct.setSupplierProduct = function ($this, value) {
            var oldValue = $this.SupplierProduct;
            $this.SupplierProduct = value;
            if (value != null) {
            }
        };
        BO.OrderProduct = OrderProduct;
        var Payment = (function () {
            function Payment() {
                this._originalTypeClassName = "DemonstratorApp.BO.Payment";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            Payment.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Payment;
        }());
        BO.Payment = Payment;
        var ProofOfDelivery = (function () {
            function ProofOfDelivery() {
                this._originalTypeClassName = "DemonstratorApp.BO.ProofOfDelivery";
                this.Domain = DemonstratorApp.BO;
                this.Orders = [];
                this['_key'] = this.Id = 0;
            }
            ProofOfDelivery.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ProofOfDelivery;
        }());
        ProofOfDelivery.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.ProofOfDelivery.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.ProofOfDelivery.addManyOrders($this, copyItems);
        };
        ProofOfDelivery.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ProofOfDelivery.addOrders($this, items[i]);
            }
        };
        ProofOfDelivery.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            Order.addProofOfDeliveries(item, $this);
        };
        ProofOfDelivery.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ProofOfDelivery.addOrders($this, item); });
        };
        ProofOfDelivery.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            Order.removeProofOfDeliveries(item, $this);
        };
        ProofOfDelivery.clearOrders = function ($this) {
            $this.Orders = null;
        };
        ProofOfDelivery.setTransaction = function ($this, value) {
            var oldValue = $this.Transaction;
            $this.Transaction = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Transaction.removeProofOfDeliveries(oldValue, $this);
                }
                DemonstratorApp.BO.Transaction.addProofOfDeliveries(value, $this);
            }
        };
        BO.ProofOfDelivery = ProofOfDelivery;
        var SupplierBusinessStructureData = (function () {
            function SupplierBusinessStructureData() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierBusinessStructureData";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierBusinessStructureData.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierBusinessStructureData;
        }());
        BO.SupplierBusinessStructureData = SupplierBusinessStructureData;
        var SupplierReceivables = (function () {
            function SupplierReceivables() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierReceivables";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierReceivables.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierReceivables;
        }());
        BO.SupplierReceivables = SupplierReceivables;
        var SupplierContactInformation = (function () {
            function SupplierContactInformation() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierContactInformation";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierContactInformation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierContactInformation;
        }());
        BO.SupplierContactInformation = SupplierContactInformation;
        var SupplierTurnover = (function () {
            function SupplierTurnover() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierTurnover";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierTurnover.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierTurnover;
        }());
        BO.SupplierTurnover = SupplierTurnover;
        var SupplierExtraInformation = (function () {
            function SupplierExtraInformation() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierExtraInformation";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierExtraInformation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierExtraInformation;
        }());
        BO.SupplierExtraInformation = SupplierExtraInformation;
        var SupplierUploads = (function () {
            function SupplierUploads() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierUploads";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierUploads.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierUploads;
        }());
        SupplierUploads.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Supplier.removeFinancialStatements(oldValue, $this);
                }
                DemonstratorApp.BO.Supplier.addFinancialStatements(value, $this);
            }
        };
        SupplierUploads.setSupplier2 = function ($this, value) {
            var oldValue = $this.Supplier2;
            $this.Supplier2 = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Supplier.removeEconomicEvaluations(oldValue, $this);
                }
                DemonstratorApp.BO.Supplier.addEconomicEvaluations(value, $this);
            }
        };
        BO.SupplierUploads = SupplierUploads;
        var SupplierEvaluation = (function () {
            function SupplierEvaluation() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierEvaluation";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierEvaluation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierEvaluation;
        }());
        BO.SupplierEvaluation = SupplierEvaluation;
        var DataQuality = (function () {
            function DataQuality() {
                this._originalTypeClassName = "DemonstratorApp.BO.DataQuality";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            DataQuality.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DataQuality;
        }());
        BO.DataQuality = DataQuality;
        var DataAvailability = (function () {
            function DataAvailability() {
                this._originalTypeClassName = "DemonstratorApp.BO.DataAvailability";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            DataAvailability.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DataAvailability;
        }());
        DataAvailability.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
                if (oldValue != null && oldValue.DataAvailability != null) {
                    oldValue.DataAvailability = null;
                }
                if ($this.Supplier.DataAvailability !== $this) {
                    DemonstratorApp.BO.Supplier.setDataAvailability(value, $this);
                }
            }
        };
        BO.DataAvailability = DataAvailability;
        var SupplierProduct = (function () {
            function SupplierProduct() {
                this._originalTypeClassName = "DemonstratorApp.BO.SupplierProduct";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            SupplierProduct.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return SupplierProduct;
        }());
        SupplierProduct.setProductCategory = function ($this, value) {
            var oldValue = $this.ProductCategory;
            $this.ProductCategory = value;
            if (value != null) {
            }
        };
        SupplierProduct.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Supplier.removeSupplierProducts(oldValue, $this);
                }
                DemonstratorApp.BO.Supplier.addSupplierProducts(value, $this);
            }
        };
        BO.SupplierProduct = SupplierProduct;
        var ProductCategory = (function () {
            function ProductCategory() {
                this._originalTypeClassName = "DemonstratorApp.BO.ProductCategory";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            ProductCategory.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ProductCategory;
        }());
        BO.ProductCategory = ProductCategory;
        var Transaction = (function () {
            function Transaction() {
                this._originalTypeClassName = "DemonstratorApp.BO.Transaction";
                this.Domain = DemonstratorApp.BO;
                this.Orders = [];
                this.CreditNotes = [];
                this.DeliveryNotes = [];
                this.Invoices = [];
                this.ProofOfDeliveries = [];
                this.LetterOfCredits = [];
                this.Intermediaries = [];
                this.PartialProofOfDeliveries = [];
                this.CustomsClearingDocumentations = [];
                this.BillOfLandings = [];
                this['_key'] = this.Id = 0;
            }
            Transaction.CalculateDataAvailability = function ($this) {
                if (CLMS.Framework.Number.GreaterThan(function () { return $this.Orders.length; }, function () { return 0; })) {
                    $this.Supplier.DataAvailability.Orders = true;
                }
            };
            Transaction.Get_FundedAmount = function ($this) {
                var totalInv = 0;
                var total = 0;
                totalInv = Joove.Common.nullSafe(function () { return $this.Invoices.linq.sum(function (a) { return Joove.Common.nullSafe(function () { return a.TotalPrice; }, 0); }); }, 0);
                total = Joove.Common.safeNumber((Joove.Common.safeNumber(totalInv) * Joove.Common.safeNumber(Joove.Common.nullSafe(function () { return $this.CommercialAgreement.Agreement.FundedRate; }, 0)))) / Joove.Common.safeNumber(100);
                return (CLMS.Framework.Number.GreaterThan(function () { return $this.Invoices.length; }, function () { return 0; }) ? total : 0);
            };
            Transaction.Get_TransactionValue = function ($this) {
                return (CLMS.Framework.Number.GreaterThan(function () { return $this.Invoices.length; }, function () { return 0; }) ? Joove.Common.nullSafe(function () { return $this.Invoices.linq.sum(function (a) { return Joove.Common.nullSafe(function () { return a.TotalPrice; }, 0); }); }, 0) : 0);
            };
            Transaction.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Transaction;
        }());
        Transaction.setCommercialAgreement = function ($this, value) {
            var oldValue = $this.CommercialAgreement;
            $this.CommercialAgreement = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.CommercialAgreement.removeTransactions(oldValue, $this);
                }
                DemonstratorApp.BO.CommercialAgreement.addTransactions(value, $this);
            }
        };
        Transaction.setOrders = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Orders == null)
                $this.Orders = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Orders.length > 0) {
                DemonstratorApp.BO.Transaction.removeOrders($this, $this.Orders[0]);
            }
            DemonstratorApp.BO.Transaction.addManyOrders($this, copyItems);
        };
        Transaction.addManyOrders = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addOrders($this, items[i]);
            }
        };
        Transaction.addOrders = function ($this, item) {
            if ($this.Orders == null)
                $this.Orders = [];
            if (item == null || $this.Orders.indexOf(item) > -1)
                return;
            $this.Orders.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.Order.setTransaction(item, $this);
            }
        };
        Transaction.addRangeOrders = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addOrders($this, item); });
        };
        Transaction.removeOrders = function ($this, item) {
            if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1)
                return;
            var _index = $this.Orders.indexOf(item);
            $this.Orders.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearOrders = function ($this) {
            $this.Orders = null;
        };
        Transaction.setCreditNotes = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CreditNotes == null)
                $this.CreditNotes = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CreditNotes.length > 0) {
                DemonstratorApp.BO.Transaction.removeCreditNotes($this, $this.CreditNotes[0]);
            }
            DemonstratorApp.BO.Transaction.addManyCreditNotes($this, copyItems);
        };
        Transaction.addManyCreditNotes = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addCreditNotes($this, items[i]);
            }
        };
        Transaction.addCreditNotes = function ($this, item) {
            if ($this.CreditNotes == null)
                $this.CreditNotes = [];
            if (item == null || $this.CreditNotes.indexOf(item) > -1)
                return;
            $this.CreditNotes.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.CreditNote.setTransaction(item, $this);
            }
        };
        Transaction.addRangeCreditNotes = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addCreditNotes($this, item); });
        };
        Transaction.removeCreditNotes = function ($this, item) {
            if ($this == null || $this.CreditNotes == null || $this.CreditNotes.indexOf(item) === -1)
                return;
            var _index = $this.CreditNotes.indexOf(item);
            $this.CreditNotes.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearCreditNotes = function ($this) {
            $this.CreditNotes = null;
        };
        Transaction.setDeliveryNotes = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.DeliveryNotes == null)
                $this.DeliveryNotes = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.DeliveryNotes.length > 0) {
                DemonstratorApp.BO.Transaction.removeDeliveryNotes($this, $this.DeliveryNotes[0]);
            }
            DemonstratorApp.BO.Transaction.addManyDeliveryNotes($this, copyItems);
        };
        Transaction.addManyDeliveryNotes = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addDeliveryNotes($this, items[i]);
            }
        };
        Transaction.addDeliveryNotes = function ($this, item) {
            if ($this.DeliveryNotes == null)
                $this.DeliveryNotes = [];
            if (item == null || $this.DeliveryNotes.indexOf(item) > -1)
                return;
            $this.DeliveryNotes.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.DeliveryNote.setTransaction(item, $this);
            }
        };
        Transaction.addRangeDeliveryNotes = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addDeliveryNotes($this, item); });
        };
        Transaction.removeDeliveryNotes = function ($this, item) {
            if ($this == null || $this.DeliveryNotes == null || $this.DeliveryNotes.indexOf(item) === -1)
                return;
            var _index = $this.DeliveryNotes.indexOf(item);
            $this.DeliveryNotes.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearDeliveryNotes = function ($this) {
            $this.DeliveryNotes = null;
        };
        Transaction.setInvoices = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Invoices == null)
                $this.Invoices = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Invoices.length > 0) {
                DemonstratorApp.BO.Transaction.removeInvoices($this, $this.Invoices[0]);
            }
            DemonstratorApp.BO.Transaction.addManyInvoices($this, copyItems);
        };
        Transaction.addManyInvoices = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addInvoices($this, items[i]);
            }
        };
        Transaction.addInvoices = function ($this, item) {
            if ($this.Invoices == null)
                $this.Invoices = [];
            if (item == null || $this.Invoices.indexOf(item) > -1)
                return;
            $this.Invoices.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.Invoice.setTransaction(item, $this);
            }
        };
        Transaction.addRangeInvoices = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addInvoices($this, item); });
        };
        Transaction.removeInvoices = function ($this, item) {
            if ($this == null || $this.Invoices == null || $this.Invoices.indexOf(item) === -1)
                return;
            var _index = $this.Invoices.indexOf(item);
            $this.Invoices.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearInvoices = function ($this) {
            $this.Invoices = null;
        };
        Transaction.setProofOfDeliveries = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.ProofOfDeliveries == null)
                $this.ProofOfDeliveries = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.ProofOfDeliveries.length > 0) {
                DemonstratorApp.BO.Transaction.removeProofOfDeliveries($this, $this.ProofOfDeliveries[0]);
            }
            DemonstratorApp.BO.Transaction.addManyProofOfDeliveries($this, copyItems);
        };
        Transaction.addManyProofOfDeliveries = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addProofOfDeliveries($this, items[i]);
            }
        };
        Transaction.addProofOfDeliveries = function ($this, item) {
            if ($this.ProofOfDeliveries == null)
                $this.ProofOfDeliveries = [];
            if (item == null || $this.ProofOfDeliveries.indexOf(item) > -1)
                return;
            $this.ProofOfDeliveries.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.ProofOfDelivery.setTransaction(item, $this);
            }
        };
        Transaction.addRangeProofOfDeliveries = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addProofOfDeliveries($this, item); });
        };
        Transaction.removeProofOfDeliveries = function ($this, item) {
            if ($this == null || $this.ProofOfDeliveries == null || $this.ProofOfDeliveries.indexOf(item) === -1)
                return;
            var _index = $this.ProofOfDeliveries.indexOf(item);
            $this.ProofOfDeliveries.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearProofOfDeliveries = function ($this) {
            $this.ProofOfDeliveries = null;
        };
        Transaction.setTransactionStatus = function ($this, value) {
            var oldValue = $this.TransactionStatus;
            $this.TransactionStatus = value;
            if (value != null) {
            }
        };
        Transaction.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Supplier.removeTransactions(oldValue, $this);
                }
                DemonstratorApp.BO.Supplier.addTransactions(value, $this);
            }
        };
        Transaction.setImportedBuyer = function ($this, value) {
            var oldValue = $this.ImportedBuyer;
            $this.ImportedBuyer = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.ImportedBuyer.removeTransactions(oldValue, $this);
                }
                DemonstratorApp.BO.ImportedBuyer.addTransactions(value, $this);
            }
        };
        Transaction.setLetterOfCredits = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.LetterOfCredits == null)
                $this.LetterOfCredits = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.LetterOfCredits.length > 0) {
                DemonstratorApp.BO.Transaction.removeLetterOfCredits($this, $this.LetterOfCredits[0]);
            }
            DemonstratorApp.BO.Transaction.addManyLetterOfCredits($this, copyItems);
        };
        Transaction.addManyLetterOfCredits = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addLetterOfCredits($this, items[i]);
            }
        };
        Transaction.addLetterOfCredits = function ($this, item) {
            if ($this.LetterOfCredits == null)
                $this.LetterOfCredits = [];
            if (item == null || $this.LetterOfCredits.indexOf(item) > -1)
                return;
            $this.LetterOfCredits.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.LetterOfCredit.setTransaction(item, $this);
            }
        };
        Transaction.addRangeLetterOfCredits = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addLetterOfCredits($this, item); });
        };
        Transaction.removeLetterOfCredits = function ($this, item) {
            if ($this == null || $this.LetterOfCredits == null || $this.LetterOfCredits.indexOf(item) === -1)
                return;
            var _index = $this.LetterOfCredits.indexOf(item);
            $this.LetterOfCredits.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearLetterOfCredits = function ($this) {
            $this.LetterOfCredits = null;
        };
        Transaction.setIntermediaries = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Intermediaries == null)
                $this.Intermediaries = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Intermediaries.length > 0) {
                DemonstratorApp.BO.Transaction.removeIntermediaries($this, $this.Intermediaries[0]);
            }
            DemonstratorApp.BO.Transaction.addManyIntermediaries($this, copyItems);
        };
        Transaction.addManyIntermediaries = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addIntermediaries($this, items[i]);
            }
        };
        Transaction.addIntermediaries = function ($this, item) {
            if ($this.Intermediaries == null)
                $this.Intermediaries = [];
            if (item == null || $this.Intermediaries.indexOf(item) > -1)
                return;
            $this.Intermediaries.push(item);
            Intermediary.addTransactions(item, $this);
        };
        Transaction.addRangeIntermediaries = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addIntermediaries($this, item); });
        };
        Transaction.removeIntermediaries = function ($this, item) {
            if ($this == null || $this.Intermediaries == null || $this.Intermediaries.indexOf(item) === -1)
                return;
            var _index = $this.Intermediaries.indexOf(item);
            $this.Intermediaries.splice(_index, 1);
            Intermediary.removeTransactions(item, $this);
        };
        Transaction.clearIntermediaries = function ($this) {
            $this.Intermediaries = null;
        };
        Transaction.setPartialProofOfDeliveries = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.PartialProofOfDeliveries == null)
                $this.PartialProofOfDeliveries = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.PartialProofOfDeliveries.length > 0) {
                DemonstratorApp.BO.Transaction.removePartialProofOfDeliveries($this, $this.PartialProofOfDeliveries[0]);
            }
            DemonstratorApp.BO.Transaction.addManyPartialProofOfDeliveries($this, copyItems);
        };
        Transaction.addManyPartialProofOfDeliveries = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addPartialProofOfDeliveries($this, items[i]);
            }
        };
        Transaction.addPartialProofOfDeliveries = function ($this, item) {
            if ($this.PartialProofOfDeliveries == null)
                $this.PartialProofOfDeliveries = [];
            if (item == null || $this.PartialProofOfDeliveries.indexOf(item) > -1)
                return;
            $this.PartialProofOfDeliveries.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.PartialProofOfDelivery.setTransaction(item, $this);
            }
        };
        Transaction.addRangePartialProofOfDeliveries = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addPartialProofOfDeliveries($this, item); });
        };
        Transaction.removePartialProofOfDeliveries = function ($this, item) {
            if ($this == null || $this.PartialProofOfDeliveries == null || $this.PartialProofOfDeliveries.indexOf(item) === -1)
                return;
            var _index = $this.PartialProofOfDeliveries.indexOf(item);
            $this.PartialProofOfDeliveries.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearPartialProofOfDeliveries = function ($this) {
            $this.PartialProofOfDeliveries = null;
        };
        Transaction.setCustomsClearingDocumentations = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CustomsClearingDocumentations == null)
                $this.CustomsClearingDocumentations = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CustomsClearingDocumentations.length > 0) {
                DemonstratorApp.BO.Transaction.removeCustomsClearingDocumentations($this, $this.CustomsClearingDocumentations[0]);
            }
            DemonstratorApp.BO.Transaction.addManyCustomsClearingDocumentations($this, copyItems);
        };
        Transaction.addManyCustomsClearingDocumentations = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addCustomsClearingDocumentations($this, items[i]);
            }
        };
        Transaction.addCustomsClearingDocumentations = function ($this, item) {
            if ($this.CustomsClearingDocumentations == null)
                $this.CustomsClearingDocumentations = [];
            if (item == null || $this.CustomsClearingDocumentations.indexOf(item) > -1)
                return;
            $this.CustomsClearingDocumentations.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.CustomsClearingDocumentation.setTransaction(item, $this);
            }
        };
        Transaction.addRangeCustomsClearingDocumentations = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addCustomsClearingDocumentations($this, item); });
        };
        Transaction.removeCustomsClearingDocumentations = function ($this, item) {
            if ($this == null || $this.CustomsClearingDocumentations == null || $this.CustomsClearingDocumentations.indexOf(item) === -1)
                return;
            var _index = $this.CustomsClearingDocumentations.indexOf(item);
            $this.CustomsClearingDocumentations.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearCustomsClearingDocumentations = function ($this) {
            $this.CustomsClearingDocumentations = null;
        };
        Transaction.setBillOfLandings = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.BillOfLandings == null)
                $this.BillOfLandings = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.BillOfLandings.length > 0) {
                DemonstratorApp.BO.Transaction.removeBillOfLandings($this, $this.BillOfLandings[0]);
            }
            DemonstratorApp.BO.Transaction.addManyBillOfLandings($this, copyItems);
        };
        Transaction.addManyBillOfLandings = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Transaction.addBillOfLandings($this, items[i]);
            }
        };
        Transaction.addBillOfLandings = function ($this, item) {
            if ($this.BillOfLandings == null)
                $this.BillOfLandings = [];
            if (item == null || $this.BillOfLandings.indexOf(item) > -1)
                return;
            $this.BillOfLandings.push(item);
            if (item.Transaction != $this) {
                DemonstratorApp.BO.BillOfLanding.setTransaction(item, $this);
            }
        };
        Transaction.addRangeBillOfLandings = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Transaction.addBillOfLandings($this, item); });
        };
        Transaction.removeBillOfLandings = function ($this, item) {
            if ($this == null || $this.BillOfLandings == null || $this.BillOfLandings.indexOf(item) === -1)
                return;
            var _index = $this.BillOfLandings.indexOf(item);
            $this.BillOfLandings.splice(_index, 1);
            item.Transaction = null;
        };
        Transaction.clearBillOfLandings = function ($this) {
            $this.BillOfLandings = null;
        };
        Transaction.setTransactionOverview = function ($this, value) {
            var oldValue = $this.TransactionOverview;
            $this.TransactionOverview = value;
            if (value != null) {
            }
        };
        BO.Transaction = Transaction;
        var TransactionStatus = (function () {
            function TransactionStatus() {
                this._originalTypeClassName = "DemonstratorApp.BO.TransactionStatus";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            TransactionStatus.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return TransactionStatus;
        }());
        BO.TransactionStatus = TransactionStatus;
        var TransactionOverview = (function () {
            function TransactionOverview() {
                this._originalTypeClassName = "DemonstratorApp.BO.TransactionOverview";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            TransactionOverview.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return TransactionOverview;
        }());
        BO.TransactionOverview = TransactionOverview;
        var TransactionPayment = (function () {
            function TransactionPayment() {
                this._originalTypeClassName = "DemonstratorApp.BO.TransactionPayment";
                this.Domain = DemonstratorApp.BO;
                this.Transactions = [];
                this['_key'] = this.Id = 0;
            }
            TransactionPayment.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return TransactionPayment;
        }());
        TransactionPayment.setTransactions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Transactions == null)
                $this.Transactions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Transactions.length > 0) {
                DemonstratorApp.BO.TransactionPayment.removeTransactions($this, $this.Transactions[0]);
            }
            DemonstratorApp.BO.TransactionPayment.addManyTransactions($this, copyItems);
        };
        TransactionPayment.addManyTransactions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.TransactionPayment.addTransactions($this, items[i]);
            }
        };
        TransactionPayment.addTransactions = function ($this, item) {
            if ($this.Transactions == null)
                $this.Transactions = [];
            if (item == null || $this.Transactions.indexOf(item) > -1)
                return;
            $this.Transactions.push(item);
        };
        TransactionPayment.addRangeTransactions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.TransactionPayment.addTransactions($this, item); });
        };
        TransactionPayment.removeTransactions = function ($this, item) {
            if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1)
                return;
            var _index = $this.Transactions.indexOf(item);
            $this.Transactions.splice(_index, 1);
        };
        TransactionPayment.clearTransactions = function ($this) {
            $this.Transactions = null;
        };
        TransactionPayment.setAgreement = function ($this, value) {
            var oldValue = $this.Agreement;
            $this.Agreement = value;
            if (value != null) {
            }
        };
        BO.TransactionPayment = TransactionPayment;
        var Turnover = (function () {
            function Turnover() {
                this._originalTypeClassName = "DemonstratorApp.BO.Turnover";
                this.Domain = DemonstratorApp.BO;
                this.TurnoverStatistics = [];
                this['_key'] = this.Id = 0;
            }
            Turnover.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Turnover;
        }());
        Turnover.setTurnoverStatistics = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.TurnoverStatistics == null)
                $this.TurnoverStatistics = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.TurnoverStatistics.length > 0) {
                DemonstratorApp.BO.Turnover.removeTurnoverStatistics($this, $this.TurnoverStatistics[0]);
            }
            DemonstratorApp.BO.Turnover.addManyTurnoverStatistics($this, copyItems);
        };
        Turnover.addManyTurnoverStatistics = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Turnover.addTurnoverStatistics($this, items[i]);
            }
        };
        Turnover.addTurnoverStatistics = function ($this, item) {
            if ($this.TurnoverStatistics == null)
                $this.TurnoverStatistics = [];
            if (item == null || $this.TurnoverStatistics.indexOf(item) > -1)
                return;
            $this.TurnoverStatistics.push(item);
        };
        Turnover.addRangeTurnoverStatistics = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Turnover.addTurnoverStatistics($this, item); });
        };
        Turnover.removeTurnoverStatistics = function ($this, item) {
            if ($this == null || $this.TurnoverStatistics == null || $this.TurnoverStatistics.indexOf(item) === -1)
                return;
            var _index = $this.TurnoverStatistics.indexOf(item);
            $this.TurnoverStatistics.splice(_index, 1);
        };
        Turnover.clearTurnoverStatistics = function ($this) {
            $this.TurnoverStatistics = null;
        };
        BO.Turnover = Turnover;
        var TurnoverStatistic = (function () {
            function TurnoverStatistic() {
                this._originalTypeClassName = "DemonstratorApp.BO.TurnoverStatistic";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            TurnoverStatistic.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return TurnoverStatistic;
        }());
        TurnoverStatistic.setSupplier = function ($this, value) {
            var oldValue = $this.Supplier;
            $this.Supplier = value;
            if (value != null) {
            }
        };
        BO.TurnoverStatistic = TurnoverStatistic;
        var Preferences = (function () {
            function Preferences() {
                this._originalTypeClassName = "DemonstratorApp.BO.Preferences";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            Preferences.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Preferences;
        }());
        BO.Preferences = Preferences;
        var Utils = (function () {
            function Utils() {
                this._originalTypeClassName = "DemonstratorApp.BO.Utils";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.UtilsKey = 0;
            }
            Utils.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UtilsKey == null || $this.UtilsKey == 0;
            };
            return Utils;
        }());
        BO.Utils = Utils;
        var Status;
        (function (Status) {
            Status[Status["Initial"] = 0] = "Initial";
        })(Status = BO.Status || (BO.Status = {}));
        var MapPoint = (function () {
            function MapPoint() {
                this._originalTypeClassName = "DemonstratorApp.BO.MapPoint";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            MapPoint.InitiOrderMapPoints = function (order) {
                var mapPoints = [];
                var fromPoint = Joove.Common.nullSafe(function () { return new DemonstratorApp.BO.MapPoint(); }, null);
                if ((!(Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () { return order.From; }, "")); }, false)))) { }
                fromPoint.Address = Joove.Common.nullSafe(function () { return order.From; }, "");
                fromPoint.Title = "Shipping From";
                fromPoint.Icon = "http://apps.zappdev.com/TomeFinance_1242_vvasilopoulos/resources/images/" + "industries.png";
                Joove.Common.nullSafe(function () { return mapPoints.add(fromPoint); }, null);
                if ((Joove.Common.nullSafe(function () { return order.IntermediateParty; }, false))) {
                    var _loop_1 = function (_ibol) {
                        bol = Joove.Common.nullSafe(function () { return order.BillOfLandings; }, null)[_ibol];
                        if ((Joove.Common.nullSafe(function () { return bol.LandingPlace; }, "") == Joove.Common.nullSafe(function () { return order.From; }, ""))) {
                            return "continue";
                        }
                        var intermediaryFromPoint = Joove.Common.nullSafe(function () { return new DemonstratorApp.BO.MapPoint(); }, null);
                        if ((!(Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () { return bol.LandingPlace; }, "")); }, false)))) { }
                        intermediaryFromPoint.Address = Joove.Common.nullSafe(function () { return bol.LandingPlace; }, "");
                        intermediaryFromPoint.Icon = "transport.png";
                        intermediaryFromPoint.Title = "Intermediary Landing Place";
                        Joove.Common.nullSafe(function () { return mapPoints.add(intermediaryFromPoint); }, null);
                        if ((Joove.Common.nullSafe(function () { return bol.DeliveryPlace; }, "") == Joove.Common.nullSafe(function () { return order.DeliveryTo; }, ""))) {
                            return "continue";
                        }
                        var intemediaryToPoint = Joove.Common.nullSafe(function () { return new DemonstratorApp.BO.MapPoint(); }, null);
                        if ((!(Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () { return bol.DeliveryPlace; }, "")); }, false)))) { }
                        intemediaryToPoint.Address = Joove.Common.nullSafe(function () { return bol.DeliveryPlace; }, "");
                        intemediaryToPoint.Icon = "transport.png";
                        intemediaryToPoint.Title = "Intermediary Delivery Place";
                        Joove.Common.nullSafe(function () { return mapPoints.add(intemediaryToPoint); }, null);
                    };
                    var bol;
                    for (var _ibol = 0; _ibol < (Joove.Common.nullSafe(function () { return order.BillOfLandings; }, null) == null ? 0 : Joove.Common.nullSafe(function () { return order.BillOfLandings; }, null).length); _ibol++) {
                        _loop_1(_ibol);
                    }
                }
                var deliveryPoint = Joove.Common.nullSafe(function () { return new DemonstratorApp.BO.MapPoint(); }, null);
                if ((!(Joove.Common.nullSafe(function () { return CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe(function () { return order.DeliveryTo; }, "")); }, false)))) { }
                deliveryPoint.Address = Joove.Common.nullSafe(function () { return order.DeliveryTo; }, "");
                deliveryPoint.Title = "Delivery To";
                deliveryPoint.Icon = "commercial-places.png";
                Joove.Common.nullSafe(function () { return mapPoints.add(deliveryPoint); }, null);
                return mapPoints;
            };
            MapPoint.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return MapPoint;
        }());
        BO.MapPoint = MapPoint;
        var PubSubManager = (function () {
            function PubSubManager() {
                this._originalTypeClassName = "DemonstratorApp.BO.PubSubManager";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            PubSubManager.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return PubSubManager;
        }());
        BO.PubSubManager = PubSubManager;
        var ApplicationUserAction = (function () {
            function ApplicationUserAction() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationUserAction.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserAction;
        }());
        BO.ApplicationUserAction = ApplicationUserAction;
        var ApplicationUserExternalProfile = (function () {
            function ApplicationUserExternalProfile() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationUserExternalProfile.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserExternalProfile;
        }());
        BO.ApplicationUserExternalProfile = ApplicationUserExternalProfile;
        var ApplicationSetting = (function () {
            function ApplicationSetting() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationSetting.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationSetting;
        }());
        BO.ApplicationSetting = ApplicationSetting;
        var ApplicationUser = (function () {
            function ApplicationUser() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
                this.Domain = DemonstratorApp.BO;
                this.Permissions = [];
                this.Roles = [];
                this.Clients = [];
                this.Logins = [];
                this.Claims = [];
                this['_key'] = this.UserName = "";
            }
            ApplicationUser.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return ApplicationUser;
        }());
        ApplicationUser.setPermissions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Permissions == null)
                $this.Permissions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Permissions.length > 0) {
                DemonstratorApp.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
            }
            DemonstratorApp.BO.ApplicationUser.addManyPermissions($this, copyItems);
        };
        ApplicationUser.addManyPermissions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationUser.addPermissions($this, items[i]);
            }
        };
        ApplicationUser.addPermissions = function ($this, item) {
            if ($this.Permissions == null)
                $this.Permissions = [];
            if (item == null || $this.Permissions.indexOf(item) > -1)
                return;
            $this.Permissions.push(item);
            ApplicationPermission.addUsers(item, $this);
        };
        ApplicationUser.addRangePermissions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationUser.addPermissions($this, item); });
        };
        ApplicationUser.removePermissions = function ($this, item) {
            if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                return;
            var _index = $this.Permissions.indexOf(item);
            $this.Permissions.splice(_index, 1);
            ApplicationPermission.removeUsers(item, $this);
        };
        ApplicationUser.clearPermissions = function ($this) {
            $this.Permissions = null;
        };
        ApplicationUser.setRoles = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Roles == null)
                $this.Roles = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Roles.length > 0) {
                DemonstratorApp.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
            }
            DemonstratorApp.BO.ApplicationUser.addManyRoles($this, copyItems);
        };
        ApplicationUser.addManyRoles = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationUser.addRoles($this, items[i]);
            }
        };
        ApplicationUser.addRoles = function ($this, item) {
            if ($this.Roles == null)
                $this.Roles = [];
            if (item == null || $this.Roles.indexOf(item) > -1)
                return;
            $this.Roles.push(item);
            ApplicationRole.addUsers(item, $this);
        };
        ApplicationUser.addRangeRoles = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationUser.addRoles($this, item); });
        };
        ApplicationUser.removeRoles = function ($this, item) {
            if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1)
                return;
            var _index = $this.Roles.indexOf(item);
            $this.Roles.splice(_index, 1);
            ApplicationRole.removeUsers(item, $this);
        };
        ApplicationUser.clearRoles = function ($this) {
            $this.Roles = null;
        };
        ApplicationUser.setClients = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Clients == null)
                $this.Clients = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Clients.length > 0) {
                DemonstratorApp.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
            }
            DemonstratorApp.BO.ApplicationUser.addManyClients($this, copyItems);
        };
        ApplicationUser.addManyClients = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationUser.addClients($this, items[i]);
            }
        };
        ApplicationUser.addClients = function ($this, item) {
            if ($this.Clients == null)
                $this.Clients = [];
            if (item == null || $this.Clients.indexOf(item) > -1)
                return;
            $this.Clients.push(item);
            if (item.User != $this) {
                DemonstratorApp.BO.ApplicationClient.setUser(item, $this);
            }
        };
        ApplicationUser.addRangeClients = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationUser.addClients($this, item); });
        };
        ApplicationUser.removeClients = function ($this, item) {
            if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1)
                return;
            var _index = $this.Clients.indexOf(item);
            $this.Clients.splice(_index, 1);
            item.User = null;
        };
        ApplicationUser.clearClients = function ($this) {
            $this.Clients = null;
        };
        ApplicationUser.setLogins = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Logins == null)
                $this.Logins = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Logins.length > 0) {
                DemonstratorApp.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
            }
            DemonstratorApp.BO.ApplicationUser.addManyLogins($this, copyItems);
        };
        ApplicationUser.addManyLogins = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationUser.addLogins($this, items[i]);
            }
        };
        ApplicationUser.addLogins = function ($this, item) {
            if ($this.Logins == null)
                $this.Logins = [];
            if (item == null || $this.Logins.indexOf(item) > -1)
                return;
            $this.Logins.push(item);
            if (item.User != $this) {
                DemonstratorApp.BO.ApplicationUserLogin.setUser(item, $this);
            }
        };
        ApplicationUser.addRangeLogins = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationUser.addLogins($this, item); });
        };
        ApplicationUser.removeLogins = function ($this, item) {
            if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1)
                return;
            var _index = $this.Logins.indexOf(item);
            $this.Logins.splice(_index, 1);
            item.User = null;
        };
        ApplicationUser.clearLogins = function ($this) {
            $this.Logins = null;
        };
        ApplicationUser.setClaims = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Claims == null)
                $this.Claims = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Claims.length > 0) {
                DemonstratorApp.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
            }
            DemonstratorApp.BO.ApplicationUser.addManyClaims($this, copyItems);
        };
        ApplicationUser.addManyClaims = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationUser.addClaims($this, items[i]);
            }
        };
        ApplicationUser.addClaims = function ($this, item) {
            if ($this.Claims == null)
                $this.Claims = [];
            if (item == null || $this.Claims.indexOf(item) > -1)
                return;
            $this.Claims.push(item);
            if (item.User != $this) {
                DemonstratorApp.BO.ApplicationUserClaim.setUser(item, $this);
            }
        };
        ApplicationUser.addRangeClaims = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationUser.addClaims($this, item); });
        };
        ApplicationUser.removeClaims = function ($this, item) {
            if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1)
                return;
            var _index = $this.Claims.indexOf(item);
            $this.Claims.splice(_index, 1);
            item.User = null;
        };
        ApplicationUser.clearClaims = function ($this) {
            $this.Claims = null;
        };
        ApplicationUser.setProfile = function ($this, value) {
            var oldValue = $this.Profile;
            $this.Profile = value;
            if (value != null) {
            }
        };
        BO.ApplicationUser = ApplicationUser;
        var ApplicationRole = (function () {
            function ApplicationRole() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
                this.Domain = DemonstratorApp.BO;
                this.Users = [];
                this.Permissions = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationRole.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationRole;
        }());
        ApplicationRole.setUsers = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Users == null)
                $this.Users = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Users.length > 0) {
                DemonstratorApp.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
            }
            DemonstratorApp.BO.ApplicationRole.addManyUsers($this, copyItems);
        };
        ApplicationRole.addManyUsers = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationRole.addUsers($this, items[i]);
            }
        };
        ApplicationRole.addUsers = function ($this, item) {
            if ($this.Users == null)
                $this.Users = [];
            if (item == null || $this.Users.indexOf(item) > -1)
                return;
            $this.Users.push(item);
            ApplicationUser.addRoles(item, $this);
        };
        ApplicationRole.addRangeUsers = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationRole.addUsers($this, item); });
        };
        ApplicationRole.removeUsers = function ($this, item) {
            if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1)
                return;
            var _index = $this.Users.indexOf(item);
            $this.Users.splice(_index, 1);
            ApplicationUser.removeRoles(item, $this);
        };
        ApplicationRole.clearUsers = function ($this) {
            $this.Users = null;
        };
        ApplicationRole.setPermissions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Permissions == null)
                $this.Permissions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Permissions.length > 0) {
                DemonstratorApp.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
            }
            DemonstratorApp.BO.ApplicationRole.addManyPermissions($this, copyItems);
        };
        ApplicationRole.addManyPermissions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationRole.addPermissions($this, items[i]);
            }
        };
        ApplicationRole.addPermissions = function ($this, item) {
            if ($this.Permissions == null)
                $this.Permissions = [];
            if (item == null || $this.Permissions.indexOf(item) > -1)
                return;
            $this.Permissions.push(item);
            ApplicationPermission.addRoles(item, $this);
        };
        ApplicationRole.addRangePermissions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationRole.addPermissions($this, item); });
        };
        ApplicationRole.removePermissions = function ($this, item) {
            if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                return;
            var _index = $this.Permissions.indexOf(item);
            $this.Permissions.splice(_index, 1);
            ApplicationPermission.removeRoles(item, $this);
        };
        ApplicationRole.clearPermissions = function ($this) {
            $this.Permissions = null;
        };
        BO.ApplicationRole = ApplicationRole;
        var ApplicationOperation = (function () {
            function ApplicationOperation() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
                this.Domain = DemonstratorApp.BO;
                this.Permissions = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationOperation.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationOperation;
        }());
        ApplicationOperation.setPermissions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Permissions == null)
                $this.Permissions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Permissions.length > 0) {
                DemonstratorApp.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
            }
            DemonstratorApp.BO.ApplicationOperation.addManyPermissions($this, copyItems);
        };
        ApplicationOperation.addManyPermissions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationOperation.addPermissions($this, items[i]);
            }
        };
        ApplicationOperation.addPermissions = function ($this, item) {
            if ($this.Permissions == null)
                $this.Permissions = [];
            if (item == null || $this.Permissions.indexOf(item) > -1)
                return;
            $this.Permissions.push(item);
            ApplicationPermission.addOperations(item, $this);
        };
        ApplicationOperation.addRangePermissions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationOperation.addPermissions($this, item); });
        };
        ApplicationOperation.removePermissions = function ($this, item) {
            if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1)
                return;
            var _index = $this.Permissions.indexOf(item);
            $this.Permissions.splice(_index, 1);
            ApplicationPermission.removeOperations(item, $this);
        };
        ApplicationOperation.clearPermissions = function ($this) {
            $this.Permissions = null;
        };
        BO.ApplicationOperation = ApplicationOperation;
        var ApplicationPermission = (function () {
            function ApplicationPermission() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
                this.Domain = DemonstratorApp.BO;
                this.Users = [];
                this.Roles = [];
                this.Operations = [];
                this['_key'] = this.Id = 0;
            }
            ApplicationPermission.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationPermission;
        }());
        ApplicationPermission.setUsers = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Users == null)
                $this.Users = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Users.length > 0) {
                DemonstratorApp.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
            }
            DemonstratorApp.BO.ApplicationPermission.addManyUsers($this, copyItems);
        };
        ApplicationPermission.addManyUsers = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationPermission.addUsers($this, items[i]);
            }
        };
        ApplicationPermission.addUsers = function ($this, item) {
            if ($this.Users == null)
                $this.Users = [];
            if (item == null || $this.Users.indexOf(item) > -1)
                return;
            $this.Users.push(item);
            ApplicationUser.addPermissions(item, $this);
        };
        ApplicationPermission.addRangeUsers = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationPermission.addUsers($this, item); });
        };
        ApplicationPermission.removeUsers = function ($this, item) {
            if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1)
                return;
            var _index = $this.Users.indexOf(item);
            $this.Users.splice(_index, 1);
            ApplicationUser.removePermissions(item, $this);
        };
        ApplicationPermission.clearUsers = function ($this) {
            $this.Users = null;
        };
        ApplicationPermission.setRoles = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Roles == null)
                $this.Roles = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Roles.length > 0) {
                DemonstratorApp.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
            }
            DemonstratorApp.BO.ApplicationPermission.addManyRoles($this, copyItems);
        };
        ApplicationPermission.addManyRoles = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationPermission.addRoles($this, items[i]);
            }
        };
        ApplicationPermission.addRoles = function ($this, item) {
            if ($this.Roles == null)
                $this.Roles = [];
            if (item == null || $this.Roles.indexOf(item) > -1)
                return;
            $this.Roles.push(item);
            ApplicationRole.addPermissions(item, $this);
        };
        ApplicationPermission.addRangeRoles = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationPermission.addRoles($this, item); });
        };
        ApplicationPermission.removeRoles = function ($this, item) {
            if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1)
                return;
            var _index = $this.Roles.indexOf(item);
            $this.Roles.splice(_index, 1);
            ApplicationRole.removePermissions(item, $this);
        };
        ApplicationPermission.clearRoles = function ($this) {
            $this.Roles = null;
        };
        ApplicationPermission.setOperations = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Operations == null)
                $this.Operations = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Operations.length > 0) {
                DemonstratorApp.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
            }
            DemonstratorApp.BO.ApplicationPermission.addManyOperations($this, copyItems);
        };
        ApplicationPermission.addManyOperations = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.ApplicationPermission.addOperations($this, items[i]);
            }
        };
        ApplicationPermission.addOperations = function ($this, item) {
            if ($this.Operations == null)
                $this.Operations = [];
            if (item == null || $this.Operations.indexOf(item) > -1)
                return;
            $this.Operations.push(item);
            ApplicationOperation.addPermissions(item, $this);
        };
        ApplicationPermission.addRangeOperations = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.ApplicationPermission.addOperations($this, item); });
        };
        ApplicationPermission.removeOperations = function ($this, item) {
            if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1)
                return;
            var _index = $this.Operations.indexOf(item);
            $this.Operations.splice(_index, 1);
            ApplicationOperation.removePermissions(item, $this);
        };
        ApplicationPermission.clearOperations = function ($this) {
            $this.Operations = null;
        };
        BO.ApplicationPermission = ApplicationPermission;
        var ApplicationClient = (function () {
            function ApplicationClient() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
                this.Domain = DemonstratorApp.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationClient.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationClient;
        }());
        ApplicationClient.setUser = function ($this, value) {
            var oldValue = $this.User;
            $this.User = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.ApplicationUser.removeClients(oldValue, $this);
                }
                DemonstratorApp.BO.ApplicationUser.addClients(value, $this);
            }
        };
        BO.ApplicationClient = ApplicationClient;
        var ApplicationUserLogin = (function () {
            function ApplicationUserLogin() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
                this.Domain = DemonstratorApp.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationUserLogin.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserLogin;
        }());
        ApplicationUserLogin.setUser = function ($this, value) {
            var oldValue = $this.User;
            $this.User = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.ApplicationUser.removeLogins(oldValue, $this);
                }
                DemonstratorApp.BO.ApplicationUser.addLogins(value, $this);
            }
        };
        BO.ApplicationUserLogin = ApplicationUserLogin;
        var ApplicationUserClaim = (function () {
            function ApplicationUserClaim() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
                this.Domain = DemonstratorApp.BO;
                this.User = new this.Domain.ApplicationUser();
                this['_key'] = this.Id = 0;
            }
            ApplicationUserClaim.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationUserClaim;
        }());
        ApplicationUserClaim.setUser = function ($this, value) {
            var oldValue = $this.User;
            $this.User = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.ApplicationUser.removeClaims(oldValue, $this);
                }
                DemonstratorApp.BO.ApplicationUser.addClaims(value, $this);
            }
        };
        BO.ApplicationUserClaim = ApplicationUserClaim;
        var ProfileSetting = (function () {
            function ProfileSetting() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            ProfileSetting.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ProfileSetting;
        }());
        ProfileSetting.setParentProfile = function ($this, value) {
            var oldValue = $this.ParentProfile;
            $this.ParentProfile = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.Profile.removeSettings(oldValue, $this);
                }
                DemonstratorApp.BO.Profile.addSettings(value, $this);
            }
        };
        BO.ProfileSetting = ProfileSetting;
        var Profile = (function () {
            function Profile() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
                this.Domain = DemonstratorApp.BO;
                this.Settings = [];
                this['_key'] = this.Id = 0;
            }
            Profile.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return Profile;
        }());
        Profile.setSettings = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Settings == null)
                $this.Settings = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Settings.length > 0) {
                DemonstratorApp.BO.Profile.removeSettings($this, $this.Settings[0]);
            }
            DemonstratorApp.BO.Profile.addManySettings($this, copyItems);
        };
        Profile.addManySettings = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Profile.addSettings($this, items[i]);
            }
        };
        Profile.addSettings = function ($this, item) {
            if ($this.Settings == null)
                $this.Settings = [];
            if (item == null || $this.Settings.indexOf(item) > -1)
                return;
            $this.Settings.push(item);
            if (item.ParentProfile != $this) {
                DemonstratorApp.BO.ProfileSetting.setParentProfile(item, $this);
            }
        };
        Profile.addRangeSettings = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Profile.addSettings($this, item); });
        };
        Profile.removeSettings = function ($this, item) {
            if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1)
                return;
            var _index = $this.Settings.indexOf(item);
            $this.Settings.splice(_index, 1);
            item.ParentProfile = null;
        };
        Profile.clearSettings = function ($this) {
            $this.Settings = null;
        };
        BO.Profile = Profile;
        var ApplicationLanguage = (function () {
            function ApplicationLanguage() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationLanguage.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationLanguage;
        }());
        ApplicationLanguage.setDateTimeFormat = function ($this, value) {
            var oldValue = $this.DateTimeFormat;
            $this.DateTimeFormat = value;
            if (value != null) {
                if (oldValue != null && oldValue.ApplicationLanguage != null) {
                    oldValue.ApplicationLanguage = null;
                }
                if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                    DemonstratorApp.BO.DateTimeFormat.setApplicationLanguage(value, $this);
                }
            }
        };
        BO.ApplicationLanguage = ApplicationLanguage;
        var DateTimeFormat = (function () {
            function DateTimeFormat() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
                this.Domain = DemonstratorApp.BO;
                this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
                this['_key'] = this.Id = 0;
            }
            DateTimeFormat.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return DateTimeFormat;
        }());
        DateTimeFormat.setApplicationLanguage = function ($this, value) {
            var oldValue = $this.ApplicationLanguage;
            $this.ApplicationLanguage = value;
            if (value != null) {
                if (oldValue != null && oldValue.DateTimeFormat != null) {
                    oldValue.DateTimeFormat = null;
                }
                if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                    DemonstratorApp.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
                }
            }
        };
        BO.DateTimeFormat = DateTimeFormat;
        var ApplicationTheme = (function () {
            function ApplicationTheme() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            ApplicationTheme.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return ApplicationTheme;
        }());
        BO.ApplicationTheme = ApplicationTheme;
        var FileData = (function () {
            function FileData() {
                this._originalTypeClassName = "DemonstratorApp.BO.FileData";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
            }
            FileData.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
            };
            return FileData;
        }());
        BO.FileData = FileData;
        var StorageMedium;
        (function (StorageMedium) {
            StorageMedium[StorageMedium["FileSystem"] = 0] = "FileSystem";
            StorageMedium[StorageMedium["DataBase"] = 1] = "DataBase";
        })(StorageMedium = BO.StorageMedium || (BO.StorageMedium = {}));
        var AuditEntityConfiguration = (function () {
            function AuditEntityConfiguration() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
                this.Domain = DemonstratorApp.BO;
                this.Properties = [];
                this['_key'] = this.Id = 0;
            }
            AuditEntityConfiguration.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditEntityConfiguration;
        }());
        AuditEntityConfiguration.setProperties = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Properties == null)
                $this.Properties = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Properties.length > 0) {
                DemonstratorApp.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
            }
            DemonstratorApp.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
        };
        AuditEntityConfiguration.addManyProperties = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.AuditEntityConfiguration.addProperties($this, items[i]);
            }
        };
        AuditEntityConfiguration.addProperties = function ($this, item) {
            if ($this.Properties == null)
                $this.Properties = [];
            if (item == null || $this.Properties.indexOf(item) > -1)
                return;
            $this.Properties.push(item);
            if (item.Entity != $this) {
                DemonstratorApp.BO.AuditPropertyConfiguration.setEntity(item, $this);
            }
        };
        AuditEntityConfiguration.addRangeProperties = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.AuditEntityConfiguration.addProperties($this, item); });
        };
        AuditEntityConfiguration.removeProperties = function ($this, item) {
            if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1)
                return;
            var _index = $this.Properties.indexOf(item);
            $this.Properties.splice(_index, 1);
            item.Entity = null;
        };
        AuditEntityConfiguration.clearProperties = function ($this) {
            $this.Properties = null;
        };
        BO.AuditEntityConfiguration = AuditEntityConfiguration;
        var AuditPropertyConfiguration = (function () {
            function AuditPropertyConfiguration() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
                this.Domain = DemonstratorApp.BO;
                this.Entity = new this.Domain.AuditEntityConfiguration();
                this['_key'] = this.Id = 0;
            }
            AuditPropertyConfiguration.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditPropertyConfiguration;
        }());
        AuditPropertyConfiguration.setEntity = function ($this, value) {
            var oldValue = $this.Entity;
            $this.Entity = value;
            if (value != null) {
                if (oldValue != null) {
                    DemonstratorApp.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
                }
                DemonstratorApp.BO.AuditEntityConfiguration.addProperties(value, $this);
            }
        };
        BO.AuditPropertyConfiguration = AuditPropertyConfiguration;
        var AuditLogEntry = (function () {
            function AuditLogEntry() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogEntry.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogEntry;
        }());
        BO.AuditLogEntry = AuditLogEntry;
        var AuditLogEntryType = (function () {
            function AuditLogEntryType() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogEntryType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogEntryType;
        }());
        BO.AuditLogEntryType = AuditLogEntryType;
        var AuditLogPropertyActionType = (function () {
            function AuditLogPropertyActionType() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = 0;
            }
            AuditLogPropertyActionType.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == 0;
            };
            return AuditLogPropertyActionType;
        }());
        BO.AuditLogPropertyActionType = AuditLogPropertyActionType;
        var WorkflowStatus;
        (function (WorkflowStatus) {
            WorkflowStatus[WorkflowStatus["None"] = 0] = "None";
            WorkflowStatus[WorkflowStatus["Completed"] = 1] = "Completed";
            WorkflowStatus[WorkflowStatus["Pending"] = 2] = "Pending";
            WorkflowStatus[WorkflowStatus["Expired"] = 3] = "Expired";
            WorkflowStatus[WorkflowStatus["Cancelled"] = 4] = "Cancelled";
            WorkflowStatus[WorkflowStatus["Failed"] = 5] = "Failed";
            WorkflowStatus[WorkflowStatus["StepToContinueNotFound"] = 6] = "StepToContinueNotFound";
        })(WorkflowStatus = BO.WorkflowStatus || (BO.WorkflowStatus = {}));
        var WorkflowExecutionResult = (function () {
            function WorkflowExecutionResult() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.WorkflowExecutionResultKey = 0;
            }
            WorkflowExecutionResult.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
            };
            return WorkflowExecutionResult;
        }());
        WorkflowExecutionResult.setContext = function ($this, value) {
            var oldValue = $this.Context;
            $this.Context = value;
            if (value != null) {
                if (oldValue != null && oldValue.Result != null) {
                    oldValue.Result = null;
                }
                if ($this.Context.Result !== $this) {
                    DemonstratorApp.BO.WorkflowContextBase.setResult(value, $this);
                }
            }
        };
        BO.WorkflowExecutionResult = WorkflowExecutionResult;
        var WorkflowContextBase = (function () {
            function WorkflowContextBase() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
            }
            WorkflowContextBase.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
            };
            return WorkflowContextBase;
        }());
        WorkflowContextBase.setResult = function ($this, value) {
            var oldValue = $this.Result;
            $this.Result = value;
            if (value != null) {
                if (oldValue != null && oldValue.Context != null) {
                    oldValue.Context = null;
                }
                if ($this.Result.Context !== $this) {
                    DemonstratorApp.BO.WorkflowExecutionResult.setContext(value, $this);
                }
            }
        };
        BO.WorkflowContextBase = WorkflowContextBase;
        var WorkflowSchedule = (function () {
            function WorkflowSchedule() {
                this._originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
                this.Domain = DemonstratorApp.BO;
                this['_key'] = this.Workflow = "";
            }
            WorkflowSchedule.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.Workflow == null || $this.Workflow == "";
            };
            return WorkflowSchedule;
        }());
        BO.WorkflowSchedule = WorkflowSchedule;
        var Buyer = (function (_super) {
            __extends(Buyer, _super);
            function Buyer() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DemonstratorApp.BO.Buyer";
                _this.Domain = DemonstratorApp.BO;
                _this.CommercialAgreements = [];
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            Buyer.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return Buyer;
        }(ApplicationUser));
        Buyer.setCommercialAgreements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CommercialAgreements == null)
                $this.CommercialAgreements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CommercialAgreements.length > 0) {
                DemonstratorApp.BO.Buyer.removeCommercialAgreements($this, $this.CommercialAgreements[0]);
            }
            DemonstratorApp.BO.Buyer.addManyCommercialAgreements($this, copyItems);
        };
        Buyer.addManyCommercialAgreements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Buyer.addCommercialAgreements($this, items[i]);
            }
        };
        Buyer.addCommercialAgreements = function ($this, item) {
            if ($this.CommercialAgreements == null)
                $this.CommercialAgreements = [];
            if (item == null || $this.CommercialAgreements.indexOf(item) > -1)
                return;
            $this.CommercialAgreements.push(item);
            if (item.Buyer != $this) {
                DemonstratorApp.BO.CommercialAgreement.setBuyer(item, $this);
            }
        };
        Buyer.addRangeCommercialAgreements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Buyer.addCommercialAgreements($this, item); });
        };
        Buyer.removeCommercialAgreements = function ($this, item) {
            if ($this == null || $this.CommercialAgreements == null || $this.CommercialAgreements.indexOf(item) === -1)
                return;
            var _index = $this.CommercialAgreements.indexOf(item);
            $this.CommercialAgreements.splice(_index, 1);
            item.Buyer = null;
        };
        Buyer.clearCommercialAgreements = function ($this) {
            $this.CommercialAgreements = null;
        };
        BO.Buyer = Buyer;
        var IntermediaryUser = (function (_super) {
            __extends(IntermediaryUser, _super);
            function IntermediaryUser() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DemonstratorApp.BO.IntermediaryUser";
                _this.Domain = DemonstratorApp.BO;
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            IntermediaryUser.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return IntermediaryUser;
        }(ApplicationUser));
        IntermediaryUser.setIntermediary = function ($this, value) {
            var oldValue = $this.Intermediary;
            $this.Intermediary = value;
            if (value != null) {
            }
        };
        BO.IntermediaryUser = IntermediaryUser;
        var Investor = (function (_super) {
            __extends(Investor, _super);
            function Investor() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DemonstratorApp.BO.Investor";
                _this.Domain = DemonstratorApp.BO;
                _this.Agreements = [];
                _this.AnnualTransactionVolumes = [];
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            Investor.GetDomainFocusOptions = function (inv) {
                var options = [];
                Joove.Common.nullSafe(function () { return options.add("Recurring"); }, null);
                Joove.Common.nullSafe(function () { return options.add("Project-based"); }, null);
                Joove.Common.nullSafe(function () { return options.add("Other"); }, null);
                if ((!(Joove.Common.nullSafe(function () { return options.linq.contains(Joove.Common.nullSafe(function () { return inv.DomainFocus; }, "")); }, false)) && Joove.Common.nullSafe(function () { return inv.DomainFocus; }, "") != null)) {
                    Joove.Common.nullSafe(function () { return options.add(Joove.Common.nullSafe(function () { return inv.DomainFocus; }, "")); }, null);
                }
                return options;
            };
            Investor.IsInvestor = function ($this) {
                return Joove.Common.nullSafe(function () { return window._context.currentUserRoles.indexOf("Investor") > -1; }, false);
            };
            Investor.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return Investor;
        }(ApplicationUser));
        Investor.setAgreements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Agreements == null)
                $this.Agreements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Agreements.length > 0) {
                DemonstratorApp.BO.Investor.removeAgreements($this, $this.Agreements[0]);
            }
            DemonstratorApp.BO.Investor.addManyAgreements($this, copyItems);
        };
        Investor.addManyAgreements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Investor.addAgreements($this, items[i]);
            }
        };
        Investor.addAgreements = function ($this, item) {
            if ($this.Agreements == null)
                $this.Agreements = [];
            if (item == null || $this.Agreements.indexOf(item) > -1)
                return;
            $this.Agreements.push(item);
            if (item.Investor != $this) {
                DemonstratorApp.BO.Agreement.setInvestor(item, $this);
            }
        };
        Investor.addRangeAgreements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Investor.addAgreements($this, item); });
        };
        Investor.removeAgreements = function ($this, item) {
            if ($this == null || $this.Agreements == null || $this.Agreements.indexOf(item) === -1)
                return;
            var _index = $this.Agreements.indexOf(item);
            $this.Agreements.splice(_index, 1);
            item.Investor = null;
        };
        Investor.clearAgreements = function ($this) {
            $this.Agreements = null;
        };
        Investor.setAnnualTransactionVolumes = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.AnnualTransactionVolumes == null)
                $this.AnnualTransactionVolumes = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.AnnualTransactionVolumes.length > 0) {
                DemonstratorApp.BO.Investor.removeAnnualTransactionVolumes($this, $this.AnnualTransactionVolumes[0]);
            }
            DemonstratorApp.BO.Investor.addManyAnnualTransactionVolumes($this, copyItems);
        };
        Investor.addManyAnnualTransactionVolumes = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Investor.addAnnualTransactionVolumes($this, items[i]);
            }
        };
        Investor.addAnnualTransactionVolumes = function ($this, item) {
            if ($this.AnnualTransactionVolumes == null)
                $this.AnnualTransactionVolumes = [];
            if (item == null || $this.AnnualTransactionVolumes.indexOf(item) > -1)
                return;
            $this.AnnualTransactionVolumes.push(item);
        };
        Investor.addRangeAnnualTransactionVolumes = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Investor.addAnnualTransactionVolumes($this, item); });
        };
        Investor.removeAnnualTransactionVolumes = function ($this, item) {
            if ($this == null || $this.AnnualTransactionVolumes == null || $this.AnnualTransactionVolumes.indexOf(item) === -1)
                return;
            var _index = $this.AnnualTransactionVolumes.indexOf(item);
            $this.AnnualTransactionVolumes.splice(_index, 1);
        };
        Investor.clearAnnualTransactionVolumes = function ($this) {
            $this.AnnualTransactionVolumes = null;
        };
        BO.Investor = Investor;
        var Supplier = (function (_super) {
            __extends(Supplier, _super);
            function Supplier() {
                var _this = _super.call(this) || this;
                _this._originalTypeClassName = "DemonstratorApp.BO.Supplier";
                _this.Domain = DemonstratorApp.BO;
                _this.CommercialAgreements = [];
                _this.Agreements = [];
                _this.FinancialStatements = [];
                _this.EconomicEvaluations = [];
                _this.BusinessPlans = [];
                _this.PriorOutstandingBalances = [];
                _this.OutstandingBalances = [];
                _this.CurrentSituations = [];
                _this.CurrentStatements = [];
                _this.CurrentCredits = [];
                _this.FactoringAgreements = [];
                _this.CustomerAgreements = [];
                _this.GeneralConstractuals = [];
                _this.OrganizationalCharts = [];
                _this.InvoicesForms = [];
                _this.Declarations = [];
                _this.SupplierProducts = [];
                _this.Transactions = [];
                _this.AcceptedPolicyTerms = false;
                _this['_key'] = _this.UserName = "";
                return _this;
            }
            Supplier.IsNew = function ($this) {
                if ($this == null)
                    return true;
                return $this.UserName == null || $this.UserName == "";
            };
            return Supplier;
        }(ApplicationUser));
        Supplier.setCommercialAgreements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CommercialAgreements == null)
                $this.CommercialAgreements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CommercialAgreements.length > 0) {
                DemonstratorApp.BO.Supplier.removeCommercialAgreements($this, $this.CommercialAgreements[0]);
            }
            DemonstratorApp.BO.Supplier.addManyCommercialAgreements($this, copyItems);
        };
        Supplier.addManyCommercialAgreements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addCommercialAgreements($this, items[i]);
            }
        };
        Supplier.addCommercialAgreements = function ($this, item) {
            if ($this.CommercialAgreements == null)
                $this.CommercialAgreements = [];
            if (item == null || $this.CommercialAgreements.indexOf(item) > -1)
                return;
            $this.CommercialAgreements.push(item);
            if (item.Supplier != $this) {
                DemonstratorApp.BO.CommercialAgreement.setSupplier(item, $this);
            }
        };
        Supplier.addRangeCommercialAgreements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addCommercialAgreements($this, item); });
        };
        Supplier.removeCommercialAgreements = function ($this, item) {
            if ($this == null || $this.CommercialAgreements == null || $this.CommercialAgreements.indexOf(item) === -1)
                return;
            var _index = $this.CommercialAgreements.indexOf(item);
            $this.CommercialAgreements.splice(_index, 1);
            item.Supplier = null;
        };
        Supplier.clearCommercialAgreements = function ($this) {
            $this.CommercialAgreements = null;
        };
        Supplier.setAgreements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Agreements == null)
                $this.Agreements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Agreements.length > 0) {
                DemonstratorApp.BO.Supplier.removeAgreements($this, $this.Agreements[0]);
            }
            DemonstratorApp.BO.Supplier.addManyAgreements($this, copyItems);
        };
        Supplier.addManyAgreements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addAgreements($this, items[i]);
            }
        };
        Supplier.addAgreements = function ($this, item) {
            if ($this.Agreements == null)
                $this.Agreements = [];
            if (item == null || $this.Agreements.indexOf(item) > -1)
                return;
            $this.Agreements.push(item);
            if (item.Supplier != $this) {
                DemonstratorApp.BO.Agreement.setSupplier(item, $this);
            }
        };
        Supplier.addRangeAgreements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addAgreements($this, item); });
        };
        Supplier.removeAgreements = function ($this, item) {
            if ($this == null || $this.Agreements == null || $this.Agreements.indexOf(item) === -1)
                return;
            var _index = $this.Agreements.indexOf(item);
            $this.Agreements.splice(_index, 1);
            item.Supplier = null;
        };
        Supplier.clearAgreements = function ($this) {
            $this.Agreements = null;
        };
        Supplier.setSupplierBusinessStructureData = function ($this, value) {
            var oldValue = $this.SupplierBusinessStructureData;
            $this.SupplierBusinessStructureData = value;
            if (value != null) {
            }
        };
        Supplier.setSupplierReceivables = function ($this, value) {
            var oldValue = $this.SupplierReceivables;
            $this.SupplierReceivables = value;
            if (value != null) {
            }
        };
        Supplier.setSupplierContactInformation = function ($this, value) {
            var oldValue = $this.SupplierContactInformation;
            $this.SupplierContactInformation = value;
            if (value != null) {
            }
        };
        Supplier.setSupplierTurnover = function ($this, value) {
            var oldValue = $this.SupplierTurnover;
            $this.SupplierTurnover = value;
            if (value != null) {
            }
        };
        Supplier.setSupplierExtraInformation = function ($this, value) {
            var oldValue = $this.SupplierExtraInformation;
            $this.SupplierExtraInformation = value;
            if (value != null) {
            }
        };
        Supplier.setFinancialStatements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.FinancialStatements == null)
                $this.FinancialStatements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.FinancialStatements.length > 0) {
                DemonstratorApp.BO.Supplier.removeFinancialStatements($this, $this.FinancialStatements[0]);
            }
            DemonstratorApp.BO.Supplier.addManyFinancialStatements($this, copyItems);
        };
        Supplier.addManyFinancialStatements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addFinancialStatements($this, items[i]);
            }
        };
        Supplier.addFinancialStatements = function ($this, item) {
            if ($this.FinancialStatements == null)
                $this.FinancialStatements = [];
            if (item == null || $this.FinancialStatements.indexOf(item) > -1)
                return;
            $this.FinancialStatements.push(item);
            if (item.Supplier != $this) {
                DemonstratorApp.BO.SupplierUploads.setSupplier(item, $this);
            }
        };
        Supplier.addRangeFinancialStatements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addFinancialStatements($this, item); });
        };
        Supplier.removeFinancialStatements = function ($this, item) {
            if ($this == null || $this.FinancialStatements == null || $this.FinancialStatements.indexOf(item) === -1)
                return;
            var _index = $this.FinancialStatements.indexOf(item);
            $this.FinancialStatements.splice(_index, 1);
            item.Supplier = null;
        };
        Supplier.clearFinancialStatements = function ($this) {
            $this.FinancialStatements = null;
        };
        Supplier.setEconomicEvaluations = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.EconomicEvaluations == null)
                $this.EconomicEvaluations = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.EconomicEvaluations.length > 0) {
                DemonstratorApp.BO.Supplier.removeEconomicEvaluations($this, $this.EconomicEvaluations[0]);
            }
            DemonstratorApp.BO.Supplier.addManyEconomicEvaluations($this, copyItems);
        };
        Supplier.addManyEconomicEvaluations = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addEconomicEvaluations($this, items[i]);
            }
        };
        Supplier.addEconomicEvaluations = function ($this, item) {
            if ($this.EconomicEvaluations == null)
                $this.EconomicEvaluations = [];
            if (item == null || $this.EconomicEvaluations.indexOf(item) > -1)
                return;
            $this.EconomicEvaluations.push(item);
            if (item.Supplier2 != $this) {
                DemonstratorApp.BO.SupplierUploads.setSupplier2(item, $this);
            }
        };
        Supplier.addRangeEconomicEvaluations = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addEconomicEvaluations($this, item); });
        };
        Supplier.removeEconomicEvaluations = function ($this, item) {
            if ($this == null || $this.EconomicEvaluations == null || $this.EconomicEvaluations.indexOf(item) === -1)
                return;
            var _index = $this.EconomicEvaluations.indexOf(item);
            $this.EconomicEvaluations.splice(_index, 1);
            item.Supplier2 = null;
        };
        Supplier.clearEconomicEvaluations = function ($this) {
            $this.EconomicEvaluations = null;
        };
        Supplier.setBusinessPlans = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.BusinessPlans == null)
                $this.BusinessPlans = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.BusinessPlans.length > 0) {
                DemonstratorApp.BO.Supplier.removeBusinessPlans($this, $this.BusinessPlans[0]);
            }
            DemonstratorApp.BO.Supplier.addManyBusinessPlans($this, copyItems);
        };
        Supplier.addManyBusinessPlans = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addBusinessPlans($this, items[i]);
            }
        };
        Supplier.addBusinessPlans = function ($this, item) {
            if ($this.BusinessPlans == null)
                $this.BusinessPlans = [];
            if (item == null || $this.BusinessPlans.indexOf(item) > -1)
                return;
            $this.BusinessPlans.push(item);
        };
        Supplier.addRangeBusinessPlans = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addBusinessPlans($this, item); });
        };
        Supplier.removeBusinessPlans = function ($this, item) {
            if ($this == null || $this.BusinessPlans == null || $this.BusinessPlans.indexOf(item) === -1)
                return;
            var _index = $this.BusinessPlans.indexOf(item);
            $this.BusinessPlans.splice(_index, 1);
        };
        Supplier.clearBusinessPlans = function ($this) {
            $this.BusinessPlans = null;
        };
        Supplier.setPriorOutstandingBalances = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.PriorOutstandingBalances == null)
                $this.PriorOutstandingBalances = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.PriorOutstandingBalances.length > 0) {
                DemonstratorApp.BO.Supplier.removePriorOutstandingBalances($this, $this.PriorOutstandingBalances[0]);
            }
            DemonstratorApp.BO.Supplier.addManyPriorOutstandingBalances($this, copyItems);
        };
        Supplier.addManyPriorOutstandingBalances = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addPriorOutstandingBalances($this, items[i]);
            }
        };
        Supplier.addPriorOutstandingBalances = function ($this, item) {
            if ($this.PriorOutstandingBalances == null)
                $this.PriorOutstandingBalances = [];
            if (item == null || $this.PriorOutstandingBalances.indexOf(item) > -1)
                return;
            $this.PriorOutstandingBalances.push(item);
        };
        Supplier.addRangePriorOutstandingBalances = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addPriorOutstandingBalances($this, item); });
        };
        Supplier.removePriorOutstandingBalances = function ($this, item) {
            if ($this == null || $this.PriorOutstandingBalances == null || $this.PriorOutstandingBalances.indexOf(item) === -1)
                return;
            var _index = $this.PriorOutstandingBalances.indexOf(item);
            $this.PriorOutstandingBalances.splice(_index, 1);
        };
        Supplier.clearPriorOutstandingBalances = function ($this) {
            $this.PriorOutstandingBalances = null;
        };
        Supplier.setOutstandingBalances = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.OutstandingBalances == null)
                $this.OutstandingBalances = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.OutstandingBalances.length > 0) {
                DemonstratorApp.BO.Supplier.removeOutstandingBalances($this, $this.OutstandingBalances[0]);
            }
            DemonstratorApp.BO.Supplier.addManyOutstandingBalances($this, copyItems);
        };
        Supplier.addManyOutstandingBalances = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addOutstandingBalances($this, items[i]);
            }
        };
        Supplier.addOutstandingBalances = function ($this, item) {
            if ($this.OutstandingBalances == null)
                $this.OutstandingBalances = [];
            if (item == null || $this.OutstandingBalances.indexOf(item) > -1)
                return;
            $this.OutstandingBalances.push(item);
        };
        Supplier.addRangeOutstandingBalances = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addOutstandingBalances($this, item); });
        };
        Supplier.removeOutstandingBalances = function ($this, item) {
            if ($this == null || $this.OutstandingBalances == null || $this.OutstandingBalances.indexOf(item) === -1)
                return;
            var _index = $this.OutstandingBalances.indexOf(item);
            $this.OutstandingBalances.splice(_index, 1);
        };
        Supplier.clearOutstandingBalances = function ($this) {
            $this.OutstandingBalances = null;
        };
        Supplier.setCurrentSituations = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CurrentSituations == null)
                $this.CurrentSituations = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CurrentSituations.length > 0) {
                DemonstratorApp.BO.Supplier.removeCurrentSituations($this, $this.CurrentSituations[0]);
            }
            DemonstratorApp.BO.Supplier.addManyCurrentSituations($this, copyItems);
        };
        Supplier.addManyCurrentSituations = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addCurrentSituations($this, items[i]);
            }
        };
        Supplier.addCurrentSituations = function ($this, item) {
            if ($this.CurrentSituations == null)
                $this.CurrentSituations = [];
            if (item == null || $this.CurrentSituations.indexOf(item) > -1)
                return;
            $this.CurrentSituations.push(item);
        };
        Supplier.addRangeCurrentSituations = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addCurrentSituations($this, item); });
        };
        Supplier.removeCurrentSituations = function ($this, item) {
            if ($this == null || $this.CurrentSituations == null || $this.CurrentSituations.indexOf(item) === -1)
                return;
            var _index = $this.CurrentSituations.indexOf(item);
            $this.CurrentSituations.splice(_index, 1);
        };
        Supplier.clearCurrentSituations = function ($this) {
            $this.CurrentSituations = null;
        };
        Supplier.setCurrentStatements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CurrentStatements == null)
                $this.CurrentStatements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CurrentStatements.length > 0) {
                DemonstratorApp.BO.Supplier.removeCurrentStatements($this, $this.CurrentStatements[0]);
            }
            DemonstratorApp.BO.Supplier.addManyCurrentStatements($this, copyItems);
        };
        Supplier.addManyCurrentStatements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addCurrentStatements($this, items[i]);
            }
        };
        Supplier.addCurrentStatements = function ($this, item) {
            if ($this.CurrentStatements == null)
                $this.CurrentStatements = [];
            if (item == null || $this.CurrentStatements.indexOf(item) > -1)
                return;
            $this.CurrentStatements.push(item);
        };
        Supplier.addRangeCurrentStatements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addCurrentStatements($this, item); });
        };
        Supplier.removeCurrentStatements = function ($this, item) {
            if ($this == null || $this.CurrentStatements == null || $this.CurrentStatements.indexOf(item) === -1)
                return;
            var _index = $this.CurrentStatements.indexOf(item);
            $this.CurrentStatements.splice(_index, 1);
        };
        Supplier.clearCurrentStatements = function ($this) {
            $this.CurrentStatements = null;
        };
        Supplier.setCurrentCredits = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CurrentCredits == null)
                $this.CurrentCredits = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CurrentCredits.length > 0) {
                DemonstratorApp.BO.Supplier.removeCurrentCredits($this, $this.CurrentCredits[0]);
            }
            DemonstratorApp.BO.Supplier.addManyCurrentCredits($this, copyItems);
        };
        Supplier.addManyCurrentCredits = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addCurrentCredits($this, items[i]);
            }
        };
        Supplier.addCurrentCredits = function ($this, item) {
            if ($this.CurrentCredits == null)
                $this.CurrentCredits = [];
            if (item == null || $this.CurrentCredits.indexOf(item) > -1)
                return;
            $this.CurrentCredits.push(item);
        };
        Supplier.addRangeCurrentCredits = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addCurrentCredits($this, item); });
        };
        Supplier.removeCurrentCredits = function ($this, item) {
            if ($this == null || $this.CurrentCredits == null || $this.CurrentCredits.indexOf(item) === -1)
                return;
            var _index = $this.CurrentCredits.indexOf(item);
            $this.CurrentCredits.splice(_index, 1);
        };
        Supplier.clearCurrentCredits = function ($this) {
            $this.CurrentCredits = null;
        };
        Supplier.setFactoringAgreements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.FactoringAgreements == null)
                $this.FactoringAgreements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.FactoringAgreements.length > 0) {
                DemonstratorApp.BO.Supplier.removeFactoringAgreements($this, $this.FactoringAgreements[0]);
            }
            DemonstratorApp.BO.Supplier.addManyFactoringAgreements($this, copyItems);
        };
        Supplier.addManyFactoringAgreements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addFactoringAgreements($this, items[i]);
            }
        };
        Supplier.addFactoringAgreements = function ($this, item) {
            if ($this.FactoringAgreements == null)
                $this.FactoringAgreements = [];
            if (item == null || $this.FactoringAgreements.indexOf(item) > -1)
                return;
            $this.FactoringAgreements.push(item);
        };
        Supplier.addRangeFactoringAgreements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addFactoringAgreements($this, item); });
        };
        Supplier.removeFactoringAgreements = function ($this, item) {
            if ($this == null || $this.FactoringAgreements == null || $this.FactoringAgreements.indexOf(item) === -1)
                return;
            var _index = $this.FactoringAgreements.indexOf(item);
            $this.FactoringAgreements.splice(_index, 1);
        };
        Supplier.clearFactoringAgreements = function ($this) {
            $this.FactoringAgreements = null;
        };
        Supplier.setCustomerAgreements = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.CustomerAgreements == null)
                $this.CustomerAgreements = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.CustomerAgreements.length > 0) {
                DemonstratorApp.BO.Supplier.removeCustomerAgreements($this, $this.CustomerAgreements[0]);
            }
            DemonstratorApp.BO.Supplier.addManyCustomerAgreements($this, copyItems);
        };
        Supplier.addManyCustomerAgreements = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addCustomerAgreements($this, items[i]);
            }
        };
        Supplier.addCustomerAgreements = function ($this, item) {
            if ($this.CustomerAgreements == null)
                $this.CustomerAgreements = [];
            if (item == null || $this.CustomerAgreements.indexOf(item) > -1)
                return;
            $this.CustomerAgreements.push(item);
        };
        Supplier.addRangeCustomerAgreements = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addCustomerAgreements($this, item); });
        };
        Supplier.removeCustomerAgreements = function ($this, item) {
            if ($this == null || $this.CustomerAgreements == null || $this.CustomerAgreements.indexOf(item) === -1)
                return;
            var _index = $this.CustomerAgreements.indexOf(item);
            $this.CustomerAgreements.splice(_index, 1);
        };
        Supplier.clearCustomerAgreements = function ($this) {
            $this.CustomerAgreements = null;
        };
        Supplier.setGeneralConstractuals = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.GeneralConstractuals == null)
                $this.GeneralConstractuals = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.GeneralConstractuals.length > 0) {
                DemonstratorApp.BO.Supplier.removeGeneralConstractuals($this, $this.GeneralConstractuals[0]);
            }
            DemonstratorApp.BO.Supplier.addManyGeneralConstractuals($this, copyItems);
        };
        Supplier.addManyGeneralConstractuals = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addGeneralConstractuals($this, items[i]);
            }
        };
        Supplier.addGeneralConstractuals = function ($this, item) {
            if ($this.GeneralConstractuals == null)
                $this.GeneralConstractuals = [];
            if (item == null || $this.GeneralConstractuals.indexOf(item) > -1)
                return;
            $this.GeneralConstractuals.push(item);
        };
        Supplier.addRangeGeneralConstractuals = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addGeneralConstractuals($this, item); });
        };
        Supplier.removeGeneralConstractuals = function ($this, item) {
            if ($this == null || $this.GeneralConstractuals == null || $this.GeneralConstractuals.indexOf(item) === -1)
                return;
            var _index = $this.GeneralConstractuals.indexOf(item);
            $this.GeneralConstractuals.splice(_index, 1);
        };
        Supplier.clearGeneralConstractuals = function ($this) {
            $this.GeneralConstractuals = null;
        };
        Supplier.setOrganizationalCharts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.OrganizationalCharts == null)
                $this.OrganizationalCharts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.OrganizationalCharts.length > 0) {
                DemonstratorApp.BO.Supplier.removeOrganizationalCharts($this, $this.OrganizationalCharts[0]);
            }
            DemonstratorApp.BO.Supplier.addManyOrganizationalCharts($this, copyItems);
        };
        Supplier.addManyOrganizationalCharts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addOrganizationalCharts($this, items[i]);
            }
        };
        Supplier.addOrganizationalCharts = function ($this, item) {
            if ($this.OrganizationalCharts == null)
                $this.OrganizationalCharts = [];
            if (item == null || $this.OrganizationalCharts.indexOf(item) > -1)
                return;
            $this.OrganizationalCharts.push(item);
        };
        Supplier.addRangeOrganizationalCharts = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addOrganizationalCharts($this, item); });
        };
        Supplier.removeOrganizationalCharts = function ($this, item) {
            if ($this == null || $this.OrganizationalCharts == null || $this.OrganizationalCharts.indexOf(item) === -1)
                return;
            var _index = $this.OrganizationalCharts.indexOf(item);
            $this.OrganizationalCharts.splice(_index, 1);
        };
        Supplier.clearOrganizationalCharts = function ($this) {
            $this.OrganizationalCharts = null;
        };
        Supplier.setInvoicesForms = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.InvoicesForms == null)
                $this.InvoicesForms = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.InvoicesForms.length > 0) {
                DemonstratorApp.BO.Supplier.removeInvoicesForms($this, $this.InvoicesForms[0]);
            }
            DemonstratorApp.BO.Supplier.addManyInvoicesForms($this, copyItems);
        };
        Supplier.addManyInvoicesForms = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addInvoicesForms($this, items[i]);
            }
        };
        Supplier.addInvoicesForms = function ($this, item) {
            if ($this.InvoicesForms == null)
                $this.InvoicesForms = [];
            if (item == null || $this.InvoicesForms.indexOf(item) > -1)
                return;
            $this.InvoicesForms.push(item);
        };
        Supplier.addRangeInvoicesForms = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addInvoicesForms($this, item); });
        };
        Supplier.removeInvoicesForms = function ($this, item) {
            if ($this == null || $this.InvoicesForms == null || $this.InvoicesForms.indexOf(item) === -1)
                return;
            var _index = $this.InvoicesForms.indexOf(item);
            $this.InvoicesForms.splice(_index, 1);
        };
        Supplier.clearInvoicesForms = function ($this) {
            $this.InvoicesForms = null;
        };
        Supplier.setDeclarations = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Declarations == null)
                $this.Declarations = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Declarations.length > 0) {
                DemonstratorApp.BO.Supplier.removeDeclarations($this, $this.Declarations[0]);
            }
            DemonstratorApp.BO.Supplier.addManyDeclarations($this, copyItems);
        };
        Supplier.addManyDeclarations = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addDeclarations($this, items[i]);
            }
        };
        Supplier.addDeclarations = function ($this, item) {
            if ($this.Declarations == null)
                $this.Declarations = [];
            if (item == null || $this.Declarations.indexOf(item) > -1)
                return;
            $this.Declarations.push(item);
        };
        Supplier.addRangeDeclarations = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addDeclarations($this, item); });
        };
        Supplier.removeDeclarations = function ($this, item) {
            if ($this == null || $this.Declarations == null || $this.Declarations.indexOf(item) === -1)
                return;
            var _index = $this.Declarations.indexOf(item);
            $this.Declarations.splice(_index, 1);
        };
        Supplier.clearDeclarations = function ($this) {
            $this.Declarations = null;
        };
        Supplier.setSupplierEvaluation = function ($this, value) {
            var oldValue = $this.SupplierEvaluation;
            $this.SupplierEvaluation = value;
            if (value != null) {
            }
        };
        Supplier.setDataQuality = function ($this, value) {
            var oldValue = $this.DataQuality;
            $this.DataQuality = value;
            if (value != null) {
            }
        };
        Supplier.setDataAvailability = function ($this, value) {
            var oldValue = $this.DataAvailability;
            $this.DataAvailability = value;
            if (value != null) {
                if (oldValue != null && oldValue.Supplier != null) {
                    oldValue.Supplier = null;
                }
                if ($this.DataAvailability.Supplier !== $this) {
                    DemonstratorApp.BO.DataAvailability.setSupplier(value, $this);
                }
            }
        };
        Supplier.setSupplierProducts = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.SupplierProducts == null)
                $this.SupplierProducts = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.SupplierProducts.length > 0) {
                DemonstratorApp.BO.Supplier.removeSupplierProducts($this, $this.SupplierProducts[0]);
            }
            DemonstratorApp.BO.Supplier.addManySupplierProducts($this, copyItems);
        };
        Supplier.addManySupplierProducts = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addSupplierProducts($this, items[i]);
            }
        };
        Supplier.addSupplierProducts = function ($this, item) {
            if ($this.SupplierProducts == null)
                $this.SupplierProducts = [];
            if (item == null || $this.SupplierProducts.indexOf(item) > -1)
                return;
            $this.SupplierProducts.push(item);
            if (item.Supplier != $this) {
                DemonstratorApp.BO.SupplierProduct.setSupplier(item, $this);
            }
        };
        Supplier.addRangeSupplierProducts = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addSupplierProducts($this, item); });
        };
        Supplier.removeSupplierProducts = function ($this, item) {
            if ($this == null || $this.SupplierProducts == null || $this.SupplierProducts.indexOf(item) === -1)
                return;
            var _index = $this.SupplierProducts.indexOf(item);
            $this.SupplierProducts.splice(_index, 1);
            item.Supplier = null;
        };
        Supplier.clearSupplierProducts = function ($this) {
            $this.SupplierProducts = null;
        };
        Supplier.setTransactions = function ($this, items) {
            if (items == null)
                items = [];
            if ($this.Transactions == null)
                $this.Transactions = [];
            var copyItems = Joove.Common.cloneObject(items);
            while ($this.Transactions.length > 0) {
                DemonstratorApp.BO.Supplier.removeTransactions($this, $this.Transactions[0]);
            }
            DemonstratorApp.BO.Supplier.addManyTransactions($this, copyItems);
        };
        Supplier.addManyTransactions = function ($this, items) {
            if (items == null)
                return;
            for (var i = 0; i < items.length; i++) {
                DemonstratorApp.BO.Supplier.addTransactions($this, items[i]);
            }
        };
        Supplier.addTransactions = function ($this, item) {
            if ($this.Transactions == null)
                $this.Transactions = [];
            if (item == null || $this.Transactions.indexOf(item) > -1)
                return;
            $this.Transactions.push(item);
            if (item.Supplier != $this) {
                DemonstratorApp.BO.Transaction.setSupplier(item, $this);
            }
        };
        Supplier.addRangeTransactions = function ($this, items) {
            items.forEach(function (item) { return DemonstratorApp.BO.Supplier.addTransactions($this, item); });
        };
        Supplier.removeTransactions = function ($this, item) {
            if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1)
                return;
            var _index = $this.Transactions.indexOf(item);
            $this.Transactions.splice(_index, 1);
            item.Supplier = null;
        };
        Supplier.clearTransactions = function ($this) {
            $this.Transactions = null;
        };
        BO.Supplier = Supplier;
    })(BO = DemonstratorApp.BO || (DemonstratorApp.BO = {}));
})(DemonstratorApp || (DemonstratorApp = {}));
var _appDomain = DemonstratorApp.BO;
window.$domain = _appDomain;
