// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DemonstratorApp.BO {
export class Domain_LocalResourcesDefinition  {
    _originalTypeClassName = "DemonstratorApp.BO.Domain_LocalResourcesDefinition";
    Domain = DemonstratorApp.BO;
    constructor() {
    }
}

export class Agreement  {
    _originalTypeClassName = "DemonstratorApp.BO.Agreement";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.FundedTransactions = [];
        this.AgreementStatus = [];
        this.CommercialAgreements = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
StartDate:
    any;
EndDate:
    any;
FundedRate:
    any;
FundedAmount:
    any;
CurrentAgreementStatus:
    any;
InterestRate:
    any;
Investor:
    any;
Supplier:
    any;
FundedTransactions:
    any;
AgreementStatus:
    any;
DocumentAgreement:
    any;
CommercialAgreements:
    any;
    static setInvestor = ($this, value) => {
        var oldValue = $this.Investor;
        $this.Investor = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Investor.removeAgreements(oldValue, $this);
            }
            DemonstratorApp.BO.Investor.addAgreements(value, $this);
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Supplier.removeAgreements(oldValue, $this);
            }
            DemonstratorApp.BO.Supplier.addAgreements(value, $this);
        }
    }
    static setFundedTransactions = ($this, items) => {
        if (items == null) items = [];
        if ($this.FundedTransactions == null) $this.FundedTransactions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.FundedTransactions.length > 0) {
            DemonstratorApp.BO.Agreement.removeFundedTransactions($this, $this.FundedTransactions[0]);
        }

        DemonstratorApp.BO.Agreement.addManyFundedTransactions($this, copyItems);
    }
    static addManyFundedTransactions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Agreement.addFundedTransactions($this, items[i]);
        }
    }
    static addFundedTransactions = ($this, item) => {
        if ($this.FundedTransactions == null) $this.FundedTransactions = [];
        if (item == null || $this.FundedTransactions.indexOf(item) > -1) return;
        $this.FundedTransactions.push(item);
    }
    static addRangeFundedTransactions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Agreement.addFundedTransactions($this, item));
    }
    static removeFundedTransactions = ($this, item) => {
        if ($this == null || $this.FundedTransactions == null || $this.FundedTransactions.indexOf(item) === -1) return;
        var _index = $this.FundedTransactions.indexOf(item);
        $this.FundedTransactions.splice(_index, 1);
    }
    static clearFundedTransactions = ($this) => {
        $this.FundedTransactions = null;
    }
    static setAgreementStatus = ($this, items) => {
        if (items == null) items = [];
        if ($this.AgreementStatus == null) $this.AgreementStatus = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AgreementStatus.length > 0) {
            DemonstratorApp.BO.Agreement.removeAgreementStatus($this, $this.AgreementStatus[0]);
        }

        DemonstratorApp.BO.Agreement.addManyAgreementStatus($this, copyItems);
    }
    static addManyAgreementStatus = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Agreement.addAgreementStatus($this, items[i]);
        }
    }
    static addAgreementStatus = ($this, item) => {
        if ($this.AgreementStatus == null) $this.AgreementStatus = [];
        if (item == null || $this.AgreementStatus.indexOf(item) > -1) return;
        $this.AgreementStatus.push(item);
    }
    static addRangeAgreementStatus = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Agreement.addAgreementStatus($this, item));
    }
    static removeAgreementStatus = ($this, item) => {
        if ($this == null || $this.AgreementStatus == null || $this.AgreementStatus.indexOf(item) === -1) return;
        var _index = $this.AgreementStatus.indexOf(item);
        $this.AgreementStatus.splice(_index, 1);
    }
    static clearAgreementStatus = ($this) => {
        $this.AgreementStatus = null;
    }
    static setDocumentAgreement = ($this, value) => {
        var oldValue = $this.DocumentAgreement;
        $this.DocumentAgreement = value;
        if (value != null) {
            if (oldValue != null && oldValue.Agreement != null) {
                oldValue.Agreement = null;
            }
            if ($this.DocumentAgreement.Agreement !== $this) {
                DemonstratorApp.BO.DocumentAgreement.setAgreement(value, $this);
            }
        }
    }
    static setCommercialAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.CommercialAgreements == null) $this.CommercialAgreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CommercialAgreements.length > 0) {
            DemonstratorApp.BO.Agreement.removeCommercialAgreements($this, $this.CommercialAgreements[0]);
        }

        DemonstratorApp.BO.Agreement.addManyCommercialAgreements($this, copyItems);
    }
    static addManyCommercialAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Agreement.addCommercialAgreements($this, items[i]);
        }
    }
    static addCommercialAgreements = ($this, item) => {
        if ($this.CommercialAgreements == null) $this.CommercialAgreements = [];
        if (item == null || $this.CommercialAgreements.indexOf(item) > -1) return;
        $this.CommercialAgreements.push(item);
        if (item.Agreement != $this) {
            DemonstratorApp.BO.CommercialAgreement.setAgreement(item, $this);
        }
    }
    static addRangeCommercialAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Agreement.addCommercialAgreements($this, item));
    }
    static removeCommercialAgreements = ($this, item) => {
        if ($this == null || $this.CommercialAgreements == null || $this.CommercialAgreements.indexOf(item) === -1) return;
        var _index = $this.CommercialAgreements.indexOf(item);
        $this.CommercialAgreements.splice(_index, 1);
        item.Agreement = null;
    }
    static clearCommercialAgreements = ($this) => {
        $this.CommercialAgreements = null;
    }
    static ApprovedFromEverybody($this: any): any{if (Joove.Common.nullSafe<any>(() => $this.AgreementStatus.linq.any((a) => Joove.Common.nullSafe<any>(() => a.Status, "") == "Approved by Administrator" && Joove.Common.nullSafe<any>(() => $this.AgreementStatus.linq.any((b) => Joove.Common.nullSafe<any>(() => b.Status, "") == "Approved by Investor"), false) && Joove.Common.nullSafe<any>(() => $this.AgreementStatus.linq.any((c) => Joove.Common.nullSafe<any>(() => c.Status, "") == "Approved by Supplier"), false)), false)) {
    return true;
}

return false;

                                             }
static Get_CurrentAgreementStatus($this: any): any{if (Joove.Common.nullSafe<any>(() => $this.AgreementStatus, null) != null) {
    let firstAgreementStatus = Joove.Common.nullSafe<any>(() => $this.AgreementStatus.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.DateOccured, new Date('1753-01-01'))).toArray(), null);
        if ((CLMS.Framework.Number.GreaterThan(() => firstAgreementStatus.length, () => 0))) {
            return Joove.Common.nullSafe<any>(() => firstAgreementStatus.linq.where().firstOrDefault(null).Status, "");
        } else {
            return "";
        }
    } else {return "";
    }

                                                      }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CommercialAgreement  {
    _originalTypeClassName = "DemonstratorApp.BO.CommercialAgreement";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Orders = [];
        this.Transactions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ProductCategory:
    any;
PaymentTerms:
    any;
Supplier:
    any;
Buyer:
    any;
Orders:
    any;
ImportedBuyer:
    any;
Transactions:
    any;
Agreement:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Supplier.removeCommercialAgreements(oldValue, $this);
            }
            DemonstratorApp.BO.Supplier.addCommercialAgreements(value, $this);
        }
    }
    static setBuyer = ($this, value) => {
        var oldValue = $this.Buyer;
        $this.Buyer = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Buyer.removeCommercialAgreements(oldValue, $this);
            }
            DemonstratorApp.BO.Buyer.addCommercialAgreements(value, $this);
        }
    }
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.CommercialAgreement.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.CommercialAgreement.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.CommercialAgreement.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        if (item.CommercialAgreement != $this) {
            DemonstratorApp.BO.Order.setCommercialAgreement(item, $this);
        }
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.CommercialAgreement.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        item.CommercialAgreement = null;
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setImportedBuyer = ($this, value) => {
        var oldValue = $this.ImportedBuyer;
        $this.ImportedBuyer = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.ImportedBuyer.removeCommercialAgreement(oldValue, $this);
            }
            DemonstratorApp.BO.ImportedBuyer.addCommercialAgreement(value, $this);
        }
    }
    static setTransactions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Transactions == null) $this.Transactions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Transactions.length > 0) {
            DemonstratorApp.BO.CommercialAgreement.removeTransactions($this, $this.Transactions[0]);
        }

        DemonstratorApp.BO.CommercialAgreement.addManyTransactions($this, copyItems);
    }
    static addManyTransactions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.CommercialAgreement.addTransactions($this, items[i]);
        }
    }
    static addTransactions = ($this, item) => {
        if ($this.Transactions == null) $this.Transactions = [];
        if (item == null || $this.Transactions.indexOf(item) > -1) return;
        $this.Transactions.push(item);
        if (item.CommercialAgreement != $this) {
            DemonstratorApp.BO.Transaction.setCommercialAgreement(item, $this);
        }
    }
    static addRangeTransactions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.CommercialAgreement.addTransactions($this, item));
    }
    static removeTransactions = ($this, item) => {
        if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1) return;
        var _index = $this.Transactions.indexOf(item);
        $this.Transactions.splice(_index, 1);
        item.CommercialAgreement = null;
    }
    static clearTransactions = ($this) => {
        $this.Transactions = null;
    }
    static setAgreement = ($this, value) => {
        var oldValue = $this.Agreement;
        $this.Agreement = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Agreement.removeCommercialAgreements(oldValue, $this);
            }
            DemonstratorApp.BO.Agreement.addCommercialAgreements(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class FundedTransaction  {
    _originalTypeClassName = "DemonstratorApp.BO.FundedTransaction";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FundingPercentage:
    any;
TransactionStatus:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AgreementStatus  {
    _originalTypeClassName = "DemonstratorApp.BO.AgreementStatus";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Status:
    any;
DateOccured:
    any;
ProvidedBy:
    any;
    static SortStatusDesc($this: any): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DocumentAgreement  {
    _originalTypeClassName = "DemonstratorApp.BO.DocumentAgreement";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
SupplierDocument:
    any;
InvestorDocument:
    any;
AdminDocument:
    any;
Agreement:
    any;
    static setAgreement = ($this, value) => {
        var oldValue = $this.Agreement;
        $this.Agreement = value;
        if (value != null) {
            if (oldValue != null && oldValue.DocumentAgreement != null) {
                oldValue.DocumentAgreement = null;
            }
            if ($this.Agreement.DocumentAgreement !== $this) {
                DemonstratorApp.BO.Agreement.setDocumentAgreement(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AlgorithmCheck  {
    _originalTypeClassName = "DemonstratorApp.BO.AlgorithmCheck";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
AnnualTurnover:
    any;
B2B:
    any;
B2C:
    any;
PaymentTerm:
    any;
AveragePaymentTerm:
    any;
AverageInvoiceValue:
    any;
EquityRatio:
    any;
AlgorithmCount:
    any;
Result:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class BillOfLanding  {
    _originalTypeClassName = "DemonstratorApp.BO.BillOfLanding";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Orders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LandingPlace:
    any;
LandingDate:
    any;
DeliveryPlace:
    any;
DeliveryDate:
    any;
DOCNumber:
    any;
ReceivingPartyId:
    any;
IsBuyerReceiving:
    any;
MeanOfTransport:
    any;
Orders:
    any;
Transaction:
    any;
    static setMeanOfTransport = ($this, value) => {
        var oldValue = $this.MeanOfTransport;
        $this.MeanOfTransport = value;
        if (value != null) {
        }
    }
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.BillOfLanding.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.BillOfLanding.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.BillOfLanding.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        Order.addBillOfLandings(item, $this);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.BillOfLanding.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        Order.removeBillOfLandings(item, $this);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removeBillOfLandings(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addBillOfLandings(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Contact  {
    _originalTypeClassName = "DemonstratorApp.BO.Contact";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FirstName:
    any;
LastName:
    any;
Represents:
    any;
Company:
    any;
Email:
    any;
Phone:
    any;
Message:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CreditNoteProduct  {
    _originalTypeClassName = "DemonstratorApp.BO.CreditNoteProduct";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Quantity:
    any;
Description:
    any;
UnitValue:
    any;
MeasurementUnit:
    any;
Price:
    any;
LineTotalPrice:
    any;
CreditNote:
    any;
    static setCreditNote = ($this, value) => {
        var oldValue = $this.CreditNote;
        $this.CreditNote = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.CreditNote.removeCreditNoteProducts(oldValue, $this);
            }
            DemonstratorApp.BO.CreditNote.addCreditNoteProducts(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Dashboard  {
    _originalTypeClassName = "DemonstratorApp.BO.Dashboard";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.SupplierStatistics = [];
        this.BuyerStatistics = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
SupplierStatistics:
    any;
BuyerStatistics:
    any;
    static setSupplierStatistics = ($this, items) => {
        if (items == null) items = [];
        if ($this.SupplierStatistics == null) $this.SupplierStatistics = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SupplierStatistics.length > 0) {
            DemonstratorApp.BO.Dashboard.removeSupplierStatistics($this, $this.SupplierStatistics[0]);
        }

        DemonstratorApp.BO.Dashboard.addManySupplierStatistics($this, copyItems);
    }
    static addManySupplierStatistics = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Dashboard.addSupplierStatistics($this, items[i]);
        }
    }
    static addSupplierStatistics = ($this, item) => {
        if ($this.SupplierStatistics == null) $this.SupplierStatistics = [];
        if (item == null || $this.SupplierStatistics.indexOf(item) > -1) return;
        $this.SupplierStatistics.push(item);
    }
    static addRangeSupplierStatistics = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Dashboard.addSupplierStatistics($this, item));
    }
    static removeSupplierStatistics = ($this, item) => {
        if ($this == null || $this.SupplierStatistics == null || $this.SupplierStatistics.indexOf(item) === -1) return;
        var _index = $this.SupplierStatistics.indexOf(item);
        $this.SupplierStatistics.splice(_index, 1);
    }
    static clearSupplierStatistics = ($this) => {
        $this.SupplierStatistics = null;
    }
    static setBuyerStatistics = ($this, items) => {
        if (items == null) items = [];
        if ($this.BuyerStatistics == null) $this.BuyerStatistics = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.BuyerStatistics.length > 0) {
            DemonstratorApp.BO.Dashboard.removeBuyerStatistics($this, $this.BuyerStatistics[0]);
        }

        DemonstratorApp.BO.Dashboard.addManyBuyerStatistics($this, copyItems);
    }
    static addManyBuyerStatistics = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Dashboard.addBuyerStatistics($this, items[i]);
        }
    }
    static addBuyerStatistics = ($this, item) => {
        if ($this.BuyerStatistics == null) $this.BuyerStatistics = [];
        if (item == null || $this.BuyerStatistics.indexOf(item) > -1) return;
        $this.BuyerStatistics.push(item);
    }
    static addRangeBuyerStatistics = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Dashboard.addBuyerStatistics($this, item));
    }
    static removeBuyerStatistics = ($this, item) => {
        if ($this == null || $this.BuyerStatistics == null || $this.BuyerStatistics.indexOf(item) === -1) return;
        var _index = $this.BuyerStatistics.indexOf(item);
        $this.BuyerStatistics.splice(_index, 1);
    }
    static clearBuyerStatistics = ($this) => {
        $this.BuyerStatistics = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierStatistic  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierStatistic";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalCommercialAgreements:
    any;
DataQuality:
    any;
DataAvailability:
    any;
OnTimeDeliveries:
    any;
AsOrderedDeliveries:
    any;
InFullDeliveries:
    any;
TotalImpeachments:
    any;
CurrentTurnover:
    any;
NextTurnover:
    any;
PreviousTurnover:
    any;
TotalTransactions:
    any;
Supplier:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class BuyerStatistic  {
    _originalTypeClassName = "DemonstratorApp.BO.BuyerStatistic";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Buyer:
    any;
    static setBuyer = ($this, value) => {
        var oldValue = $this.Buyer;
        $this.Buyer = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DeliveryNote  {
    _originalTypeClassName = "DemonstratorApp.BO.DeliveryNote";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Products = [];
        this.DeliveryNoteProducts = [];
        this.Orders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DeliveryNoteNumber:
    any;
Description:
    any;
DateIssued:
    any;
Amount:
    any;
TotalPrice:
    any;
DNoteAttachment:
    any;
Status:
    any;
Products:
    any;
DeliveryNoteProducts:
    any;
Orders:
    any;
Transaction:
    any;
    static setProducts = ($this, items) => {
        if (items == null) items = [];
        if ($this.Products == null) $this.Products = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Products.length > 0) {
            DemonstratorApp.BO.DeliveryNote.removeProducts($this, $this.Products[0]);
        }

        DemonstratorApp.BO.DeliveryNote.addManyProducts($this, copyItems);
    }
    static addManyProducts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.DeliveryNote.addProducts($this, items[i]);
        }
    }
    static addProducts = ($this, item) => {
        if ($this.Products == null) $this.Products = [];
        if (item == null || $this.Products.indexOf(item) > -1) return;
        $this.Products.push(item);
    }
    static addRangeProducts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.DeliveryNote.addProducts($this, item));
    }
    static removeProducts = ($this, item) => {
        if ($this == null || $this.Products == null || $this.Products.indexOf(item) === -1) return;
        var _index = $this.Products.indexOf(item);
        $this.Products.splice(_index, 1);
    }
    static clearProducts = ($this) => {
        $this.Products = null;
    }
    static setDeliveryNoteProducts = ($this, items) => {
        if (items == null) items = [];
        if ($this.DeliveryNoteProducts == null) $this.DeliveryNoteProducts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.DeliveryNoteProducts.length > 0) {
            DemonstratorApp.BO.DeliveryNote.removeDeliveryNoteProducts($this, $this.DeliveryNoteProducts[0]);
        }

        DemonstratorApp.BO.DeliveryNote.addManyDeliveryNoteProducts($this, copyItems);
    }
    static addManyDeliveryNoteProducts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.DeliveryNote.addDeliveryNoteProducts($this, items[i]);
        }
    }
    static addDeliveryNoteProducts = ($this, item) => {
        if ($this.DeliveryNoteProducts == null) $this.DeliveryNoteProducts = [];
        if (item == null || $this.DeliveryNoteProducts.indexOf(item) > -1) return;
        $this.DeliveryNoteProducts.push(item);
        if (item.DeliveryNote != $this) {
            DemonstratorApp.BO.DeliveryNoteProduct.setDeliveryNote(item, $this);
        }
    }
    static addRangeDeliveryNoteProducts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.DeliveryNote.addDeliveryNoteProducts($this, item));
    }
    static removeDeliveryNoteProducts = ($this, item) => {
        if ($this == null || $this.DeliveryNoteProducts == null || $this.DeliveryNoteProducts.indexOf(item) === -1) return;
        var _index = $this.DeliveryNoteProducts.indexOf(item);
        $this.DeliveryNoteProducts.splice(_index, 1);
        item.DeliveryNote = null;
    }
    static clearDeliveryNoteProducts = ($this) => {
        $this.DeliveryNoteProducts = null;
    }
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.DeliveryNote.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.DeliveryNote.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.DeliveryNote.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        Order.addDeliveryNotes(item, $this);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.DeliveryNote.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        Order.removeDeliveryNotes(item, $this);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removeDeliveryNotes(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addDeliveryNotes(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DeliveryNoteProduct  {
    _originalTypeClassName = "DemonstratorApp.BO.DeliveryNoteProduct";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Quantity:
    any;
Description:
    any;
UnitValue:
    any;
MeasurementUnit:
    any;
Price:
    any;
LineTotalPrice:
    any;
DeliveryNote:
    any;
SupplierProduct:
    any;
    static setDeliveryNote = ($this, value) => {
        var oldValue = $this.DeliveryNote;
        $this.DeliveryNote = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.DeliveryNote.removeDeliveryNoteProducts(oldValue, $this);
            }
            DemonstratorApp.BO.DeliveryNote.addDeliveryNoteProducts(value, $this);
        }
    }
    static setSupplierProduct = ($this, value) => {
        var oldValue = $this.SupplierProduct;
        $this.SupplierProduct = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class FinalAcceptanceCertificate  {
    _originalTypeClassName = "DemonstratorApp.BO.FinalAcceptanceCertificate";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Certificate:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ImportedBuyer  {
    _originalTypeClassName = "DemonstratorApp.BO.ImportedBuyer";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.CommercialAgreement = [];
        this.Transactions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
VATNumber:
    any;
Company:
    any;
AddressOne:
    any;
AddressTwo:
    any;
Phone:
    any;
CommercialAgreement:
    any;
Transactions:
    any;
    static setCommercialAgreement = ($this, items) => {
        if (items == null) items = [];
        if ($this.CommercialAgreement == null) $this.CommercialAgreement = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CommercialAgreement.length > 0) {
            DemonstratorApp.BO.ImportedBuyer.removeCommercialAgreement($this, $this.CommercialAgreement[0]);
        }

        DemonstratorApp.BO.ImportedBuyer.addManyCommercialAgreement($this, copyItems);
    }
    static addManyCommercialAgreement = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ImportedBuyer.addCommercialAgreement($this, items[i]);
        }
    }
    static addCommercialAgreement = ($this, item) => {
        if ($this.CommercialAgreement == null) $this.CommercialAgreement = [];
        if (item == null || $this.CommercialAgreement.indexOf(item) > -1) return;
        $this.CommercialAgreement.push(item);
        if (item.ImportedBuyer != $this) {
            DemonstratorApp.BO.CommercialAgreement.setImportedBuyer(item, $this);
        }
    }
    static addRangeCommercialAgreement = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ImportedBuyer.addCommercialAgreement($this, item));
    }
    static removeCommercialAgreement = ($this, item) => {
        if ($this == null || $this.CommercialAgreement == null || $this.CommercialAgreement.indexOf(item) === -1) return;
        var _index = $this.CommercialAgreement.indexOf(item);
        $this.CommercialAgreement.splice(_index, 1);
        item.ImportedBuyer = null;
    }
    static clearCommercialAgreement = ($this) => {
        $this.CommercialAgreement = null;
    }
    static setTransactions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Transactions == null) $this.Transactions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Transactions.length > 0) {
            DemonstratorApp.BO.ImportedBuyer.removeTransactions($this, $this.Transactions[0]);
        }

        DemonstratorApp.BO.ImportedBuyer.addManyTransactions($this, copyItems);
    }
    static addManyTransactions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ImportedBuyer.addTransactions($this, items[i]);
        }
    }
    static addTransactions = ($this, item) => {
        if ($this.Transactions == null) $this.Transactions = [];
        if (item == null || $this.Transactions.indexOf(item) > -1) return;
        $this.Transactions.push(item);
        if (item.ImportedBuyer != $this) {
            DemonstratorApp.BO.Transaction.setImportedBuyer(item, $this);
        }
    }
    static addRangeTransactions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ImportedBuyer.addTransactions($this, item));
    }
    static removeTransactions = ($this, item) => {
        if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1) return;
        var _index = $this.Transactions.indexOf(item);
        $this.Transactions.splice(_index, 1);
        item.ImportedBuyer = null;
    }
    static clearTransactions = ($this) => {
        $this.Transactions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Intermediary  {
    _originalTypeClassName = "DemonstratorApp.BO.Intermediary";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Orders = [];
        this.Transactions = [];
        this['_key'] = this.Id = 0;
    }
OtherDescription:
    any;
IntermediaryType:
    any;
Company:
    any;
Id:
    any;
EMail:
    any;
GUID:
    any;
Orders:
    any;
Transactions:
    any;
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.Intermediary.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.Intermediary.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Intermediary.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        Order.addIntermediaries(item, $this);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Intermediary.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        Order.removeIntermediaries(item, $this);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setTransactions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Transactions == null) $this.Transactions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Transactions.length > 0) {
            DemonstratorApp.BO.Intermediary.removeTransactions($this, $this.Transactions[0]);
        }

        DemonstratorApp.BO.Intermediary.addManyTransactions($this, copyItems);
    }
    static addManyTransactions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Intermediary.addTransactions($this, items[i]);
        }
    }
    static addTransactions = ($this, item) => {
        if ($this.Transactions == null) $this.Transactions = [];
        if (item == null || $this.Transactions.indexOf(item) > -1) return;
        $this.Transactions.push(item);
        Transaction.addIntermediaries(item, $this);
    }
    static addRangeTransactions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Intermediary.addTransactions($this, item));
    }
    static removeTransactions = ($this, item) => {
        if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1) return;
        var _index = $this.Transactions.indexOf(item);
        $this.Transactions.splice(_index, 1);
        Transaction.removeIntermediaries(item, $this);
    }
    static clearTransactions = ($this) => {
        $this.Transactions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum IntermediaryType {
    ThirdPartyLogisticsProviders,
    TransportationCompanies,
    CustomsAgents,
    ShippingAgent,
    Other,
}

export class PartialProofOfDelivery  {
    _originalTypeClassName = "DemonstratorApp.BO.PartialProofOfDelivery";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
PODNumber:
    any;
DateIssued:
    any;
QualityStatus:
    any;
QuantityStatus:
    any;
DeliveryStatus:
    any;
PODAttachment:
    any;
Comments:
    any;
Transaction:
    any;
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removePartialProofOfDeliveries(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addPartialProofOfDeliveries(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CustomsClearingDocumentation  {
    _originalTypeClassName = "DemonstratorApp.BO.CustomsClearingDocumentation";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CustomsClearingDate:
    any;
ExportingCountry:
    any;
ImportingCountry:
    any;
BuyerName:
    any;
Transaction:
    any;
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removeCustomsClearingDocumentations(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addCustomsClearingDocumentations(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AnnualTransactionVolume  {
    _originalTypeClassName = "DemonstratorApp.BO.AnnualTransactionVolume";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Volume:
    any;
Year:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Invoice  {
    _originalTypeClassName = "DemonstratorApp.BO.Invoice";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Products = [];
        this.InvoiceProducts = [];
        this.Orders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
InvoiceNumber:
    any;
Description:
    any;
DateIssued:
    any;
Amount:
    any;
CustomerType:
    any;
CumulativeBalance:
    any;
TotalPrice:
    any;
DescriptionTwo:
    any;
Attribute:
    any;
InvoiceAttachment:
    any;
Status:
    any;
Products:
    any;
InvoiceProducts:
    any;
Orders:
    any;
Transaction:
    any;
    static setProducts = ($this, items) => {
        if (items == null) items = [];
        if ($this.Products == null) $this.Products = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Products.length > 0) {
            DemonstratorApp.BO.Invoice.removeProducts($this, $this.Products[0]);
        }

        DemonstratorApp.BO.Invoice.addManyProducts($this, copyItems);
    }
    static addManyProducts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Invoice.addProducts($this, items[i]);
        }
    }
    static addProducts = ($this, item) => {
        if ($this.Products == null) $this.Products = [];
        if (item == null || $this.Products.indexOf(item) > -1) return;
        $this.Products.push(item);
    }
    static addRangeProducts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Invoice.addProducts($this, item));
    }
    static removeProducts = ($this, item) => {
        if ($this == null || $this.Products == null || $this.Products.indexOf(item) === -1) return;
        var _index = $this.Products.indexOf(item);
        $this.Products.splice(_index, 1);
    }
    static clearProducts = ($this) => {
        $this.Products = null;
    }
    static setInvoiceProducts = ($this, items) => {
        if (items == null) items = [];
        if ($this.InvoiceProducts == null) $this.InvoiceProducts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.InvoiceProducts.length > 0) {
            DemonstratorApp.BO.Invoice.removeInvoiceProducts($this, $this.InvoiceProducts[0]);
        }

        DemonstratorApp.BO.Invoice.addManyInvoiceProducts($this, copyItems);
    }
    static addManyInvoiceProducts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Invoice.addInvoiceProducts($this, items[i]);
        }
    }
    static addInvoiceProducts = ($this, item) => {
        if ($this.InvoiceProducts == null) $this.InvoiceProducts = [];
        if (item == null || $this.InvoiceProducts.indexOf(item) > -1) return;
        $this.InvoiceProducts.push(item);
        if (item.Invoice != $this) {
            DemonstratorApp.BO.InvoiceProduct.setInvoice(item, $this);
        }
    }
    static addRangeInvoiceProducts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Invoice.addInvoiceProducts($this, item));
    }
    static removeInvoiceProducts = ($this, item) => {
        if ($this == null || $this.InvoiceProducts == null || $this.InvoiceProducts.indexOf(item) === -1) return;
        var _index = $this.InvoiceProducts.indexOf(item);
        $this.InvoiceProducts.splice(_index, 1);
        item.Invoice = null;
    }
    static clearInvoiceProducts = ($this) => {
        $this.InvoiceProducts = null;
    }
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.Invoice.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.Invoice.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Invoice.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        Order.addInvoices(item, $this);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Invoice.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        Order.removeInvoices(item, $this);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removeInvoices(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addInvoices(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class InvoiceProduct  {
    _originalTypeClassName = "DemonstratorApp.BO.InvoiceProduct";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Quantity:
    any;
Description:
    any;
UnitValue:
    any;
MeasurementUnit:
    any;
Price:
    any;
LineTotalPrice:
    any;
Invoice:
    any;
SupplierProduct:
    any;
    static setInvoice = ($this, value) => {
        var oldValue = $this.Invoice;
        $this.Invoice = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Invoice.removeInvoiceProducts(oldValue, $this);
            }
            DemonstratorApp.BO.Invoice.addInvoiceProducts(value, $this);
        }
    }
    static setSupplierProduct = ($this, value) => {
        var oldValue = $this.SupplierProduct;
        $this.SupplierProduct = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class LetterOfCredit  {
    _originalTypeClassName = "DemonstratorApp.BO.LetterOfCredit";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Orders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ValueOfLoC:
    any;
IssuingBank:
    any;
Detail:
    any;
UploadOfScan:
    any;
Calculated:
    any;
DateOfValidity:
    any;
DateOfExpiry:
    any;
Orders:
    any;
Transaction:
    any;
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.LetterOfCredit.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.LetterOfCredit.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.LetterOfCredit.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        Order.addLetterOfCredits(item, $this);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.LetterOfCredit.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        Order.removeLetterOfCredits(item, $this);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removeLetterOfCredits(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addLetterOfCredits(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class MeanOfTransport  {
    _originalTypeClassName = "DemonstratorApp.BO.MeanOfTransport";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LicensePlate:
    any;
ContainerId:
    any;
ShipId:
    any;
TrainId:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Order  {
    _originalTypeClassName = "DemonstratorApp.BO.Order";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.OrderProducts = [];
        this.ProofOfDeliveries = [];
        this.Invoices = [];
        this.DeliveryNotes = [];
        this.CreditNotes = [];
        this.OrderPayment = [];
        this.LetterOfCredits = [];
        this.BillOfLandings = [];
        this.Intermediaries = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrderNumber:
    any;
EstimatedDateOfDelivery:
    any;
PaymentTerms:
    any;
IntermediateParty:
    any;
IsCancelled:
    any;
DateOfOrder:
    any;
OrderAmount:
    any;
TotalPrice:
    any;
From:
    any;
DeliveryTo:
    any;
OrderAttachment:
    any;
Status:
    any;
CommercialAgreement:
    any;
OrderProducts:
    any;
ProofOfDeliveries:
    any;
Invoices:
    any;
DeliveryNotes:
    any;
OrderStatus:
    any;
FinalAcceptanceCertificate:
    any;
CreditNotes:
    any;
OrderPayment:
    any;
LetterOfCredits:
    any;
BillOfLandings:
    any;
Intermediaries:
    any;
Transaction:
    any;
    static setCommercialAgreement = ($this, value) => {
        var oldValue = $this.CommercialAgreement;
        $this.CommercialAgreement = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.CommercialAgreement.removeOrders(oldValue, $this);
            }
            DemonstratorApp.BO.CommercialAgreement.addOrders(value, $this);
        }
    }
    static setOrderProducts = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrderProducts == null) $this.OrderProducts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrderProducts.length > 0) {
            DemonstratorApp.BO.Order.removeOrderProducts($this, $this.OrderProducts[0]);
        }

        DemonstratorApp.BO.Order.addManyOrderProducts($this, copyItems);
    }
    static addManyOrderProducts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addOrderProducts($this, items[i]);
        }
    }
    static addOrderProducts = ($this, item) => {
        if ($this.OrderProducts == null) $this.OrderProducts = [];
        if (item == null || $this.OrderProducts.indexOf(item) > -1) return;
        $this.OrderProducts.push(item);
        if (item.Order != $this) {
            DemonstratorApp.BO.OrderProduct.setOrder(item, $this);
        }
    }
    static addRangeOrderProducts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addOrderProducts($this, item));
    }
    static removeOrderProducts = ($this, item) => {
        if ($this == null || $this.OrderProducts == null || $this.OrderProducts.indexOf(item) === -1) return;
        var _index = $this.OrderProducts.indexOf(item);
        $this.OrderProducts.splice(_index, 1);
        item.Order = null;
    }
    static clearOrderProducts = ($this) => {
        $this.OrderProducts = null;
    }
    static setProofOfDeliveries = ($this, items) => {
        if (items == null) items = [];
        if ($this.ProofOfDeliveries == null) $this.ProofOfDeliveries = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ProofOfDeliveries.length > 0) {
            DemonstratorApp.BO.Order.removeProofOfDeliveries($this, $this.ProofOfDeliveries[0]);
        }

        DemonstratorApp.BO.Order.addManyProofOfDeliveries($this, copyItems);
    }
    static addManyProofOfDeliveries = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addProofOfDeliveries($this, items[i]);
        }
    }
    static addProofOfDeliveries = ($this, item) => {
        if ($this.ProofOfDeliveries == null) $this.ProofOfDeliveries = [];
        if (item == null || $this.ProofOfDeliveries.indexOf(item) > -1) return;
        $this.ProofOfDeliveries.push(item);
        ProofOfDelivery.addOrders(item, $this);
    }
    static addRangeProofOfDeliveries = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addProofOfDeliveries($this, item));
    }
    static removeProofOfDeliveries = ($this, item) => {
        if ($this == null || $this.ProofOfDeliveries == null || $this.ProofOfDeliveries.indexOf(item) === -1) return;
        var _index = $this.ProofOfDeliveries.indexOf(item);
        $this.ProofOfDeliveries.splice(_index, 1);
        ProofOfDelivery.removeOrders(item, $this);
    }
    static clearProofOfDeliveries = ($this) => {
        $this.ProofOfDeliveries = null;
    }
    static setInvoices = ($this, items) => {
        if (items == null) items = [];
        if ($this.Invoices == null) $this.Invoices = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Invoices.length > 0) {
            DemonstratorApp.BO.Order.removeInvoices($this, $this.Invoices[0]);
        }

        DemonstratorApp.BO.Order.addManyInvoices($this, copyItems);
    }
    static addManyInvoices = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addInvoices($this, items[i]);
        }
    }
    static addInvoices = ($this, item) => {
        if ($this.Invoices == null) $this.Invoices = [];
        if (item == null || $this.Invoices.indexOf(item) > -1) return;
        $this.Invoices.push(item);
        Invoice.addOrders(item, $this);
    }
    static addRangeInvoices = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addInvoices($this, item));
    }
    static removeInvoices = ($this, item) => {
        if ($this == null || $this.Invoices == null || $this.Invoices.indexOf(item) === -1) return;
        var _index = $this.Invoices.indexOf(item);
        $this.Invoices.splice(_index, 1);
        Invoice.removeOrders(item, $this);
    }
    static clearInvoices = ($this) => {
        $this.Invoices = null;
    }
    static setDeliveryNotes = ($this, items) => {
        if (items == null) items = [];
        if ($this.DeliveryNotes == null) $this.DeliveryNotes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.DeliveryNotes.length > 0) {
            DemonstratorApp.BO.Order.removeDeliveryNotes($this, $this.DeliveryNotes[0]);
        }

        DemonstratorApp.BO.Order.addManyDeliveryNotes($this, copyItems);
    }
    static addManyDeliveryNotes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addDeliveryNotes($this, items[i]);
        }
    }
    static addDeliveryNotes = ($this, item) => {
        if ($this.DeliveryNotes == null) $this.DeliveryNotes = [];
        if (item == null || $this.DeliveryNotes.indexOf(item) > -1) return;
        $this.DeliveryNotes.push(item);
        DeliveryNote.addOrders(item, $this);
    }
    static addRangeDeliveryNotes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addDeliveryNotes($this, item));
    }
    static removeDeliveryNotes = ($this, item) => {
        if ($this == null || $this.DeliveryNotes == null || $this.DeliveryNotes.indexOf(item) === -1) return;
        var _index = $this.DeliveryNotes.indexOf(item);
        $this.DeliveryNotes.splice(_index, 1);
        DeliveryNote.removeOrders(item, $this);
    }
    static clearDeliveryNotes = ($this) => {
        $this.DeliveryNotes = null;
    }
    static setOrderStatus = ($this, value) => {
        var oldValue = $this.OrderStatus;
        $this.OrderStatus = value;
        if (value != null) {
        }
    }
    static setFinalAcceptanceCertificate = ($this, value) => {
        var oldValue = $this.FinalAcceptanceCertificate;
        $this.FinalAcceptanceCertificate = value;
        if (value != null) {
        }
    }
    static setCreditNotes = ($this, items) => {
        if (items == null) items = [];
        if ($this.CreditNotes == null) $this.CreditNotes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CreditNotes.length > 0) {
            DemonstratorApp.BO.Order.removeCreditNotes($this, $this.CreditNotes[0]);
        }

        DemonstratorApp.BO.Order.addManyCreditNotes($this, copyItems);
    }
    static addManyCreditNotes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addCreditNotes($this, items[i]);
        }
    }
    static addCreditNotes = ($this, item) => {
        if ($this.CreditNotes == null) $this.CreditNotes = [];
        if (item == null || $this.CreditNotes.indexOf(item) > -1) return;
        $this.CreditNotes.push(item);
        CreditNote.addOrders(item, $this);
    }
    static addRangeCreditNotes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addCreditNotes($this, item));
    }
    static removeCreditNotes = ($this, item) => {
        if ($this == null || $this.CreditNotes == null || $this.CreditNotes.indexOf(item) === -1) return;
        var _index = $this.CreditNotes.indexOf(item);
        $this.CreditNotes.splice(_index, 1);
        CreditNote.removeOrders(item, $this);
    }
    static clearCreditNotes = ($this) => {
        $this.CreditNotes = null;
    }
    static setOrderPayment = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrderPayment == null) $this.OrderPayment = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrderPayment.length > 0) {
            DemonstratorApp.BO.Order.removeOrderPayment($this, $this.OrderPayment[0]);
        }

        DemonstratorApp.BO.Order.addManyOrderPayment($this, copyItems);
    }
    static addManyOrderPayment = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addOrderPayment($this, items[i]);
        }
    }
    static addOrderPayment = ($this, item) => {
        if ($this.OrderPayment == null) $this.OrderPayment = [];
        if (item == null || $this.OrderPayment.indexOf(item) > -1) return;
        $this.OrderPayment.push(item);
        if (item.Order != $this) {
            DemonstratorApp.BO.OrderPayment.setOrder(item, $this);
        }
    }
    static addRangeOrderPayment = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addOrderPayment($this, item));
    }
    static removeOrderPayment = ($this, item) => {
        if ($this == null || $this.OrderPayment == null || $this.OrderPayment.indexOf(item) === -1) return;
        var _index = $this.OrderPayment.indexOf(item);
        $this.OrderPayment.splice(_index, 1);
        item.Order = null;
    }
    static clearOrderPayment = ($this) => {
        $this.OrderPayment = null;
    }
    static setLetterOfCredits = ($this, items) => {
        if (items == null) items = [];
        if ($this.LetterOfCredits == null) $this.LetterOfCredits = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.LetterOfCredits.length > 0) {
            DemonstratorApp.BO.Order.removeLetterOfCredits($this, $this.LetterOfCredits[0]);
        }

        DemonstratorApp.BO.Order.addManyLetterOfCredits($this, copyItems);
    }
    static addManyLetterOfCredits = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addLetterOfCredits($this, items[i]);
        }
    }
    static addLetterOfCredits = ($this, item) => {
        if ($this.LetterOfCredits == null) $this.LetterOfCredits = [];
        if (item == null || $this.LetterOfCredits.indexOf(item) > -1) return;
        $this.LetterOfCredits.push(item);
        LetterOfCredit.addOrders(item, $this);
    }
    static addRangeLetterOfCredits = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addLetterOfCredits($this, item));
    }
    static removeLetterOfCredits = ($this, item) => {
        if ($this == null || $this.LetterOfCredits == null || $this.LetterOfCredits.indexOf(item) === -1) return;
        var _index = $this.LetterOfCredits.indexOf(item);
        $this.LetterOfCredits.splice(_index, 1);
        LetterOfCredit.removeOrders(item, $this);
    }
    static clearLetterOfCredits = ($this) => {
        $this.LetterOfCredits = null;
    }
    static setBillOfLandings = ($this, items) => {
        if (items == null) items = [];
        if ($this.BillOfLandings == null) $this.BillOfLandings = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.BillOfLandings.length > 0) {
            DemonstratorApp.BO.Order.removeBillOfLandings($this, $this.BillOfLandings[0]);
        }

        DemonstratorApp.BO.Order.addManyBillOfLandings($this, copyItems);
    }
    static addManyBillOfLandings = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addBillOfLandings($this, items[i]);
        }
    }
    static addBillOfLandings = ($this, item) => {
        if ($this.BillOfLandings == null) $this.BillOfLandings = [];
        if (item == null || $this.BillOfLandings.indexOf(item) > -1) return;
        $this.BillOfLandings.push(item);
        BillOfLanding.addOrders(item, $this);
    }
    static addRangeBillOfLandings = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addBillOfLandings($this, item));
    }
    static removeBillOfLandings = ($this, item) => {
        if ($this == null || $this.BillOfLandings == null || $this.BillOfLandings.indexOf(item) === -1) return;
        var _index = $this.BillOfLandings.indexOf(item);
        $this.BillOfLandings.splice(_index, 1);
        BillOfLanding.removeOrders(item, $this);
    }
    static clearBillOfLandings = ($this) => {
        $this.BillOfLandings = null;
    }
    static setIntermediaries = ($this, items) => {
        if (items == null) items = [];
        if ($this.Intermediaries == null) $this.Intermediaries = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Intermediaries.length > 0) {
            DemonstratorApp.BO.Order.removeIntermediaries($this, $this.Intermediaries[0]);
        }

        DemonstratorApp.BO.Order.addManyIntermediaries($this, copyItems);
    }
    static addManyIntermediaries = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Order.addIntermediaries($this, items[i]);
        }
    }
    static addIntermediaries = ($this, item) => {
        if ($this.Intermediaries == null) $this.Intermediaries = [];
        if (item == null || $this.Intermediaries.indexOf(item) > -1) return;
        $this.Intermediaries.push(item);
        Intermediary.addOrders(item, $this);
    }
    static addRangeIntermediaries = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Order.addIntermediaries($this, item));
    }
    static removeIntermediaries = ($this, item) => {
        if ($this == null || $this.Intermediaries == null || $this.Intermediaries.indexOf(item) === -1) return;
        var _index = $this.Intermediaries.indexOf(item);
        $this.Intermediaries.splice(_index, 1);
        Intermediary.removeOrders(item, $this);
    }
    static clearIntermediaries = ($this) => {
        $this.Intermediaries = null;
    }
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removeOrders(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addOrders(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderStatus  {
    _originalTypeClassName = "DemonstratorApp.BO.OrderStatus";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrderdDateOccured:
    any;
Status:
    any;
PaymentStatus:
    any;
InitialOrdered:
    any;
FinalOrdered:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CreditNote  {
    _originalTypeClassName = "DemonstratorApp.BO.CreditNote";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Orders = [];
        this.CreditNoteProducts = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CreditNoteNumber:
    any;
Description:
    any;
DateIssued:
    any;
Amount:
    any;
TotalPrice:
    any;
CreditNoteDocument:
    any;
CNoteAttachment:
    any;
Status:
    any;
Orders:
    any;
CreditNoteProducts:
    any;
Transaction:
    any;
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.CreditNote.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.CreditNote.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.CreditNote.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        Order.addCreditNotes(item, $this);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.CreditNote.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        Order.removeCreditNotes(item, $this);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setCreditNoteProducts = ($this, items) => {
        if (items == null) items = [];
        if ($this.CreditNoteProducts == null) $this.CreditNoteProducts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CreditNoteProducts.length > 0) {
            DemonstratorApp.BO.CreditNote.removeCreditNoteProducts($this, $this.CreditNoteProducts[0]);
        }

        DemonstratorApp.BO.CreditNote.addManyCreditNoteProducts($this, copyItems);
    }
    static addManyCreditNoteProducts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.CreditNote.addCreditNoteProducts($this, items[i]);
        }
    }
    static addCreditNoteProducts = ($this, item) => {
        if ($this.CreditNoteProducts == null) $this.CreditNoteProducts = [];
        if (item == null || $this.CreditNoteProducts.indexOf(item) > -1) return;
        $this.CreditNoteProducts.push(item);
        if (item.CreditNote != $this) {
            DemonstratorApp.BO.CreditNoteProduct.setCreditNote(item, $this);
        }
    }
    static addRangeCreditNoteProducts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.CreditNote.addCreditNoteProducts($this, item));
    }
    static removeCreditNoteProducts = ($this, item) => {
        if ($this == null || $this.CreditNoteProducts == null || $this.CreditNoteProducts.indexOf(item) === -1) return;
        var _index = $this.CreditNoteProducts.indexOf(item);
        $this.CreditNoteProducts.splice(_index, 1);
        item.CreditNote = null;
    }
    static clearCreditNoteProducts = ($this) => {
        $this.CreditNoteProducts = null;
    }
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removeCreditNotes(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addCreditNotes(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderPayment  {
    _originalTypeClassName = "DemonstratorApp.BO.OrderPayment";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
PaymentAmount:
    any;
DateIssued:
    any;
Order:
    any;
    static setOrder = ($this, value) => {
        var oldValue = $this.Order;
        $this.Order = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Order.removeOrderPayment(oldValue, $this);
            }
            DemonstratorApp.BO.Order.addOrderPayment(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderProduct  {
    _originalTypeClassName = "DemonstratorApp.BO.OrderProduct";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Quantity:
    any;
Description:
    any;
UnitValue:
    any;
MeasurementUnit:
    any;
Price:
    any;
LineTotalPrice:
    any;
Order:
    any;
SupplierProduct:
    any;
    static setOrder = ($this, value) => {
        var oldValue = $this.Order;
        $this.Order = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Order.removeOrderProducts(oldValue, $this);
            }
            DemonstratorApp.BO.Order.addOrderProducts(value, $this);
        }
    }
    static setSupplierProduct = ($this, value) => {
        var oldValue = $this.SupplierProduct;
        $this.SupplierProduct = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Payment  {
    _originalTypeClassName = "DemonstratorApp.BO.Payment";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
PaymentMethod:
    any;
CardholderName:
    any;
CardNumber:
    any;
CCV:
    any;
ExpirationMonth:
    any;
ExpirationYear:
    any;
IBANNumber:
    any;
BankName:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProofOfDelivery  {
    _originalTypeClassName = "DemonstratorApp.BO.ProofOfDelivery";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Orders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
PODNumber:
    any;
DateIssued:
    any;
QualityStatus:
    any;
QuantityStatus:
    any;
DeliveryStatus:
    any;
PODAttachment:
    any;
Comments:
    any;
Orders:
    any;
Transaction:
    any;
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.ProofOfDelivery.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.ProofOfDelivery.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ProofOfDelivery.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        Order.addProofOfDeliveries(item, $this);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ProofOfDelivery.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        Order.removeProofOfDeliveries(item, $this);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setTransaction = ($this, value) => {
        var oldValue = $this.Transaction;
        $this.Transaction = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Transaction.removeProofOfDeliveries(oldValue, $this);
            }
            DemonstratorApp.BO.Transaction.addProofOfDeliveries(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierBusinessStructureData  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierBusinessStructureData";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
NumOfCustomersD:
    any;
NumOfCustomersAbroad:
    any;
NumOfCustomersEU:
    any;
NumOfCustomers:
    any;
ThereofActiveD:
    any;
ThereofActiveAbroad:
    any;
ThereofActiveEU:
    any;
ThereofActive:
    any;
NumOfOccasionalCustD:
    any;
NumOfOccasionalCustAbroad:
    any;
NumOfOccasionalCustEU:
    any;
NumOfOccasionalCust:
    any;
NumOpenBalanceD:
    any;
NumOpenBalanceAboad:
    any;
NumOpenBalanceEU:
    any;
NumOpenBalance:
    any;
NumOfInvoicesD:
    any;
NumOfInvoicesAbroad:
    any;
NumOfInvoicesEU:
    any;
NumOfInvoices:
    any;
NumOfEmployeesD:
    any;
NumOfEmployeesAbroad:
    any;
NumTransCustD:
    any;
NumTransCustAbroad:
    any;
NumTransCustEU:
    any;
NumTransCust:
    any;
ApplicableCommercialLaw:
    any;
Jurisdiction:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierReceivables  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierReceivables";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DomesticCustomersPresent:
    any;
DomesticCustomersPrior:
    any;
EUCustomersPresent:
    any;
EUCustomersPrior:
    any;
ThirdCountryCustomersPresent:
    any;
ThirdCountryCustomersPrior:
    any;
WillUploadFiles:
    any;
TotalPrior:
    any;
TotalPresent:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierContactInformation  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierContactInformation";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ContactPerson:
    any;
AddressOne:
    any;
AddressTwo:
    any;
Telephone:
    any;
Email:
    any;
ManagingDirector:
    any;
EstablishedIn:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierTurnover  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierTurnover";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
PlannedCurrentYear:
    any;
PlannedCurrentYearD:
    any;
PlannedCurrentYearEU:
    any;
PlannedCurrentYearAbroad:
    any;
PlannedNextYear:
    any;
PlannedNextYearD:
    any;
PlannedNextYearEU:
    any;
PlannedNextYearAbroad:
    any;
ActualPreviousYear:
    any;
ActualPreviousYearAbroad:
    any;
ActualPreviousYearD:
    any;
ActualPreviousYearEU:
    any;
PercentageD:
    any;
PercentageEU:
    any;
PercentageAbroad:
    any;
PercentageCND:
    any;
PercentageCNEU:
    any;
PercentageCNAbroad:
    any;
PercentageSales:
    any;
PercentageCN:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierExtraInformation  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierExtraInformation";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OccurenceBadDebts:
    any;
ExistenceCounterClaims:
    any;
HasCompanyAssigned:
    any;
AreCompanyReceivables:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierUploads  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierUploads";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Path:
    any;
Supplier:
    any;
Supplier2:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Supplier.removeFinancialStatements(oldValue, $this);
            }
            DemonstratorApp.BO.Supplier.addFinancialStatements(value, $this);
        }
    }
    static setSupplier2 = ($this, value) => {
        var oldValue = $this.Supplier2;
        $this.Supplier2 = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Supplier.removeEconomicEvaluations(oldValue, $this);
            }
            DemonstratorApp.BO.Supplier.addEconomicEvaluations(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierEvaluation  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierEvaluation";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Environment:
    any;
ContractualPaymentTerms:
    any;
Average:
    any;
AverageInvoiceValue:
    any;
EquityRatio:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DataQuality  {
    _originalTypeClassName = "DemonstratorApp.BO.DataQuality";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Orders:
    any;
DeliveryNotes:
    any;
CustomsDocuments:
    any;
IntermediaryLogistics:
    any;
Invoices:
    any;
PoDs:
    any;
PaymentData:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DataAvailability  {
    _originalTypeClassName = "DemonstratorApp.BO.DataAvailability";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Orders:
    any;
DeliveryNotes:
    any;
CustomsDocuments:
    any;
IntermediaryLogistics:
    any;
Invoices:
    any;
PoDs:
    any;
PaymentData:
    any;
Supplier:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
            if (oldValue != null && oldValue.DataAvailability != null) {
                oldValue.DataAvailability = null;
            }
            if ($this.Supplier.DataAvailability !== $this) {
                DemonstratorApp.BO.Supplier.setDataAvailability(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class SupplierProduct  {
    _originalTypeClassName = "DemonstratorApp.BO.SupplierProduct";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Description:
    any;
UnitValue:
    any;
MeasurementUnit:
    any;
Price:
    any;
ProductCategory:
    any;
Supplier:
    any;
    static setProductCategory = ($this, value) => {
        var oldValue = $this.ProductCategory;
        $this.ProductCategory = value;
        if (value != null) {
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Supplier.removeSupplierProducts(oldValue, $this);
            }
            DemonstratorApp.BO.Supplier.addSupplierProducts(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProductCategory  {
    _originalTypeClassName = "DemonstratorApp.BO.ProductCategory";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Type:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Transaction  {
    _originalTypeClassName = "DemonstratorApp.BO.Transaction";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Orders = [];
        this.CreditNotes = [];
        this.DeliveryNotes = [];
        this.Invoices = [];
        this.ProofOfDeliveries = [];
        this.LetterOfCredits = [];
        this.Intermediaries = [];
        this.PartialProofOfDeliveries = [];
        this.CustomsClearingDocumentations = [];
        this.BillOfLandings = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TransactionDateOccured:
    any;
TransactionValue:
    any;
FundedAmount:
    any;
ToBePaidAmount:
    any;
InvoicedDate:
    any;
PaymentStatus:
    any;
PaymentDate:
    any;
RestPaymentAmount:
    any;
PaidByBuyer:
    any;
CommercialAgreement:
    any;
Orders:
    any;
CreditNotes:
    any;
DeliveryNotes:
    any;
Invoices:
    any;
ProofOfDeliveries:
    any;
TransactionStatus:
    any;
Supplier:
    any;
ImportedBuyer:
    any;
LetterOfCredits:
    any;
Intermediaries:
    any;
PartialProofOfDeliveries:
    any;
CustomsClearingDocumentations:
    any;
BillOfLandings:
    any;
TransactionOverview:
    any;
    static setCommercialAgreement = ($this, value) => {
        var oldValue = $this.CommercialAgreement;
        $this.CommercialAgreement = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.CommercialAgreement.removeTransactions(oldValue, $this);
            }
            DemonstratorApp.BO.CommercialAgreement.addTransactions(value, $this);
        }
    }
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DemonstratorApp.BO.Transaction.removeOrders($this, $this.Orders[0]);
        }

        DemonstratorApp.BO.Transaction.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.Order.setTransaction(item, $this);
        }
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
        item.Transaction = null;
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static setCreditNotes = ($this, items) => {
        if (items == null) items = [];
        if ($this.CreditNotes == null) $this.CreditNotes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CreditNotes.length > 0) {
            DemonstratorApp.BO.Transaction.removeCreditNotes($this, $this.CreditNotes[0]);
        }

        DemonstratorApp.BO.Transaction.addManyCreditNotes($this, copyItems);
    }
    static addManyCreditNotes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addCreditNotes($this, items[i]);
        }
    }
    static addCreditNotes = ($this, item) => {
        if ($this.CreditNotes == null) $this.CreditNotes = [];
        if (item == null || $this.CreditNotes.indexOf(item) > -1) return;
        $this.CreditNotes.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.CreditNote.setTransaction(item, $this);
        }
    }
    static addRangeCreditNotes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addCreditNotes($this, item));
    }
    static removeCreditNotes = ($this, item) => {
        if ($this == null || $this.CreditNotes == null || $this.CreditNotes.indexOf(item) === -1) return;
        var _index = $this.CreditNotes.indexOf(item);
        $this.CreditNotes.splice(_index, 1);
        item.Transaction = null;
    }
    static clearCreditNotes = ($this) => {
        $this.CreditNotes = null;
    }
    static setDeliveryNotes = ($this, items) => {
        if (items == null) items = [];
        if ($this.DeliveryNotes == null) $this.DeliveryNotes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.DeliveryNotes.length > 0) {
            DemonstratorApp.BO.Transaction.removeDeliveryNotes($this, $this.DeliveryNotes[0]);
        }

        DemonstratorApp.BO.Transaction.addManyDeliveryNotes($this, copyItems);
    }
    static addManyDeliveryNotes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addDeliveryNotes($this, items[i]);
        }
    }
    static addDeliveryNotes = ($this, item) => {
        if ($this.DeliveryNotes == null) $this.DeliveryNotes = [];
        if (item == null || $this.DeliveryNotes.indexOf(item) > -1) return;
        $this.DeliveryNotes.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.DeliveryNote.setTransaction(item, $this);
        }
    }
    static addRangeDeliveryNotes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addDeliveryNotes($this, item));
    }
    static removeDeliveryNotes = ($this, item) => {
        if ($this == null || $this.DeliveryNotes == null || $this.DeliveryNotes.indexOf(item) === -1) return;
        var _index = $this.DeliveryNotes.indexOf(item);
        $this.DeliveryNotes.splice(_index, 1);
        item.Transaction = null;
    }
    static clearDeliveryNotes = ($this) => {
        $this.DeliveryNotes = null;
    }
    static setInvoices = ($this, items) => {
        if (items == null) items = [];
        if ($this.Invoices == null) $this.Invoices = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Invoices.length > 0) {
            DemonstratorApp.BO.Transaction.removeInvoices($this, $this.Invoices[0]);
        }

        DemonstratorApp.BO.Transaction.addManyInvoices($this, copyItems);
    }
    static addManyInvoices = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addInvoices($this, items[i]);
        }
    }
    static addInvoices = ($this, item) => {
        if ($this.Invoices == null) $this.Invoices = [];
        if (item == null || $this.Invoices.indexOf(item) > -1) return;
        $this.Invoices.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.Invoice.setTransaction(item, $this);
        }
    }
    static addRangeInvoices = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addInvoices($this, item));
    }
    static removeInvoices = ($this, item) => {
        if ($this == null || $this.Invoices == null || $this.Invoices.indexOf(item) === -1) return;
        var _index = $this.Invoices.indexOf(item);
        $this.Invoices.splice(_index, 1);
        item.Transaction = null;
    }
    static clearInvoices = ($this) => {
        $this.Invoices = null;
    }
    static setProofOfDeliveries = ($this, items) => {
        if (items == null) items = [];
        if ($this.ProofOfDeliveries == null) $this.ProofOfDeliveries = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ProofOfDeliveries.length > 0) {
            DemonstratorApp.BO.Transaction.removeProofOfDeliveries($this, $this.ProofOfDeliveries[0]);
        }

        DemonstratorApp.BO.Transaction.addManyProofOfDeliveries($this, copyItems);
    }
    static addManyProofOfDeliveries = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addProofOfDeliveries($this, items[i]);
        }
    }
    static addProofOfDeliveries = ($this, item) => {
        if ($this.ProofOfDeliveries == null) $this.ProofOfDeliveries = [];
        if (item == null || $this.ProofOfDeliveries.indexOf(item) > -1) return;
        $this.ProofOfDeliveries.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.ProofOfDelivery.setTransaction(item, $this);
        }
    }
    static addRangeProofOfDeliveries = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addProofOfDeliveries($this, item));
    }
    static removeProofOfDeliveries = ($this, item) => {
        if ($this == null || $this.ProofOfDeliveries == null || $this.ProofOfDeliveries.indexOf(item) === -1) return;
        var _index = $this.ProofOfDeliveries.indexOf(item);
        $this.ProofOfDeliveries.splice(_index, 1);
        item.Transaction = null;
    }
    static clearProofOfDeliveries = ($this) => {
        $this.ProofOfDeliveries = null;
    }
    static setTransactionStatus = ($this, value) => {
        var oldValue = $this.TransactionStatus;
        $this.TransactionStatus = value;
        if (value != null) {
        }
    }
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Supplier.removeTransactions(oldValue, $this);
            }
            DemonstratorApp.BO.Supplier.addTransactions(value, $this);
        }
    }
    static setImportedBuyer = ($this, value) => {
        var oldValue = $this.ImportedBuyer;
        $this.ImportedBuyer = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.ImportedBuyer.removeTransactions(oldValue, $this);
            }
            DemonstratorApp.BO.ImportedBuyer.addTransactions(value, $this);
        }
    }
    static setLetterOfCredits = ($this, items) => {
        if (items == null) items = [];
        if ($this.LetterOfCredits == null) $this.LetterOfCredits = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.LetterOfCredits.length > 0) {
            DemonstratorApp.BO.Transaction.removeLetterOfCredits($this, $this.LetterOfCredits[0]);
        }

        DemonstratorApp.BO.Transaction.addManyLetterOfCredits($this, copyItems);
    }
    static addManyLetterOfCredits = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addLetterOfCredits($this, items[i]);
        }
    }
    static addLetterOfCredits = ($this, item) => {
        if ($this.LetterOfCredits == null) $this.LetterOfCredits = [];
        if (item == null || $this.LetterOfCredits.indexOf(item) > -1) return;
        $this.LetterOfCredits.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.LetterOfCredit.setTransaction(item, $this);
        }
    }
    static addRangeLetterOfCredits = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addLetterOfCredits($this, item));
    }
    static removeLetterOfCredits = ($this, item) => {
        if ($this == null || $this.LetterOfCredits == null || $this.LetterOfCredits.indexOf(item) === -1) return;
        var _index = $this.LetterOfCredits.indexOf(item);
        $this.LetterOfCredits.splice(_index, 1);
        item.Transaction = null;
    }
    static clearLetterOfCredits = ($this) => {
        $this.LetterOfCredits = null;
    }
    static setIntermediaries = ($this, items) => {
        if (items == null) items = [];
        if ($this.Intermediaries == null) $this.Intermediaries = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Intermediaries.length > 0) {
            DemonstratorApp.BO.Transaction.removeIntermediaries($this, $this.Intermediaries[0]);
        }

        DemonstratorApp.BO.Transaction.addManyIntermediaries($this, copyItems);
    }
    static addManyIntermediaries = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addIntermediaries($this, items[i]);
        }
    }
    static addIntermediaries = ($this, item) => {
        if ($this.Intermediaries == null) $this.Intermediaries = [];
        if (item == null || $this.Intermediaries.indexOf(item) > -1) return;
        $this.Intermediaries.push(item);
        Intermediary.addTransactions(item, $this);
    }
    static addRangeIntermediaries = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addIntermediaries($this, item));
    }
    static removeIntermediaries = ($this, item) => {
        if ($this == null || $this.Intermediaries == null || $this.Intermediaries.indexOf(item) === -1) return;
        var _index = $this.Intermediaries.indexOf(item);
        $this.Intermediaries.splice(_index, 1);
        Intermediary.removeTransactions(item, $this);
    }
    static clearIntermediaries = ($this) => {
        $this.Intermediaries = null;
    }
    static setPartialProofOfDeliveries = ($this, items) => {
        if (items == null) items = [];
        if ($this.PartialProofOfDeliveries == null) $this.PartialProofOfDeliveries = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PartialProofOfDeliveries.length > 0) {
            DemonstratorApp.BO.Transaction.removePartialProofOfDeliveries($this, $this.PartialProofOfDeliveries[0]);
        }

        DemonstratorApp.BO.Transaction.addManyPartialProofOfDeliveries($this, copyItems);
    }
    static addManyPartialProofOfDeliveries = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addPartialProofOfDeliveries($this, items[i]);
        }
    }
    static addPartialProofOfDeliveries = ($this, item) => {
        if ($this.PartialProofOfDeliveries == null) $this.PartialProofOfDeliveries = [];
        if (item == null || $this.PartialProofOfDeliveries.indexOf(item) > -1) return;
        $this.PartialProofOfDeliveries.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.PartialProofOfDelivery.setTransaction(item, $this);
        }
    }
    static addRangePartialProofOfDeliveries = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addPartialProofOfDeliveries($this, item));
    }
    static removePartialProofOfDeliveries = ($this, item) => {
        if ($this == null || $this.PartialProofOfDeliveries == null || $this.PartialProofOfDeliveries.indexOf(item) === -1) return;
        var _index = $this.PartialProofOfDeliveries.indexOf(item);
        $this.PartialProofOfDeliveries.splice(_index, 1);
        item.Transaction = null;
    }
    static clearPartialProofOfDeliveries = ($this) => {
        $this.PartialProofOfDeliveries = null;
    }
    static setCustomsClearingDocumentations = ($this, items) => {
        if (items == null) items = [];
        if ($this.CustomsClearingDocumentations == null) $this.CustomsClearingDocumentations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CustomsClearingDocumentations.length > 0) {
            DemonstratorApp.BO.Transaction.removeCustomsClearingDocumentations($this, $this.CustomsClearingDocumentations[0]);
        }

        DemonstratorApp.BO.Transaction.addManyCustomsClearingDocumentations($this, copyItems);
    }
    static addManyCustomsClearingDocumentations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addCustomsClearingDocumentations($this, items[i]);
        }
    }
    static addCustomsClearingDocumentations = ($this, item) => {
        if ($this.CustomsClearingDocumentations == null) $this.CustomsClearingDocumentations = [];
        if (item == null || $this.CustomsClearingDocumentations.indexOf(item) > -1) return;
        $this.CustomsClearingDocumentations.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.CustomsClearingDocumentation.setTransaction(item, $this);
        }
    }
    static addRangeCustomsClearingDocumentations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addCustomsClearingDocumentations($this, item));
    }
    static removeCustomsClearingDocumentations = ($this, item) => {
        if ($this == null || $this.CustomsClearingDocumentations == null || $this.CustomsClearingDocumentations.indexOf(item) === -1) return;
        var _index = $this.CustomsClearingDocumentations.indexOf(item);
        $this.CustomsClearingDocumentations.splice(_index, 1);
        item.Transaction = null;
    }
    static clearCustomsClearingDocumentations = ($this) => {
        $this.CustomsClearingDocumentations = null;
    }
    static setBillOfLandings = ($this, items) => {
        if (items == null) items = [];
        if ($this.BillOfLandings == null) $this.BillOfLandings = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.BillOfLandings.length > 0) {
            DemonstratorApp.BO.Transaction.removeBillOfLandings($this, $this.BillOfLandings[0]);
        }

        DemonstratorApp.BO.Transaction.addManyBillOfLandings($this, copyItems);
    }
    static addManyBillOfLandings = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Transaction.addBillOfLandings($this, items[i]);
        }
    }
    static addBillOfLandings = ($this, item) => {
        if ($this.BillOfLandings == null) $this.BillOfLandings = [];
        if (item == null || $this.BillOfLandings.indexOf(item) > -1) return;
        $this.BillOfLandings.push(item);
        if (item.Transaction != $this) {
            DemonstratorApp.BO.BillOfLanding.setTransaction(item, $this);
        }
    }
    static addRangeBillOfLandings = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Transaction.addBillOfLandings($this, item));
    }
    static removeBillOfLandings = ($this, item) => {
        if ($this == null || $this.BillOfLandings == null || $this.BillOfLandings.indexOf(item) === -1) return;
        var _index = $this.BillOfLandings.indexOf(item);
        $this.BillOfLandings.splice(_index, 1);
        item.Transaction = null;
    }
    static clearBillOfLandings = ($this) => {
        $this.BillOfLandings = null;
    }
    static setTransactionOverview = ($this, value) => {
        var oldValue = $this.TransactionOverview;
        $this.TransactionOverview = value;
        if (value != null) {
        }
    }
    static CalculateDataAvailability($this: any): any{if (CLMS.Framework.Number.GreaterThan(() => $this.Orders.length, () => 0)) {
    $this.Supplier.DataAvailability.Orders = true;
}

                                                 }
static Get_FundedAmount($this: any): any{let totalInv = 0;

                let total = 0;

                totalInv = Joove.Common.nullSafe<any>(() => $this.Invoices.linq.sum((a) => Joove.Common.nullSafe<any>(() => a.TotalPrice, 0)), 0);

                total = Joove.Common.safeNumber((Joove.Common.safeNumber(totalInv) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.CommercialAgreement.Agreement.FundedRate, 0)))) / Joove.Common.safeNumber(100);

                return (CLMS.Framework.Number.GreaterThan(() => $this.Invoices.length, () => 0) ? total : 0);

                                                }
        static Get_TransactionValue($this: any): any{return (CLMS.Framework.Number.GreaterThan(() => $this.Invoices.length, () => 0) ? Joove.Common.nullSafe<any>(() => $this.Invoices.linq.sum((a) => Joove.Common.nullSafe<any>(() => a.TotalPrice, 0)), 0) : 0);

                                                    }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TransactionStatus  {
    _originalTypeClassName = "DemonstratorApp.BO.TransactionStatus";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TransactionDateOccured:
    any;
Status:
    any;
Shipped:
    any;
Invoiced:
    any;
ShippedDateOccured:
    any;
InvoicedDateOccured:
    any;
Cancelled:
    any;
InTransit:
    any;
Picked:
    any;
PaymentStatus:
    any;
InitialOrderDate:
    any;
FinalOrderDate:
    any;
Delivered:
    any;
Ordered:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TransactionOverview  {
    _originalTypeClassName = "DemonstratorApp.BO.TransactionOverview";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DeliveryDate:
    any;
OrderQuantity:
    any;
OrderDate:
    any;
InvoiceId:
    any;
InvoiceDate:
    any;
FundedRate:
    any;
InterestRate:
    any;
TotalValue:
    any;
FundingValue:
    any;
PaymentId:
    any;
PayementDate:
    any;
CreditNoteNumber:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TransactionPayment  {
    _originalTypeClassName = "DemonstratorApp.BO.TransactionPayment";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Transactions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
PaymentAmount:
    any;
Receipt:
    any;
PaymentDate:
    any;
Transactions:
    any;
Agreement:
    any;
    static setTransactions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Transactions == null) $this.Transactions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Transactions.length > 0) {
            DemonstratorApp.BO.TransactionPayment.removeTransactions($this, $this.Transactions[0]);
        }

        DemonstratorApp.BO.TransactionPayment.addManyTransactions($this, copyItems);
    }
    static addManyTransactions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.TransactionPayment.addTransactions($this, items[i]);
        }
    }
    static addTransactions = ($this, item) => {
        if ($this.Transactions == null) $this.Transactions = [];
        if (item == null || $this.Transactions.indexOf(item) > -1) return;
        $this.Transactions.push(item);
    }
    static addRangeTransactions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.TransactionPayment.addTransactions($this, item));
    }
    static removeTransactions = ($this, item) => {
        if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1) return;
        var _index = $this.Transactions.indexOf(item);
        $this.Transactions.splice(_index, 1);
    }
    static clearTransactions = ($this) => {
        $this.Transactions = null;
    }
    static setAgreement = ($this, value) => {
        var oldValue = $this.Agreement;
        $this.Agreement = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Turnover  {
    _originalTypeClassName = "DemonstratorApp.BO.Turnover";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.TurnoverStatistics = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TurnoverStatistics:
    any;
    static setTurnoverStatistics = ($this, items) => {
        if (items == null) items = [];
        if ($this.TurnoverStatistics == null) $this.TurnoverStatistics = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.TurnoverStatistics.length > 0) {
            DemonstratorApp.BO.Turnover.removeTurnoverStatistics($this, $this.TurnoverStatistics[0]);
        }

        DemonstratorApp.BO.Turnover.addManyTurnoverStatistics($this, copyItems);
    }
    static addManyTurnoverStatistics = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Turnover.addTurnoverStatistics($this, items[i]);
        }
    }
    static addTurnoverStatistics = ($this, item) => {
        if ($this.TurnoverStatistics == null) $this.TurnoverStatistics = [];
        if (item == null || $this.TurnoverStatistics.indexOf(item) > -1) return;
        $this.TurnoverStatistics.push(item);
    }
    static addRangeTurnoverStatistics = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Turnover.addTurnoverStatistics($this, item));
    }
    static removeTurnoverStatistics = ($this, item) => {
        if ($this == null || $this.TurnoverStatistics == null || $this.TurnoverStatistics.indexOf(item) === -1) return;
        var _index = $this.TurnoverStatistics.indexOf(item);
        $this.TurnoverStatistics.splice(_index, 1);
    }
    static clearTurnoverStatistics = ($this) => {
        $this.TurnoverStatistics = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TurnoverStatistic  {
    _originalTypeClassName = "DemonstratorApp.BO.TurnoverStatistic";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalAmount:
    any;
Year:
    any;
Month:
    any;
TotalAmountFunded:
    any;
TotalTransactions:
    any;
TotalCreditNotes:
    any;
CNAmount:
    any;
Supplier:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Preferences  {
    _originalTypeClassName = "DemonstratorApp.BO.Preferences";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Currency:
    any;
UnitOfMeasure:
    any;
Date:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Utils  {
    _originalTypeClassName = "DemonstratorApp.BO.Utils";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.UtilsKey = 0;
    }
UtilsKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UtilsKey == null || $this.UtilsKey == 0;
    }
}

export enum Status {
    Initial,
}

export class MapPoint  {
    _originalTypeClassName = "DemonstratorApp.BO.MapPoint";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Address:
    any;
Latitude:
    any;
Longitude:
    any;
Title:
    any;
Icon:
    any;
    static InitiOrderMapPoints(order: any): any{let mapPoints = [];

                let fromPoint = Joove.Common.nullSafe<any>(() => new DemonstratorApp.BO.MapPoint(), null);

                if ((!(Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => order.From, "")), false)))) {}

fromPoint.Address = Joove.Common.nullSafe<any>(() => order.From, "");

                    fromPoint.Title = "Shipping From";

                    fromPoint.Icon = "http://apps.zappdev.com/TomeFinance_1242_vvasilopoulos/resources/images/" + "industries.png";

                    Joove.Common.nullSafe<any>(() => mapPoints.add(fromPoint), null);

if ((Joove.Common.nullSafe<any>(() => order.IntermediateParty, false))) {
    for (let _ibol = 0; _ibol < (Joove.Common.nullSafe<any>(() => order.BillOfLandings, null) == null ? 0 : Joove.Common.nullSafe<any>(() => order.BillOfLandings, null).length); _ibol++) {
            var bol = Joove.Common.nullSafe<any>(() => order.BillOfLandings, null)[_ibol];
            if ((Joove.Common.nullSafe<any>(() => bol.LandingPlace, "") == Joove.Common.nullSafe<any>(() => order.From, ""))) {
                continue;
            }
            let intermediaryFromPoint = Joove.Common.nullSafe<any>(() => new DemonstratorApp.BO.MapPoint(), null);
            if ((!(Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => bol.LandingPlace, "")), false)))) {}
            intermediaryFromPoint.Address = Joove.Common.nullSafe<any>(() => bol.LandingPlace, "");
            intermediaryFromPoint.Icon = "transport.png";
            intermediaryFromPoint.Title = "Intermediary Landing Place";
            Joove.Common.nullSafe<any>(() => mapPoints.add(intermediaryFromPoint), null);
            if ((Joove.Common.nullSafe<any>(() => bol.DeliveryPlace, "") == Joove.Common.nullSafe<any>(() => order.DeliveryTo, ""))) {
                continue;
            }
            let intemediaryToPoint = Joove.Common.nullSafe<any>(() => new DemonstratorApp.BO.MapPoint(), null);
            if ((!(Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => bol.DeliveryPlace, "")), false)))) {}
            intemediaryToPoint.Address = Joove.Common.nullSafe<any>(() => bol.DeliveryPlace, "");
            intemediaryToPoint.Icon = "transport.png";
            intemediaryToPoint.Title = "Intermediary Delivery Place";
            Joove.Common.nullSafe<any>(() => mapPoints.add(intemediaryToPoint), null);
        }
    }

    let deliveryPoint = Joove.Common.nullSafe<any>(() => new DemonstratorApp.BO.MapPoint(), null);

    if ((!(Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(Joove.Common.nullSafe<any>(() => order.DeliveryTo, "")), false)))) {}

deliveryPoint.Address = Joove.Common.nullSafe<any>(() => order.DeliveryTo, "");

                        deliveryPoint.Title = "Delivery To";

                        deliveryPoint.Icon = "commercial-places.png";

                        Joove.Common.nullSafe<any>(() => mapPoints.add(deliveryPoint), null);

                        return mapPoints;

                                           }
static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PubSubManager  {
    _originalTypeClassName = "DemonstratorApp.BO.PubSubManager";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserAction  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
ActiveRoles:
    any;
ActivePermissions:
    any;
Action:
    any;
Controller:
    any;
Date:
    any;
ErrorMessage:
    any;
Success:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserExternalProfile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Gender:
    any;
Name:
    any;
Surname:
    any;
DisplayName:
    any;
Email:
    any;
Provider:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
IsCustom:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUser  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Permissions = [];
        this.Roles = [];
        this.Clients = [];
        this.Logins = [];
        this.Claims = [];
        this['_key'] = this.UserName = "";
    }
UserName:
    any;
PasswordHash:
    any;
SecurityStamp:
    any;
EmailConfirmed:
    any;
LockoutEnabled:
    any;
PhoneNumberConfirmed:
    any;
TwoFactorEnabled:
    any;
AccessFailedCount:
    any;
Name:
    any;
Email:
    any;
PhoneNumber:
    any;
LockoutEndDate:
    any;
Permissions:
    any;
Roles:
    any;
Clients:
    any;
Logins:
    any;
Claims:
    any;
Profile:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DemonstratorApp.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
        }

        DemonstratorApp.BO.ApplicationUser.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationUser.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addUsers(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationUser.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeUsers(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DemonstratorApp.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
        }

        DemonstratorApp.BO.ApplicationUser.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationUser.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addUsers(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationUser.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removeUsers(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setClients = ($this, items) => {
        if (items == null) items = [];
        if ($this.Clients == null) $this.Clients = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Clients.length > 0) {
            DemonstratorApp.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
        }

        DemonstratorApp.BO.ApplicationUser.addManyClients($this, copyItems);
    }
    static addManyClients = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationUser.addClients($this, items[i]);
        }
    }
    static addClients = ($this, item) => {
        if ($this.Clients == null) $this.Clients = [];
        if (item == null || $this.Clients.indexOf(item) > -1) return;
        $this.Clients.push(item);
        if (item.User != $this) {
            DemonstratorApp.BO.ApplicationClient.setUser(item, $this);
        }
    }
    static addRangeClients = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationUser.addClients($this, item));
    }
    static removeClients = ($this, item) => {
        if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1) return;
        var _index = $this.Clients.indexOf(item);
        $this.Clients.splice(_index, 1);
        item.User = null;
    }
    static clearClients = ($this) => {
        $this.Clients = null;
    }
    static setLogins = ($this, items) => {
        if (items == null) items = [];
        if ($this.Logins == null) $this.Logins = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Logins.length > 0) {
            DemonstratorApp.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
        }

        DemonstratorApp.BO.ApplicationUser.addManyLogins($this, copyItems);
    }
    static addManyLogins = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationUser.addLogins($this, items[i]);
        }
    }
    static addLogins = ($this, item) => {
        if ($this.Logins == null) $this.Logins = [];
        if (item == null || $this.Logins.indexOf(item) > -1) return;
        $this.Logins.push(item);
        if (item.User != $this) {
            DemonstratorApp.BO.ApplicationUserLogin.setUser(item, $this);
        }
    }
    static addRangeLogins = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationUser.addLogins($this, item));
    }
    static removeLogins = ($this, item) => {
        if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1) return;
        var _index = $this.Logins.indexOf(item);
        $this.Logins.splice(_index, 1);
        item.User = null;
    }
    static clearLogins = ($this) => {
        $this.Logins = null;
    }
    static setClaims = ($this, items) => {
        if (items == null) items = [];
        if ($this.Claims == null) $this.Claims = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Claims.length > 0) {
            DemonstratorApp.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
        }

        DemonstratorApp.BO.ApplicationUser.addManyClaims($this, copyItems);
    }
    static addManyClaims = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationUser.addClaims($this, items[i]);
        }
    }
    static addClaims = ($this, item) => {
        if ($this.Claims == null) $this.Claims = [];
        if (item == null || $this.Claims.indexOf(item) > -1) return;
        $this.Claims.push(item);
        if (item.User != $this) {
            DemonstratorApp.BO.ApplicationUserClaim.setUser(item, $this);
        }
    }
    static addRangeClaims = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationUser.addClaims($this, item));
    }
    static removeClaims = ($this, item) => {
        if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1) return;
        var _index = $this.Claims.indexOf(item);
        $this.Claims.splice(_index, 1);
        item.User = null;
    }
    static clearClaims = ($this) => {
        $this.Claims = null;
    }
    static setProfile = ($this, value) => {
        var oldValue = $this.Profile;
        $this.Profile = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class ApplicationRole  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Users = [];
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Permissions:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DemonstratorApp.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
        }

        DemonstratorApp.BO.ApplicationRole.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationRole.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addRoles(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationRole.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removeRoles(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DemonstratorApp.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
        }

        DemonstratorApp.BO.ApplicationRole.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationRole.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addRoles(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationRole.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeRoles(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationOperation  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
ParentControllerName:
    any;
Type:
    any;
IsAvailableToAnonymous:
    any;
IsAvailableToAllAuthorizedUsers:
    any;
Permissions:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DemonstratorApp.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
        }

        DemonstratorApp.BO.ApplicationOperation.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationOperation.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addOperations(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationOperation.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeOperations(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationPermission  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Users = [];
        this.Roles = [];
        this.Operations = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Roles:
    any;
Operations:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DemonstratorApp.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
        }

        DemonstratorApp.BO.ApplicationPermission.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationPermission.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addPermissions(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationPermission.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removePermissions(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DemonstratorApp.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
        }

        DemonstratorApp.BO.ApplicationPermission.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationPermission.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addPermissions(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationPermission.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removePermissions(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setOperations = ($this, items) => {
        if (items == null) items = [];
        if ($this.Operations == null) $this.Operations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Operations.length > 0) {
            DemonstratorApp.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
        }

        DemonstratorApp.BO.ApplicationPermission.addManyOperations($this, copyItems);
    }
    static addManyOperations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.ApplicationPermission.addOperations($this, items[i]);
        }
    }
    static addOperations = ($this, item) => {
        if ($this.Operations == null) $this.Operations = [];
        if (item == null || $this.Operations.indexOf(item) > -1) return;
        $this.Operations.push(item);
        ApplicationOperation.addPermissions(item, $this);
    }
    static addRangeOperations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.ApplicationPermission.addOperations($this, item));
    }
    static removeOperations = ($this, item) => {
        if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1) return;
        var _index = $this.Operations.indexOf(item);
        $this.Operations.splice(_index, 1);
        ApplicationOperation.removePermissions(item, $this);
    }
    static clearOperations = ($this) => {
        $this.Operations = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationClient  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClientKey:
    any;
IPAddress:
    any;
SessionId:
    any;
ConnectedOn:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.ApplicationUser.removeClients(oldValue, $this);
            }
            DemonstratorApp.BO.ApplicationUser.addClients(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserLogin  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LoginProvider:
    any;
ProviderKey:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.ApplicationUser.removeLogins(oldValue, $this);
            }
            DemonstratorApp.BO.ApplicationUser.addLogins(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserClaim  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClaimType:
    any;
ClaimValue:
    any;
ClaimValueType:
    any;
Issuer:
    any;
OriginalIssuer:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.ApplicationUser.removeClaims(oldValue, $this);
            }
            DemonstratorApp.BO.ApplicationUser.addClaims(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProfileSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
ParentProfile:
    any;
    static setParentProfile = ($this, value) => {
        var oldValue = $this.ParentProfile;
        $this.ParentProfile = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.Profile.removeSettings(oldValue, $this);
            }
            DemonstratorApp.BO.Profile.addSettings(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Profile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Settings = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LanguageLCID:
    any;
LocaleLCID:
    any;
Theme:
    any;
Settings:
    any;
    static setSettings = ($this, items) => {
        if (items == null) items = [];
        if ($this.Settings == null) $this.Settings = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Settings.length > 0) {
            DemonstratorApp.BO.Profile.removeSettings($this, $this.Settings[0]);
        }

        DemonstratorApp.BO.Profile.addManySettings($this, copyItems);
    }
    static addManySettings = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Profile.addSettings($this, items[i]);
        }
    }
    static addSettings = ($this, item) => {
        if ($this.Settings == null) $this.Settings = [];
        if (item == null || $this.Settings.indexOf(item) > -1) return;
        $this.Settings.push(item);
        if (item.ParentProfile != $this) {
            DemonstratorApp.BO.ProfileSetting.setParentProfile(item, $this);
        }
    }
    static addRangeSettings = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Profile.addSettings($this, item));
    }
    static removeSettings = ($this, item) => {
        if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1) return;
        var _index = $this.Settings.indexOf(item);
        $this.Settings.splice(_index, 1);
        item.ParentProfile = null;
    }
    static clearSettings = ($this) => {
        $this.Settings = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationLanguage  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Code:
    any;
Icon:
    any;
DateTimeFormat:
    any;
    static setDateTimeFormat = ($this, value) => {
        var oldValue = $this.DateTimeFormat;
        $this.DateTimeFormat = value;
        if (value != null) {
            if (oldValue != null && oldValue.ApplicationLanguage != null) {
                oldValue.ApplicationLanguage = null;
            }
            if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                DemonstratorApp.BO.DateTimeFormat.setApplicationLanguage(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DateTimeFormat  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LongDatePattern:
    any;
LongTimePattern:
    any;
MonthDayPattern:
    any;
RFC1123Pattern:
    any;
ShortDatePattern:
    any;
ShortTimePattern:
    any;
YearMonthPattern:
    any;
ApplicationLanguage:
    any;
    static setApplicationLanguage = ($this, value) => {
        var oldValue = $this.ApplicationLanguage;
        $this.ApplicationLanguage = value;
        if (value != null) {
            if (oldValue != null && oldValue.DateTimeFormat != null) {
                oldValue.DateTimeFormat = null;
            }
            if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                DemonstratorApp.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationTheme  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class FileData  {
    _originalTypeClassName = "DemonstratorApp.BO.FileData";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Id:
    any;
FileName:
    any;
FolderPath:
    any;
MaxFileSize:
    any;
AllowedExtensions:
    any;
Blob:
    any;
StorageMedium:
    any;
UploadedBy:
    any;
UploadDateTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export enum StorageMedium {
    FileSystem,
    DataBase,
}

export class AuditEntityConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Properties = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FullName:
    any;
ShortName:
    any;
Properties:
    any;
    static setProperties = ($this, items) => {
        if (items == null) items = [];
        if ($this.Properties == null) $this.Properties = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Properties.length > 0) {
            DemonstratorApp.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
        }

        DemonstratorApp.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
    }
    static addManyProperties = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.AuditEntityConfiguration.addProperties($this, items[i]);
        }
    }
    static addProperties = ($this, item) => {
        if ($this.Properties == null) $this.Properties = [];
        if (item == null || $this.Properties.indexOf(item) > -1) return;
        $this.Properties.push(item);
        if (item.Entity != $this) {
            DemonstratorApp.BO.AuditPropertyConfiguration.setEntity(item, $this);
        }
    }
    static addRangeProperties = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.AuditEntityConfiguration.addProperties($this, item));
    }
    static removeProperties = ($this, item) => {
        if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1) return;
        var _index = $this.Properties.indexOf(item);
        $this.Properties.splice(_index, 1);
        item.Entity = null;
    }
    static clearProperties = ($this) => {
        $this.Properties = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditPropertyConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
    Domain = DemonstratorApp.BO;
    constructor() {
        this.Entity = new this.Domain.AuditEntityConfiguration();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
DataType:
    any;
IsAuditable:
    any;
IsComplex:
    any;
IsCollection:
    any;
Entity:
    any;
    static setEntity = ($this, value) => {
        var oldValue = $this.Entity;
        $this.Entity = value;
        if (value != null) {
            if (oldValue != null) {
                DemonstratorApp.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
            }
            DemonstratorApp.BO.AuditEntityConfiguration.addProperties(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntry  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
IPAddress:
    any;
EntityFullName:
    any;
EntityShortName:
    any;
EntityId:
    any;
Timestamp:
    any;
EntryTypeId:
    any;
ActionTypeId:
    any;
OldValue:
    any;
NewValue:
    any;
PropertyName:
    any;
ExtraField1:
    any;
ExtraField2:
    any;
ExtraField3:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntryType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogPropertyActionType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum WorkflowStatus {
    None,
    Completed,
    Pending,
    Expired,
    Cancelled,
    Failed,
    StepToContinueNotFound,
}

export class WorkflowExecutionResult  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.WorkflowExecutionResultKey = 0;
    }
Status:
    any;
Context:
    any;
WorkflowExecutionResultKey:
    any;
    static setContext = ($this, value) => {
        var oldValue = $this.Context;
        $this.Context = value;
        if (value != null) {
            if (oldValue != null && oldValue.Result != null) {
                oldValue.Result = null;
            }
            if ($this.Context.Result !== $this) {
                DemonstratorApp.BO.WorkflowContextBase.setResult(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
    }
}

export class WorkflowContextBase  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Name:
    any;
Error:
    any;
Expires:
    any;
ExpirationDateTime:
    any;
PendingSince:
    any;
PendingJobCreatedBy:
    any;
PendingStep:
    any;
Id:
    any;
Status:
    any;
Result:
    any;
    static setResult = ($this, value) => {
        var oldValue = $this.Result;
        $this.Result = value;
        if (value != null) {
            if (oldValue != null && oldValue.Context != null) {
                oldValue.Context = null;
            }
            if ($this.Result.Context !== $this) {
                DemonstratorApp.BO.WorkflowExecutionResult.setContext(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export class WorkflowSchedule  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
    Domain = DemonstratorApp.BO;
    constructor() {
        this['_key'] = this.Workflow = "";
    }
Workflow:
    any;
Description:
    any;
StartDateTime:
    any;
ExpireOn:
    any;
CronExpression:
    any;
LastExecution:
    any;
LastExecutionMessage:
    any;
IsLastExecutionSuccess:
    any;
Active:
    any;
HumanReadableExpression:
    any;
NextExecutionTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Workflow == null || $this.Workflow == "";
    }
}

export class Buyer extends ApplicationUser {
    _originalTypeClassName = "DemonstratorApp.BO.Buyer";
    Domain = DemonstratorApp.BO;
    constructor() {
        super();
        this.CommercialAgreements = [];
        this['_key'] = this.UserName = "";
    }
BuyerId:
    any;
PrimaryPhone:
    any;
SecondaryPhone:
    any;
Fax:
    any;
WebSite:
    any;
Company:
    any;
AnnualTurnOver:
    any;
LegalRepresentative:
    any;
Rating:
    any;
CreditInsurance:
    any;
Logo:
    any;
AddressOne:
    any;
AddressTwo:
    any;
VatNumber:
    any;
ContactPerson:
    any;
Prefix:
    any;
Temp:
    any;
CommercialAgreements:
    any;
    static setCommercialAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.CommercialAgreements == null) $this.CommercialAgreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CommercialAgreements.length > 0) {
            DemonstratorApp.BO.Buyer.removeCommercialAgreements($this, $this.CommercialAgreements[0]);
        }

        DemonstratorApp.BO.Buyer.addManyCommercialAgreements($this, copyItems);
    }
    static addManyCommercialAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Buyer.addCommercialAgreements($this, items[i]);
        }
    }
    static addCommercialAgreements = ($this, item) => {
        if ($this.CommercialAgreements == null) $this.CommercialAgreements = [];
        if (item == null || $this.CommercialAgreements.indexOf(item) > -1) return;
        $this.CommercialAgreements.push(item);
        if (item.Buyer != $this) {
            DemonstratorApp.BO.CommercialAgreement.setBuyer(item, $this);
        }
    }
    static addRangeCommercialAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Buyer.addCommercialAgreements($this, item));
    }
    static removeCommercialAgreements = ($this, item) => {
        if ($this == null || $this.CommercialAgreements == null || $this.CommercialAgreements.indexOf(item) === -1) return;
        var _index = $this.CommercialAgreements.indexOf(item);
        $this.CommercialAgreements.splice(_index, 1);
        item.Buyer = null;
    }
    static clearCommercialAgreements = ($this) => {
        $this.CommercialAgreements = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class IntermediaryUser extends ApplicationUser {
    _originalTypeClassName = "DemonstratorApp.BO.IntermediaryUser";
    Domain = DemonstratorApp.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
Intermediary:
    any;
    static setIntermediary = ($this, value) => {
        var oldValue = $this.Intermediary;
        $this.Intermediary = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class Investor extends ApplicationUser {
    _originalTypeClassName = "DemonstratorApp.BO.Investor";
    Domain = DemonstratorApp.BO;
    constructor() {
        super();
        this.Agreements = [];
        this.AnnualTransactionVolumes = [];
        this['_key'] = this.UserName = "";
    }
InvestorId:
    any;
PrimaryPhone:
    any;
SecondaryPhone:
    any;
Fax:
    any;
WebSite:
    any;
Company:
    any;
ContactPerson:
    any;
Logo:
    any;
SupervisingAuthority:
    any;
RegistrationNo:
    any;
DomainFocus:
    any;
TurnOver:
    any;
VatNumber:
    any;
AddressTwo:
    any;
AddressOne:
    any;
ManagingDirector:
    any;
TargetMarket:
    any;
CustomerSizeFrom:
    any;
CustomerSizeTo:
    any;
LocalJurisdiction:
    any;
CommercialRegNo:
    any;
OtherMinRequirements:
    any;
CRR:
    any;
UploadCompliance:
    any;
OtherMemberships:
    any;
OtherDomainFocus:
    any;
InvestorStatus:
    any;
IAFC:
    any;
Prefix:
    any;
Agreements:
    any;
AnnualTransactionVolumes:
    any;
    static setAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Agreements == null) $this.Agreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Agreements.length > 0) {
            DemonstratorApp.BO.Investor.removeAgreements($this, $this.Agreements[0]);
        }

        DemonstratorApp.BO.Investor.addManyAgreements($this, copyItems);
    }
    static addManyAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Investor.addAgreements($this, items[i]);
        }
    }
    static addAgreements = ($this, item) => {
        if ($this.Agreements == null) $this.Agreements = [];
        if (item == null || $this.Agreements.indexOf(item) > -1) return;
        $this.Agreements.push(item);
        if (item.Investor != $this) {
            DemonstratorApp.BO.Agreement.setInvestor(item, $this);
        }
    }
    static addRangeAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Investor.addAgreements($this, item));
    }
    static removeAgreements = ($this, item) => {
        if ($this == null || $this.Agreements == null || $this.Agreements.indexOf(item) === -1) return;
        var _index = $this.Agreements.indexOf(item);
        $this.Agreements.splice(_index, 1);
        item.Investor = null;
    }
    static clearAgreements = ($this) => {
        $this.Agreements = null;
    }
    static setAnnualTransactionVolumes = ($this, items) => {
        if (items == null) items = [];
        if ($this.AnnualTransactionVolumes == null) $this.AnnualTransactionVolumes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AnnualTransactionVolumes.length > 0) {
            DemonstratorApp.BO.Investor.removeAnnualTransactionVolumes($this, $this.AnnualTransactionVolumes[0]);
        }

        DemonstratorApp.BO.Investor.addManyAnnualTransactionVolumes($this, copyItems);
    }
    static addManyAnnualTransactionVolumes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Investor.addAnnualTransactionVolumes($this, items[i]);
        }
    }
    static addAnnualTransactionVolumes = ($this, item) => {
        if ($this.AnnualTransactionVolumes == null) $this.AnnualTransactionVolumes = [];
        if (item == null || $this.AnnualTransactionVolumes.indexOf(item) > -1) return;
        $this.AnnualTransactionVolumes.push(item);
    }
    static addRangeAnnualTransactionVolumes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Investor.addAnnualTransactionVolumes($this, item));
    }
    static removeAnnualTransactionVolumes = ($this, item) => {
        if ($this == null || $this.AnnualTransactionVolumes == null || $this.AnnualTransactionVolumes.indexOf(item) === -1) return;
        var _index = $this.AnnualTransactionVolumes.indexOf(item);
        $this.AnnualTransactionVolumes.splice(_index, 1);
    }
    static clearAnnualTransactionVolumes = ($this) => {
        $this.AnnualTransactionVolumes = null;
    }
    static GetDomainFocusOptions(inv: any): any{let options = [];

                Joove.Common.nullSafe<any>(() => options.add("Recurring"), null);

                Joove.Common.nullSafe<any>(() => options.add("Project-based"), null);

                Joove.Common.nullSafe<any>(() => options.add("Other"), null);

                if ((!(Joove.Common.nullSafe<any>(() => options.linq.contains(Joove.Common.nullSafe<any>(() => inv.DomainFocus, "")), false)) && Joove.Common.nullSafe<any>(() => inv.DomainFocus, "") != null)) {
    Joove.Common.nullSafe<any>(() => options.add(Joove.Common.nullSafe<any>(() => inv.DomainFocus, "")), null);
    }

    return options;

                                               }
    static IsInvestor($this: any): any{return Joove.Common.nullSafe<any>(() => window._context.currentUserRoles.indexOf("Investor") > -1, false);

                                          }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class Supplier extends ApplicationUser {
    _originalTypeClassName = "DemonstratorApp.BO.Supplier";
    Domain = DemonstratorApp.BO;
    constructor() {
        super();
        this.CommercialAgreements = [];
        this.Agreements = [];
        this.FinancialStatements = [];
        this.EconomicEvaluations = [];
        this.BusinessPlans = [];
        this.PriorOutstandingBalances = [];
        this.OutstandingBalances = [];
        this.CurrentSituations = [];
        this.CurrentStatements = [];
        this.CurrentCredits = [];
        this.FactoringAgreements = [];
        this.CustomerAgreements = [];
        this.GeneralConstractuals = [];
        this.OrganizationalCharts = [];
        this.InvoicesForms = [];
        this.Declarations = [];
        this.SupplierProducts = [];
        this.Transactions = [];
        this.AcceptedPolicyTerms = false;
        this['_key'] = this.UserName = "";
    }
SupplierId:
    any;
Company:
    any;
CompanyLogo:
    any;
Business:
    any;
CurrentAmount:
    any;
AverageAmount:
    any;
PercentageOfCreditNotes:
    any;
PrimaryPhone:
    any;
SecondaryPhone:
    any;
Fax:
    any;
WebSite:
    any;
AcceptedPolicyTerms:
    any;
SupplierStatus:
    any;
DomainFocus:
    any;
EvaluationResult:
    any;
EvaluationCountResult:
    any;
AnnualTurnover:
    any;
BEnvironment:
    any;
PTerms:
    any;
Average:
    any;
InvoiceValue:
    any;
EqRatio:
    any;
Prefix:
    any;
VATNumber:
    any;
MarketSegment:
    any;
AdditionalComments:
    any;
AdditionalCommentsStep2:
    any;
AdditionalCommentsStep3:
    any;
CommercialAgreements:
    any;
Agreements:
    any;
SupplierBusinessStructureData:
    any;
SupplierReceivables:
    any;
SupplierContactInformation:
    any;
SupplierTurnover:
    any;
SupplierExtraInformation:
    any;
FinancialStatements:
    any;
EconomicEvaluations:
    any;
BusinessPlans:
    any;
PriorOutstandingBalances:
    any;
OutstandingBalances:
    any;
CurrentSituations:
    any;
CurrentStatements:
    any;
CurrentCredits:
    any;
FactoringAgreements:
    any;
CustomerAgreements:
    any;
GeneralConstractuals:
    any;
OrganizationalCharts:
    any;
InvoicesForms:
    any;
Declarations:
    any;
SupplierEvaluation:
    any;
DataQuality:
    any;
DataAvailability:
    any;
SupplierProducts:
    any;
Transactions:
    any;
    static setCommercialAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.CommercialAgreements == null) $this.CommercialAgreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CommercialAgreements.length > 0) {
            DemonstratorApp.BO.Supplier.removeCommercialAgreements($this, $this.CommercialAgreements[0]);
        }

        DemonstratorApp.BO.Supplier.addManyCommercialAgreements($this, copyItems);
    }
    static addManyCommercialAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addCommercialAgreements($this, items[i]);
        }
    }
    static addCommercialAgreements = ($this, item) => {
        if ($this.CommercialAgreements == null) $this.CommercialAgreements = [];
        if (item == null || $this.CommercialAgreements.indexOf(item) > -1) return;
        $this.CommercialAgreements.push(item);
        if (item.Supplier != $this) {
            DemonstratorApp.BO.CommercialAgreement.setSupplier(item, $this);
        }
    }
    static addRangeCommercialAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addCommercialAgreements($this, item));
    }
    static removeCommercialAgreements = ($this, item) => {
        if ($this == null || $this.CommercialAgreements == null || $this.CommercialAgreements.indexOf(item) === -1) return;
        var _index = $this.CommercialAgreements.indexOf(item);
        $this.CommercialAgreements.splice(_index, 1);
        item.Supplier = null;
    }
    static clearCommercialAgreements = ($this) => {
        $this.CommercialAgreements = null;
    }
    static setAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.Agreements == null) $this.Agreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Agreements.length > 0) {
            DemonstratorApp.BO.Supplier.removeAgreements($this, $this.Agreements[0]);
        }

        DemonstratorApp.BO.Supplier.addManyAgreements($this, copyItems);
    }
    static addManyAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addAgreements($this, items[i]);
        }
    }
    static addAgreements = ($this, item) => {
        if ($this.Agreements == null) $this.Agreements = [];
        if (item == null || $this.Agreements.indexOf(item) > -1) return;
        $this.Agreements.push(item);
        if (item.Supplier != $this) {
            DemonstratorApp.BO.Agreement.setSupplier(item, $this);
        }
    }
    static addRangeAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addAgreements($this, item));
    }
    static removeAgreements = ($this, item) => {
        if ($this == null || $this.Agreements == null || $this.Agreements.indexOf(item) === -1) return;
        var _index = $this.Agreements.indexOf(item);
        $this.Agreements.splice(_index, 1);
        item.Supplier = null;
    }
    static clearAgreements = ($this) => {
        $this.Agreements = null;
    }
    static setSupplierBusinessStructureData = ($this, value) => {
        var oldValue = $this.SupplierBusinessStructureData;
        $this.SupplierBusinessStructureData = value;
        if (value != null) {
        }
    }
    static setSupplierReceivables = ($this, value) => {
        var oldValue = $this.SupplierReceivables;
        $this.SupplierReceivables = value;
        if (value != null) {
        }
    }
    static setSupplierContactInformation = ($this, value) => {
        var oldValue = $this.SupplierContactInformation;
        $this.SupplierContactInformation = value;
        if (value != null) {
        }
    }
    static setSupplierTurnover = ($this, value) => {
        var oldValue = $this.SupplierTurnover;
        $this.SupplierTurnover = value;
        if (value != null) {
        }
    }
    static setSupplierExtraInformation = ($this, value) => {
        var oldValue = $this.SupplierExtraInformation;
        $this.SupplierExtraInformation = value;
        if (value != null) {
        }
    }
    static setFinancialStatements = ($this, items) => {
        if (items == null) items = [];
        if ($this.FinancialStatements == null) $this.FinancialStatements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.FinancialStatements.length > 0) {
            DemonstratorApp.BO.Supplier.removeFinancialStatements($this, $this.FinancialStatements[0]);
        }

        DemonstratorApp.BO.Supplier.addManyFinancialStatements($this, copyItems);
    }
    static addManyFinancialStatements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addFinancialStatements($this, items[i]);
        }
    }
    static addFinancialStatements = ($this, item) => {
        if ($this.FinancialStatements == null) $this.FinancialStatements = [];
        if (item == null || $this.FinancialStatements.indexOf(item) > -1) return;
        $this.FinancialStatements.push(item);
        if (item.Supplier != $this) {
            DemonstratorApp.BO.SupplierUploads.setSupplier(item, $this);
        }
    }
    static addRangeFinancialStatements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addFinancialStatements($this, item));
    }
    static removeFinancialStatements = ($this, item) => {
        if ($this == null || $this.FinancialStatements == null || $this.FinancialStatements.indexOf(item) === -1) return;
        var _index = $this.FinancialStatements.indexOf(item);
        $this.FinancialStatements.splice(_index, 1);
        item.Supplier = null;
    }
    static clearFinancialStatements = ($this) => {
        $this.FinancialStatements = null;
    }
    static setEconomicEvaluations = ($this, items) => {
        if (items == null) items = [];
        if ($this.EconomicEvaluations == null) $this.EconomicEvaluations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.EconomicEvaluations.length > 0) {
            DemonstratorApp.BO.Supplier.removeEconomicEvaluations($this, $this.EconomicEvaluations[0]);
        }

        DemonstratorApp.BO.Supplier.addManyEconomicEvaluations($this, copyItems);
    }
    static addManyEconomicEvaluations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addEconomicEvaluations($this, items[i]);
        }
    }
    static addEconomicEvaluations = ($this, item) => {
        if ($this.EconomicEvaluations == null) $this.EconomicEvaluations = [];
        if (item == null || $this.EconomicEvaluations.indexOf(item) > -1) return;
        $this.EconomicEvaluations.push(item);
        if (item.Supplier2 != $this) {
            DemonstratorApp.BO.SupplierUploads.setSupplier2(item, $this);
        }
    }
    static addRangeEconomicEvaluations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addEconomicEvaluations($this, item));
    }
    static removeEconomicEvaluations = ($this, item) => {
        if ($this == null || $this.EconomicEvaluations == null || $this.EconomicEvaluations.indexOf(item) === -1) return;
        var _index = $this.EconomicEvaluations.indexOf(item);
        $this.EconomicEvaluations.splice(_index, 1);
        item.Supplier2 = null;
    }
    static clearEconomicEvaluations = ($this) => {
        $this.EconomicEvaluations = null;
    }
    static setBusinessPlans = ($this, items) => {
        if (items == null) items = [];
        if ($this.BusinessPlans == null) $this.BusinessPlans = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.BusinessPlans.length > 0) {
            DemonstratorApp.BO.Supplier.removeBusinessPlans($this, $this.BusinessPlans[0]);
        }

        DemonstratorApp.BO.Supplier.addManyBusinessPlans($this, copyItems);
    }
    static addManyBusinessPlans = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addBusinessPlans($this, items[i]);
        }
    }
    static addBusinessPlans = ($this, item) => {
        if ($this.BusinessPlans == null) $this.BusinessPlans = [];
        if (item == null || $this.BusinessPlans.indexOf(item) > -1) return;
        $this.BusinessPlans.push(item);
    }
    static addRangeBusinessPlans = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addBusinessPlans($this, item));
    }
    static removeBusinessPlans = ($this, item) => {
        if ($this == null || $this.BusinessPlans == null || $this.BusinessPlans.indexOf(item) === -1) return;
        var _index = $this.BusinessPlans.indexOf(item);
        $this.BusinessPlans.splice(_index, 1);
    }
    static clearBusinessPlans = ($this) => {
        $this.BusinessPlans = null;
    }
    static setPriorOutstandingBalances = ($this, items) => {
        if (items == null) items = [];
        if ($this.PriorOutstandingBalances == null) $this.PriorOutstandingBalances = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PriorOutstandingBalances.length > 0) {
            DemonstratorApp.BO.Supplier.removePriorOutstandingBalances($this, $this.PriorOutstandingBalances[0]);
        }

        DemonstratorApp.BO.Supplier.addManyPriorOutstandingBalances($this, copyItems);
    }
    static addManyPriorOutstandingBalances = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addPriorOutstandingBalances($this, items[i]);
        }
    }
    static addPriorOutstandingBalances = ($this, item) => {
        if ($this.PriorOutstandingBalances == null) $this.PriorOutstandingBalances = [];
        if (item == null || $this.PriorOutstandingBalances.indexOf(item) > -1) return;
        $this.PriorOutstandingBalances.push(item);
    }
    static addRangePriorOutstandingBalances = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addPriorOutstandingBalances($this, item));
    }
    static removePriorOutstandingBalances = ($this, item) => {
        if ($this == null || $this.PriorOutstandingBalances == null || $this.PriorOutstandingBalances.indexOf(item) === -1) return;
        var _index = $this.PriorOutstandingBalances.indexOf(item);
        $this.PriorOutstandingBalances.splice(_index, 1);
    }
    static clearPriorOutstandingBalances = ($this) => {
        $this.PriorOutstandingBalances = null;
    }
    static setOutstandingBalances = ($this, items) => {
        if (items == null) items = [];
        if ($this.OutstandingBalances == null) $this.OutstandingBalances = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OutstandingBalances.length > 0) {
            DemonstratorApp.BO.Supplier.removeOutstandingBalances($this, $this.OutstandingBalances[0]);
        }

        DemonstratorApp.BO.Supplier.addManyOutstandingBalances($this, copyItems);
    }
    static addManyOutstandingBalances = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addOutstandingBalances($this, items[i]);
        }
    }
    static addOutstandingBalances = ($this, item) => {
        if ($this.OutstandingBalances == null) $this.OutstandingBalances = [];
        if (item == null || $this.OutstandingBalances.indexOf(item) > -1) return;
        $this.OutstandingBalances.push(item);
    }
    static addRangeOutstandingBalances = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addOutstandingBalances($this, item));
    }
    static removeOutstandingBalances = ($this, item) => {
        if ($this == null || $this.OutstandingBalances == null || $this.OutstandingBalances.indexOf(item) === -1) return;
        var _index = $this.OutstandingBalances.indexOf(item);
        $this.OutstandingBalances.splice(_index, 1);
    }
    static clearOutstandingBalances = ($this) => {
        $this.OutstandingBalances = null;
    }
    static setCurrentSituations = ($this, items) => {
        if (items == null) items = [];
        if ($this.CurrentSituations == null) $this.CurrentSituations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CurrentSituations.length > 0) {
            DemonstratorApp.BO.Supplier.removeCurrentSituations($this, $this.CurrentSituations[0]);
        }

        DemonstratorApp.BO.Supplier.addManyCurrentSituations($this, copyItems);
    }
    static addManyCurrentSituations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addCurrentSituations($this, items[i]);
        }
    }
    static addCurrentSituations = ($this, item) => {
        if ($this.CurrentSituations == null) $this.CurrentSituations = [];
        if (item == null || $this.CurrentSituations.indexOf(item) > -1) return;
        $this.CurrentSituations.push(item);
    }
    static addRangeCurrentSituations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addCurrentSituations($this, item));
    }
    static removeCurrentSituations = ($this, item) => {
        if ($this == null || $this.CurrentSituations == null || $this.CurrentSituations.indexOf(item) === -1) return;
        var _index = $this.CurrentSituations.indexOf(item);
        $this.CurrentSituations.splice(_index, 1);
    }
    static clearCurrentSituations = ($this) => {
        $this.CurrentSituations = null;
    }
    static setCurrentStatements = ($this, items) => {
        if (items == null) items = [];
        if ($this.CurrentStatements == null) $this.CurrentStatements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CurrentStatements.length > 0) {
            DemonstratorApp.BO.Supplier.removeCurrentStatements($this, $this.CurrentStatements[0]);
        }

        DemonstratorApp.BO.Supplier.addManyCurrentStatements($this, copyItems);
    }
    static addManyCurrentStatements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addCurrentStatements($this, items[i]);
        }
    }
    static addCurrentStatements = ($this, item) => {
        if ($this.CurrentStatements == null) $this.CurrentStatements = [];
        if (item == null || $this.CurrentStatements.indexOf(item) > -1) return;
        $this.CurrentStatements.push(item);
    }
    static addRangeCurrentStatements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addCurrentStatements($this, item));
    }
    static removeCurrentStatements = ($this, item) => {
        if ($this == null || $this.CurrentStatements == null || $this.CurrentStatements.indexOf(item) === -1) return;
        var _index = $this.CurrentStatements.indexOf(item);
        $this.CurrentStatements.splice(_index, 1);
    }
    static clearCurrentStatements = ($this) => {
        $this.CurrentStatements = null;
    }
    static setCurrentCredits = ($this, items) => {
        if (items == null) items = [];
        if ($this.CurrentCredits == null) $this.CurrentCredits = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CurrentCredits.length > 0) {
            DemonstratorApp.BO.Supplier.removeCurrentCredits($this, $this.CurrentCredits[0]);
        }

        DemonstratorApp.BO.Supplier.addManyCurrentCredits($this, copyItems);
    }
    static addManyCurrentCredits = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addCurrentCredits($this, items[i]);
        }
    }
    static addCurrentCredits = ($this, item) => {
        if ($this.CurrentCredits == null) $this.CurrentCredits = [];
        if (item == null || $this.CurrentCredits.indexOf(item) > -1) return;
        $this.CurrentCredits.push(item);
    }
    static addRangeCurrentCredits = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addCurrentCredits($this, item));
    }
    static removeCurrentCredits = ($this, item) => {
        if ($this == null || $this.CurrentCredits == null || $this.CurrentCredits.indexOf(item) === -1) return;
        var _index = $this.CurrentCredits.indexOf(item);
        $this.CurrentCredits.splice(_index, 1);
    }
    static clearCurrentCredits = ($this) => {
        $this.CurrentCredits = null;
    }
    static setFactoringAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.FactoringAgreements == null) $this.FactoringAgreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.FactoringAgreements.length > 0) {
            DemonstratorApp.BO.Supplier.removeFactoringAgreements($this, $this.FactoringAgreements[0]);
        }

        DemonstratorApp.BO.Supplier.addManyFactoringAgreements($this, copyItems);
    }
    static addManyFactoringAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addFactoringAgreements($this, items[i]);
        }
    }
    static addFactoringAgreements = ($this, item) => {
        if ($this.FactoringAgreements == null) $this.FactoringAgreements = [];
        if (item == null || $this.FactoringAgreements.indexOf(item) > -1) return;
        $this.FactoringAgreements.push(item);
    }
    static addRangeFactoringAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addFactoringAgreements($this, item));
    }
    static removeFactoringAgreements = ($this, item) => {
        if ($this == null || $this.FactoringAgreements == null || $this.FactoringAgreements.indexOf(item) === -1) return;
        var _index = $this.FactoringAgreements.indexOf(item);
        $this.FactoringAgreements.splice(_index, 1);
    }
    static clearFactoringAgreements = ($this) => {
        $this.FactoringAgreements = null;
    }
    static setCustomerAgreements = ($this, items) => {
        if (items == null) items = [];
        if ($this.CustomerAgreements == null) $this.CustomerAgreements = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.CustomerAgreements.length > 0) {
            DemonstratorApp.BO.Supplier.removeCustomerAgreements($this, $this.CustomerAgreements[0]);
        }

        DemonstratorApp.BO.Supplier.addManyCustomerAgreements($this, copyItems);
    }
    static addManyCustomerAgreements = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addCustomerAgreements($this, items[i]);
        }
    }
    static addCustomerAgreements = ($this, item) => {
        if ($this.CustomerAgreements == null) $this.CustomerAgreements = [];
        if (item == null || $this.CustomerAgreements.indexOf(item) > -1) return;
        $this.CustomerAgreements.push(item);
    }
    static addRangeCustomerAgreements = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addCustomerAgreements($this, item));
    }
    static removeCustomerAgreements = ($this, item) => {
        if ($this == null || $this.CustomerAgreements == null || $this.CustomerAgreements.indexOf(item) === -1) return;
        var _index = $this.CustomerAgreements.indexOf(item);
        $this.CustomerAgreements.splice(_index, 1);
    }
    static clearCustomerAgreements = ($this) => {
        $this.CustomerAgreements = null;
    }
    static setGeneralConstractuals = ($this, items) => {
        if (items == null) items = [];
        if ($this.GeneralConstractuals == null) $this.GeneralConstractuals = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.GeneralConstractuals.length > 0) {
            DemonstratorApp.BO.Supplier.removeGeneralConstractuals($this, $this.GeneralConstractuals[0]);
        }

        DemonstratorApp.BO.Supplier.addManyGeneralConstractuals($this, copyItems);
    }
    static addManyGeneralConstractuals = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addGeneralConstractuals($this, items[i]);
        }
    }
    static addGeneralConstractuals = ($this, item) => {
        if ($this.GeneralConstractuals == null) $this.GeneralConstractuals = [];
        if (item == null || $this.GeneralConstractuals.indexOf(item) > -1) return;
        $this.GeneralConstractuals.push(item);
    }
    static addRangeGeneralConstractuals = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addGeneralConstractuals($this, item));
    }
    static removeGeneralConstractuals = ($this, item) => {
        if ($this == null || $this.GeneralConstractuals == null || $this.GeneralConstractuals.indexOf(item) === -1) return;
        var _index = $this.GeneralConstractuals.indexOf(item);
        $this.GeneralConstractuals.splice(_index, 1);
    }
    static clearGeneralConstractuals = ($this) => {
        $this.GeneralConstractuals = null;
    }
    static setOrganizationalCharts = ($this, items) => {
        if (items == null) items = [];
        if ($this.OrganizationalCharts == null) $this.OrganizationalCharts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.OrganizationalCharts.length > 0) {
            DemonstratorApp.BO.Supplier.removeOrganizationalCharts($this, $this.OrganizationalCharts[0]);
        }

        DemonstratorApp.BO.Supplier.addManyOrganizationalCharts($this, copyItems);
    }
    static addManyOrganizationalCharts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addOrganizationalCharts($this, items[i]);
        }
    }
    static addOrganizationalCharts = ($this, item) => {
        if ($this.OrganizationalCharts == null) $this.OrganizationalCharts = [];
        if (item == null || $this.OrganizationalCharts.indexOf(item) > -1) return;
        $this.OrganizationalCharts.push(item);
    }
    static addRangeOrganizationalCharts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addOrganizationalCharts($this, item));
    }
    static removeOrganizationalCharts = ($this, item) => {
        if ($this == null || $this.OrganizationalCharts == null || $this.OrganizationalCharts.indexOf(item) === -1) return;
        var _index = $this.OrganizationalCharts.indexOf(item);
        $this.OrganizationalCharts.splice(_index, 1);
    }
    static clearOrganizationalCharts = ($this) => {
        $this.OrganizationalCharts = null;
    }
    static setInvoicesForms = ($this, items) => {
        if (items == null) items = [];
        if ($this.InvoicesForms == null) $this.InvoicesForms = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.InvoicesForms.length > 0) {
            DemonstratorApp.BO.Supplier.removeInvoicesForms($this, $this.InvoicesForms[0]);
        }

        DemonstratorApp.BO.Supplier.addManyInvoicesForms($this, copyItems);
    }
    static addManyInvoicesForms = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addInvoicesForms($this, items[i]);
        }
    }
    static addInvoicesForms = ($this, item) => {
        if ($this.InvoicesForms == null) $this.InvoicesForms = [];
        if (item == null || $this.InvoicesForms.indexOf(item) > -1) return;
        $this.InvoicesForms.push(item);
    }
    static addRangeInvoicesForms = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addInvoicesForms($this, item));
    }
    static removeInvoicesForms = ($this, item) => {
        if ($this == null || $this.InvoicesForms == null || $this.InvoicesForms.indexOf(item) === -1) return;
        var _index = $this.InvoicesForms.indexOf(item);
        $this.InvoicesForms.splice(_index, 1);
    }
    static clearInvoicesForms = ($this) => {
        $this.InvoicesForms = null;
    }
    static setDeclarations = ($this, items) => {
        if (items == null) items = [];
        if ($this.Declarations == null) $this.Declarations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Declarations.length > 0) {
            DemonstratorApp.BO.Supplier.removeDeclarations($this, $this.Declarations[0]);
        }

        DemonstratorApp.BO.Supplier.addManyDeclarations($this, copyItems);
    }
    static addManyDeclarations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addDeclarations($this, items[i]);
        }
    }
    static addDeclarations = ($this, item) => {
        if ($this.Declarations == null) $this.Declarations = [];
        if (item == null || $this.Declarations.indexOf(item) > -1) return;
        $this.Declarations.push(item);
    }
    static addRangeDeclarations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addDeclarations($this, item));
    }
    static removeDeclarations = ($this, item) => {
        if ($this == null || $this.Declarations == null || $this.Declarations.indexOf(item) === -1) return;
        var _index = $this.Declarations.indexOf(item);
        $this.Declarations.splice(_index, 1);
    }
    static clearDeclarations = ($this) => {
        $this.Declarations = null;
    }
    static setSupplierEvaluation = ($this, value) => {
        var oldValue = $this.SupplierEvaluation;
        $this.SupplierEvaluation = value;
        if (value != null) {
        }
    }
    static setDataQuality = ($this, value) => {
        var oldValue = $this.DataQuality;
        $this.DataQuality = value;
        if (value != null) {
        }
    }
    static setDataAvailability = ($this, value) => {
        var oldValue = $this.DataAvailability;
        $this.DataAvailability = value;
        if (value != null) {
            if (oldValue != null && oldValue.Supplier != null) {
                oldValue.Supplier = null;
            }
            if ($this.DataAvailability.Supplier !== $this) {
                DemonstratorApp.BO.DataAvailability.setSupplier(value, $this);
            }
        }
    }
    static setSupplierProducts = ($this, items) => {
        if (items == null) items = [];
        if ($this.SupplierProducts == null) $this.SupplierProducts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.SupplierProducts.length > 0) {
            DemonstratorApp.BO.Supplier.removeSupplierProducts($this, $this.SupplierProducts[0]);
        }

        DemonstratorApp.BO.Supplier.addManySupplierProducts($this, copyItems);
    }
    static addManySupplierProducts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addSupplierProducts($this, items[i]);
        }
    }
    static addSupplierProducts = ($this, item) => {
        if ($this.SupplierProducts == null) $this.SupplierProducts = [];
        if (item == null || $this.SupplierProducts.indexOf(item) > -1) return;
        $this.SupplierProducts.push(item);
        if (item.Supplier != $this) {
            DemonstratorApp.BO.SupplierProduct.setSupplier(item, $this);
        }
    }
    static addRangeSupplierProducts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addSupplierProducts($this, item));
    }
    static removeSupplierProducts = ($this, item) => {
        if ($this == null || $this.SupplierProducts == null || $this.SupplierProducts.indexOf(item) === -1) return;
        var _index = $this.SupplierProducts.indexOf(item);
        $this.SupplierProducts.splice(_index, 1);
        item.Supplier = null;
    }
    static clearSupplierProducts = ($this) => {
        $this.SupplierProducts = null;
    }
    static setTransactions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Transactions == null) $this.Transactions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Transactions.length > 0) {
            DemonstratorApp.BO.Supplier.removeTransactions($this, $this.Transactions[0]);
        }

        DemonstratorApp.BO.Supplier.addManyTransactions($this, copyItems);
    }
    static addManyTransactions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DemonstratorApp.BO.Supplier.addTransactions($this, items[i]);
        }
    }
    static addTransactions = ($this, item) => {
        if ($this.Transactions == null) $this.Transactions = [];
        if (item == null || $this.Transactions.indexOf(item) > -1) return;
        $this.Transactions.push(item);
        if (item.Supplier != $this) {
            DemonstratorApp.BO.Transaction.setSupplier(item, $this);
        }
    }
    static addRangeTransactions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DemonstratorApp.BO.Supplier.addTransactions($this, item));
    }
    static removeTransactions = ($this, item) => {
        if ($this == null || $this.Transactions == null || $this.Transactions.indexOf(item) === -1) return;
        var _index = $this.Transactions.indexOf(item);
        $this.Transactions.splice(_index, 1);
        item.Supplier = null;
    }
    static clearTransactions = ($this) => {
        $this.Transactions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

}
var _appDomain = DemonstratorApp.BO;
window.$domain = _appDomain;
