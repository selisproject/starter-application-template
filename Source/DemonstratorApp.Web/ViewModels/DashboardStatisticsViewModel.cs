// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using DemonstratorApp.BO;
using DemonstratorApp.UI.Controllers.DashboardStatistics;
using AppCode;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Mvc;
using System.ComponentModel.DataAnnotations;
using DemonstratorApp.UI.ViewModels.MasterPage;
using DemonstratorApp.UI.Controllers.MasterPage;
namespace DemonstratorApp.UI.ViewModels.DashboardStatistics
{
    public class DashboardStatisticsViewModel : MasterPageViewModel
    {
        public int? TotalOnTime;
        public int? TotalTransactions;
        public int? TotalAsOrdered;
        public int? TotalInFull;
        public int? TotalImpeachments;
        public List<SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>> ChartDataQualitySelectedItems;
        public List<SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>> ChartDataAvailabilitySelectedItems;
        public List<SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>> ChartSelectedItems;
        public List<SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>> ChartTurnoverSelectedItems;


        public DashboardStatisticsViewModel()
        {
        }


        public override void Evict()
        {
            var manager = MiniSessionManager.Instance;
        }

    }


    [OriginalType(typeof(DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel))]
    public class DashboardStatisticsViewModelDTO : MasterPageViewModelDTO, IViewModelDTO<DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel>
    {

        [JsonConstructor]
        public DashboardStatisticsViewModelDTO() { }
        public DashboardStatisticsViewModelDTO(DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel original, bool parentIsDirty = false)  : base(original)
        {
            if (original == null) return;
            _runtimeType = original.GetType().FullName;
            TotalOnTime = original.TotalOnTime;
            TotalTransactions = original.TotalTransactions;
            TotalAsOrdered = original.TotalAsOrdered;
            TotalInFull = original.TotalInFull;
            TotalImpeachments = original.TotalImpeachments;
            ChartDataQualitySelectedItemKeys = original.ChartDataQualitySelectedItems == null
                                               ? null
                                               : original.ChartDataQualitySelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ChartDataAvailabilitySelectedItemKeys = original.ChartDataAvailabilitySelectedItems == null
                                                    ? null
                                                    : original.ChartDataAvailabilitySelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ChartSelectedItemKeys = original.ChartSelectedItems == null
                                    ? null
                                    : original.ChartSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            ChartTurnoverSelectedItemKeys = original.ChartTurnoverSelectedItems == null
                                            ? null
                                            : original.ChartTurnoverSelectedItems.Select(x => new SelectedItemInfo<int?>(x.SelectedItems.Select(y => y.Id).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
        public int? TotalOnTime;
        public int? TotalTransactions;
        public int? TotalAsOrdered;
        public int? TotalInFull;
        public int? TotalImpeachments;
        public new string _runtimeType
        {
            get;
            set;
        }
        public override string _originalTypeClassName => typeof(DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel).FullName;
        public List<SelectedItemInfo<int?>> ChartDataQualitySelectedItemKeys;
        public List<SelectedItemInfo<int?>> ChartDataAvailabilitySelectedItemKeys;
        public List<SelectedItemInfo<int?>> ChartSelectedItemKeys;
        public List<SelectedItemInfo<int?>> ChartTurnoverSelectedItemKeys;

        public new DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel GetModel()
        {
            var alreadySeenInstance = DTOHelper.GetSeenModelInstance<DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel>(_clientKey, _originalTypeClassName, _baseClasses);
            if (alreadySeenInstance != null) return alreadySeenInstance;
            return new DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel();
        }
        new  public DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel Convert()
        {
            var original = GetModel();
            if (original == null)
            {
                original = new DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel();
            }
            DTOHelper.UpdateSeenModelInstances(this, original);
            Hydrate(original);
            return original;
        }
        public void Hydrate(DemonstratorApp.UI.ViewModels.DashboardStatistics.DashboardStatisticsViewModel original)
        {
            if (original == null) return;
            base.Hydrate(original);
            original.TotalOnTime = TotalOnTime;
            original.TotalTransactions = TotalTransactions;
            original.TotalAsOrdered = TotalAsOrdered;
            original.TotalInFull = TotalInFull;
            original.TotalImpeachments = TotalImpeachments;
            original.ChartDataQualitySelectedItems = ChartDataQualitySelectedItemKeys == null
                    ? new List<SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>>()
                    : ChartDataQualitySelectedItemKeys.Select(x => new SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardStatistics.SupplierStatisticDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ChartDataAvailabilitySelectedItems = ChartDataAvailabilitySelectedItemKeys == null
                    ? new List<SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>>()
                    : ChartDataAvailabilitySelectedItemKeys.Select(x => new SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardStatistics.SupplierStatisticDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ChartSelectedItems = ChartSelectedItemKeys == null
                                          ? new List<SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>>()
                                          : ChartSelectedItemKeys.Select(x => new SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardStatistics.SupplierStatisticDataSetOnTime_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
            original.ChartTurnoverSelectedItems = ChartTurnoverSelectedItemKeys == null
                                                  ? new List<SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>>()
                                                  : ChartTurnoverSelectedItemKeys.Select(x => new SelectedItemInfo<DemonstratorApp.BO.SupplierStatistic>(x.SelectedItems.Select(y => ViewModels.DashboardStatistics.SupplierTurnoverDataSet_SupplierStatisticDTO.GetModelByKey(y)).ToList(), x.Indexes, x.FullRecordsetSelected)).ToList();
        }
    }


    #region Datasource DTOs
    [OriginalType(typeof(DemonstratorApp.BO.SupplierStatistic))]
    [DataSetDTO]
    public class SupplierStatisticDataSet_SupplierStatisticDTO : ViewModelDTOBase, IViewModelDTO<DemonstratorApp.BO.SupplierStatistic>
    {
        public override string _originalTypeClassName => typeof(DemonstratorApp.BO.SupplierStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public SupplierStatisticDataSet_SupplierDTO Supplier;
        public decimal? DataQuality;
        public int? DataAvailability;


        [JsonConstructor]
        public SupplierStatisticDataSet_SupplierStatisticDTO() : base() {}
        public  static SupplierStatisticDataSet_SupplierStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DemonstratorApp.BO.SupplierStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierStatisticDataSet_SupplierStatisticDTO(foundEntry);
            }
            return null;
        }
        public SupplierStatisticDataSet_SupplierStatisticDTO(DemonstratorApp.BO.SupplierStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SupplierStatisticDataSet_SupplierStatisticDTO(DemonstratorApp.BO.SupplierStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Supplier = original.Supplier == null
                       ? null
                       : DTOHelper.GetDTOFromModel<SupplierStatisticDataSet_SupplierDTO>(original.Supplier as DemonstratorApp.BO.Supplier);
            DataQuality = original.DataQuality;
            DataAvailability = original.DataAvailability;
        }

        public static DemonstratorApp.BO.SupplierStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false);
        }
        public DemonstratorApp.BO.SupplierStatistic Convert()
        {
            var model = new DemonstratorApp.BO.SupplierStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Supplier = Supplier == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DemonstratorApp.BO.Supplier>(Supplier);
            model.DataQuality = DataQuality;
            model.DataAvailability = DataAvailability;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DemonstratorApp.BO.Supplier))]
    [DataSetDTO]
    public class SupplierStatisticDataSet_SupplierDTO : SupplierStatisticDataSet_ApplicationUserDTO, IViewModelDTO<DemonstratorApp.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DemonstratorApp.BO.Supplier).FullName;
        public new string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public string Company;


        [JsonConstructor]
        public SupplierStatisticDataSet_SupplierDTO() : base() {}
        public new static SupplierStatisticDataSet_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DemonstratorApp.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierStatisticDataSet_SupplierDTO(foundEntry);
            }
            return null;
        }
        public SupplierStatisticDataSet_SupplierDTO(DemonstratorApp.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public SupplierStatisticDataSet_SupplierDTO(DemonstratorApp.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Company = original.Company;
        }

        public new static DemonstratorApp.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false);
        }
        public new DemonstratorApp.BO.Supplier Convert()
        {
            var model = new DemonstratorApp.BO.Supplier();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            model.Company = Company;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    [DataSetDTO]
    public class SupplierStatisticDataSet_ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SupplierStatisticDataSet_ApplicationUserDTO() : base() {}
        public  static SupplierStatisticDataSet_ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierStatisticDataSet_ApplicationUserDTO(foundEntry);
            }
            return null;
        }
        public SupplierStatisticDataSet_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public SupplierStatisticDataSet_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DemonstratorApp.BO.SupplierStatistic))]
    [DataSetDTO]
    public class SupplierStatisticDataSetOnTime_SupplierStatisticDTO : ViewModelDTOBase, IViewModelDTO<DemonstratorApp.BO.SupplierStatistic>
    {
        public override string _originalTypeClassName => typeof(DemonstratorApp.BO.SupplierStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public SupplierStatisticDataSetOnTime_SupplierDTO Supplier;
        public int? OnTimeDeliveries;
        public int? AsOrderedDeliveries;
        public int? InFullDeliveries;
        public int? TotalImpeachments;


        [JsonConstructor]
        public SupplierStatisticDataSetOnTime_SupplierStatisticDTO() : base() {}
        public  static SupplierStatisticDataSetOnTime_SupplierStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DemonstratorApp.BO.SupplierStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierStatisticDataSetOnTime_SupplierStatisticDTO(foundEntry);
            }
            return null;
        }
        public SupplierStatisticDataSetOnTime_SupplierStatisticDTO(DemonstratorApp.BO.SupplierStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SupplierStatisticDataSetOnTime_SupplierStatisticDTO(DemonstratorApp.BO.SupplierStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Supplier = original.Supplier == null
                       ? null
                       : DTOHelper.GetDTOFromModel<SupplierStatisticDataSetOnTime_SupplierDTO>(original.Supplier as DemonstratorApp.BO.Supplier);
            OnTimeDeliveries = original.OnTimeDeliveries;
            AsOrderedDeliveries = original.AsOrderedDeliveries;
            InFullDeliveries = original.InFullDeliveries;
            TotalImpeachments = original.TotalImpeachments;
        }

        public static DemonstratorApp.BO.SupplierStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false);
        }
        public DemonstratorApp.BO.SupplierStatistic Convert()
        {
            var model = new DemonstratorApp.BO.SupplierStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Supplier = Supplier == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DemonstratorApp.BO.Supplier>(Supplier);
            model.OnTimeDeliveries = OnTimeDeliveries;
            model.AsOrderedDeliveries = AsOrderedDeliveries;
            model.InFullDeliveries = InFullDeliveries;
            model.TotalImpeachments = TotalImpeachments;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DemonstratorApp.BO.Supplier))]
    [DataSetDTO]
    public class SupplierStatisticDataSetOnTime_SupplierDTO : SupplierStatisticDataSetOnTime_ApplicationUserDTO, IViewModelDTO<DemonstratorApp.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DemonstratorApp.BO.Supplier).FullName;
        public new string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public string Company;


        [JsonConstructor]
        public SupplierStatisticDataSetOnTime_SupplierDTO() : base() {}
        public new static SupplierStatisticDataSetOnTime_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DemonstratorApp.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierStatisticDataSetOnTime_SupplierDTO(foundEntry);
            }
            return null;
        }
        public SupplierStatisticDataSetOnTime_SupplierDTO(DemonstratorApp.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public SupplierStatisticDataSetOnTime_SupplierDTO(DemonstratorApp.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Company = original.Company;
        }

        public new static DemonstratorApp.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false);
        }
        public new DemonstratorApp.BO.Supplier Convert()
        {
            var model = new DemonstratorApp.BO.Supplier();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            model.Company = Company;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    [DataSetDTO]
    public class SupplierStatisticDataSetOnTime_ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SupplierStatisticDataSetOnTime_ApplicationUserDTO() : base() {}
        public  static SupplierStatisticDataSetOnTime_ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierStatisticDataSetOnTime_ApplicationUserDTO(foundEntry);
            }
            return null;
        }
        public SupplierStatisticDataSetOnTime_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public SupplierStatisticDataSetOnTime_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DemonstratorApp.BO.SupplierStatistic))]
    [DataSetDTO]
    public class SupplierTurnoverDataSet_SupplierStatisticDTO : ViewModelDTOBase, IViewModelDTO<DemonstratorApp.BO.SupplierStatistic>
    {
        public override string _originalTypeClassName => typeof(DemonstratorApp.BO.SupplierStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }
        public SupplierTurnoverDataSet_SupplierDTO Supplier;
        public decimal? CurrentTurnover;
        public decimal? NextTurnover;
        public decimal? PreviousTurnover;


        [JsonConstructor]
        public SupplierTurnoverDataSet_SupplierStatisticDTO() : base() {}
        public  static SupplierTurnoverDataSet_SupplierStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DemonstratorApp.BO.SupplierStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierTurnoverDataSet_SupplierStatisticDTO(foundEntry);
            }
            return null;
        }
        public SupplierTurnoverDataSet_SupplierStatisticDTO(DemonstratorApp.BO.SupplierStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public SupplierTurnoverDataSet_SupplierStatisticDTO(DemonstratorApp.BO.SupplierStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Supplier = original.Supplier == null
                       ? null
                       : DTOHelper.GetDTOFromModel<SupplierTurnoverDataSet_SupplierDTO>(original.Supplier as DemonstratorApp.BO.Supplier);
            CurrentTurnover = original.CurrentTurnover;
            NextTurnover = original.NextTurnover;
            PreviousTurnover = original.PreviousTurnover;
        }

        public static DemonstratorApp.BO.SupplierStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false);
        }
        public DemonstratorApp.BO.SupplierStatistic Convert()
        {
            var model = new DemonstratorApp.BO.SupplierStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            model.Supplier = Supplier == null
                             ? null
                             : DTOHelper.GetModelFromDTO<DemonstratorApp.BO.Supplier>(Supplier);
            model.CurrentTurnover = CurrentTurnover;
            model.NextTurnover = NextTurnover;
            model.PreviousTurnover = PreviousTurnover;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(DemonstratorApp.BO.Supplier))]
    [DataSetDTO]
    public class SupplierTurnoverDataSet_SupplierDTO : SupplierTurnoverDataSet_ApplicationUserDTO, IViewModelDTO<DemonstratorApp.BO.Supplier>
    {
        public override string _originalTypeClassName => typeof(DemonstratorApp.BO.Supplier).FullName;
        public new string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }
        public string Company;


        [JsonConstructor]
        public SupplierTurnoverDataSet_SupplierDTO() : base() {}
        public new static SupplierTurnoverDataSet_SupplierDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DemonstratorApp.BO.Supplier>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierTurnoverDataSet_SupplierDTO(foundEntry);
            }
            return null;
        }
        public SupplierTurnoverDataSet_SupplierDTO(DemonstratorApp.BO.Supplier original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public SupplierTurnoverDataSet_SupplierDTO(DemonstratorApp.BO.Supplier original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
            Company = original.Company;
        }

        public new static DemonstratorApp.BO.Supplier GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false);
        }
        public new DemonstratorApp.BO.Supplier Convert()
        {
            var model = new DemonstratorApp.BO.Supplier();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<DemonstratorApp.BO.Supplier>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            model.Company = Company;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }
    [OriginalType(typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser))]
    [DataSetDTO]
    public class SupplierTurnoverDataSet_ApplicationUserDTO : ViewModelDTOBase, IViewModelDTO<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>
    {
        public override string _originalTypeClassName => typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public string UserName;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public SupplierTurnoverDataSet_ApplicationUserDTO() : base() {}
        public  static SupplierTurnoverDataSet_ApplicationUserDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = (rawKey);
            var foundEntry = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new SupplierTurnoverDataSet_ApplicationUserDTO(foundEntry);
            }
            return null;
        }
        public SupplierTurnoverDataSet_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, UserName);
        }
        public SupplierTurnoverDataSet_ApplicationUserDTO(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.UserName == "") ? original._GetUniqueIdentifier() as object : original.UserName as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            UserName = original.UserName;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static zAppDev.DotNet.Framework.Identity.Model.ApplicationUser GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = (rawKey);
            return new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false);
        }
        public zAppDev.DotNet.Framework.Identity.Model.ApplicationUser Convert()
        {
            var model = new zAppDev.DotNet.Framework.Identity.Model.ApplicationUser();
            if (_key != null && _key.ToString() != "")
            {
                var rawKey = _key.ToString();
                var parsedKey = (rawKey);
                model = new DAL.Repository().GetById<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.UserName = UserName ?? "";
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }



    [OriginalType(typeof(DemonstratorApp.BO.SupplierStatistic))]
    [DataSetDTO]
    public class OnTimeDataSet_SupplierStatisticDTO : ViewModelDTOBase, IViewModelDTO<DemonstratorApp.BO.SupplierStatistic>
    {
        public override string _originalTypeClassName => typeof(DemonstratorApp.BO.SupplierStatistic).FullName;
        public string _versionTimestamp;
        public  string _runtimeType;
        public int? Id;
        public new object _key
        {
            get;
            set;
        }


        [JsonConstructor]
        public OnTimeDataSet_SupplierStatisticDTO() : base() {}
        public  static OnTimeDataSet_SupplierStatisticDTO GetInstance(object key, string jbID)
        {
            if (key == null) return null;
            var rawKey = key.ToString();
            var parsedKey = int.Parse(rawKey);
            var foundEntry = new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false);
            if(foundEntry == null && !string.IsNullOrWhiteSpace(jbID))
            {
                if(int.TryParse(rawKey, out int _uniqueKey))
                {
                    var controller = new DashboardStatisticsController();
                    var method = controller.GetType().GetMethod($"Get_{jbID}_DatasourceQueryable");
                    var records = method.Invoke(controller, new object[] { null }) as IQueryable<DemonstratorApp.BO.SupplierStatistic>;
                    foundEntry = records.Where(c => c._GetUniqueIdentifier() == _uniqueKey).FirstOrDefault();
                }
            }
            if(foundEntry != null)
            {
                return new OnTimeDataSet_SupplierStatisticDTO(foundEntry);
            }
            return null;
        }
        public OnTimeDataSet_SupplierStatisticDTO(DemonstratorApp.BO.SupplierStatistic original, bool assignClientKey) : this(original)
        {
            _clientKey = DTOHelper.GetClientKey(original, Id);
        }
        public OnTimeDataSet_SupplierStatisticDTO(DemonstratorApp.BO.SupplierStatistic original)
        {
            if(original == null) throw new ApplicationException(BaseViewPage<object>.GetResourceValue("GlobalResources", "RES_DATASOURCE_Null_Value_In_Resultset", null, "The resultset of your DataSource contains null values."));
            _key = (original.Id == 0) ? original._GetUniqueIdentifier() as object : original.Id as object;
            _runtimeType = original?.GetType().FullName;
            if (original.VersionTimestamp != null && original.VersionTimestamp.Length > 0)
            {
                _versionTimestamp = BitConverter.ToInt64(original.VersionTimestamp, 0).ToString();
            }
            Id = original.Id;
            if (!DTOHelper.SeenDTOInstances.ContainsKey(original))
            {
                DTOHelper.SeenDTOInstances.Add(original, this);
            }
        }

        public static DemonstratorApp.BO.SupplierStatistic GetModelByKey(object _key)
        {
            var rawKey = _key.ToString();
            var parsedKey = int.Parse(rawKey);
            return new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false);
        }
        public DemonstratorApp.BO.SupplierStatistic Convert()
        {
            var model = new DemonstratorApp.BO.SupplierStatistic();
            if (_key != null && _key.ToString() != "0")
            {
                var rawKey = _key.ToString();
                var parsedKey = int.Parse(rawKey);
                model = new DAL.Repository().GetById<DemonstratorApp.BO.SupplierStatistic>(parsedKey, false) ?? model;
            }
            if (!DTOHelper.SeenModelInstances.ContainsKey(this))
            {
                DTOHelper.SeenModelInstances.Add(this, model);
            }
            model.Id = Id ?? 0;
            DTOHelper.UpdateSeenModelInstances(this, model);
            return model;
        }

    }

    #endregion

}
