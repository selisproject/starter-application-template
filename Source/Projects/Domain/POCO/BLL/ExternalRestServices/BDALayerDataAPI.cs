// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using zAppDev.DotNet.Framework.Services;
using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Xml.Serialization;
using System.Collections.Generic;

namespace DemonstratorApp.BLL.ExternalRestServices
{
    public class BDALayerDataAPIRestService
    {
        public static string BaseUrl
        {
            get
            {
                var baseUrl = System.Configuration.ConfigurationManager.AppSettings["externalapis:BDALayerDataAPI:baseurl"];
                if (string.IsNullOrWhiteSpace(baseUrl))
                {
                    baseUrl = "http://94.70.243.21:9999/api/";
                }
                if (!string.IsNullOrWhiteSpace(baseUrl) && !baseUrl.EndsWith("/"))
                {
                    baseUrl += "/";
                }
                return baseUrl;
            }
        }

        public static string StoreMessageInEventlog(DemonstratorApp.ExternalStructs.BDALayerDataAPI.msg msg, string scnSlug)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/datastore/" + scnSlug;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.PUT,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerDataAPI",
                Operation = "StoreMessageInEventlog",
                PostType = PostType.JSON,
                Data = msg, FormData = new Dictionary<string, object> {{"msg",msg}}
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static void GetDataFromEventlog1(string scnSlug, int? row_num)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "datastore/" + scnSlug + "/entries?type=rows&n=" + (row_num?.ToString() ?? "");
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerDataAPI",
                Operation = "GetDataFromEventlog1"
            };
            Func<ServiceConsumptionContainer, object> _invocation = (_httpResponse) =>
            {
                RestServiceConsumer.Consume<object>(_options, _httpResponse);
                return null;
            };
            var _consumer = new ServiceConsumer<object>(_invocation);
            _consumer.Invoke(_options);
        }
        public static void GetDataFromEventlog2(string scnSlug)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "datastore/" + scnSlug + "/select?filters=warehouse_id=1&message_type=stocklevels";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerDataAPI",
                Operation = "GetDataFromEventlog2"
            };
            Func<ServiceConsumptionContainer, object> _invocation = (_httpResponse) =>
            {
                RestServiceConsumer.Consume<object>(_options, _httpResponse);
                return null;
            };
            var _consumer = new ServiceConsumer<object>(_invocation);
            _consumer.Invoke(_options);
        }
        public static string GetDataFromDimensionTables(string scnSlug, string filters)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/datastore/" + scnSlug + "/dtable?tableName=" + filters;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerDataAPI",
                Operation = "GetDataFromDimensionTables"
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }

    }
}