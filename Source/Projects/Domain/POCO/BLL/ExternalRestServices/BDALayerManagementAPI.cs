// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using zAppDev.DotNet.Framework.Services;
using System;
using System.IO;
using System.Text;
using System.Linq;
using System.Xml.Serialization;
using System.Collections.Generic;

namespace DemonstratorApp.BLL.ExternalRestServices
{
    public class BDALayerManagementAPIRestService
    {
        public static string BaseUrl
        {
            get
            {
                var baseUrl = System.Configuration.ConfigurationManager.AppSettings["externalapis:BDALayerManagementAPI:baseurl"];
                if (string.IsNullOrWhiteSpace(baseUrl))
                {
                    baseUrl = "http://94.70.243.21:9999/api/";
                }
                if (!string.IsNullOrWhiteSpace(baseUrl) && !baseUrl.EndsWith("/"))
                {
                    baseUrl += "/";
                }
                return baseUrl;
            }
        }

        public static string CreateSCNdatabase(DemonstratorApp.ExternalStructs.BDALayerManagementAPI.newscn newScn)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "datastore/create";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.POST,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "CreateSCNdatabase",
                PostType = PostType.JSON,
                Data = newScn, FormData = new Dictionary<string, object> {{"newScn",newScn}}
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static string RemoveSCN(string scnId)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "datastore/destroy?scnId=" + scnId;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.POST,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "RemoveSCN",
                PostType = PostType.JSON
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static string GetRegisteredSCNs()
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/datastore/scns";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "GetRegisteredSCNs"
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static string AddNewRecipe(string scnSlug, DemonstratorApp.ExternalStructs.BDALayerManagementAPI.recipe recipe)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/recipe/" + scnSlug;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.PUT,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "AddNewRecipe",
                PostType = PostType.JSON,
                Data = recipe, FormData = new Dictionary<string, object> {{"recipe",recipe}}
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static string UploadRecipeExecutable(string scnSlug, int? messageId, string recipe_name)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/recipe/" + scnSlug + "/upload/" + (messageId?.ToString() ?? "") + "/" + recipe_name;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.PUT,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "UploadRecipeExecutable",
                PostType = PostType.JSON
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static void GetRecipes()
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/recipe/TestSCN/";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "GetRecipes"
            };
            Func<ServiceConsumptionContainer, object> _invocation = (_httpResponse) =>
            {
                RestServiceConsumer.Consume<object>(_options, _httpResponse);
                return null;
            };
            var _consumer = new ServiceConsumer<object>(_invocation);
            _consumer.Invoke(_options);
        }
        public static string CreateNewJob(string scnSlug, DemonstratorApp.ExternalStructs.BDALayerManagementAPI.job job_struct)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/job/" + scnSlug;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.PUT,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "CreateNewJob",
                PostType = PostType.JSON,
                Data = job_struct, FormData = new Dictionary<string, object> {{"job_struct",job_struct}}
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static void GetJobs()
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/job/TestSCN/";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "GetJobs"
            };
            Func<ServiceConsumptionContainer, object> _invocation = (_httpResponse) =>
            {
                RestServiceConsumer.Consume<object>(_options, _httpResponse);
                return null;
            };
            var _consumer = new ServiceConsumer<object>(_invocation);
            _consumer.Invoke(_options);
        }
        public static string CreateMessageTypeToSubscribeTo(string scnSlug, DemonstratorApp.ExternalStructs.BDALayerManagementAPI.msgtype messageType)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/message/" + scnSlug;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.PUT,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "CreateMessageTypeToSubscribeTo",
                PostType = PostType.JSON,
                Data = messageType, FormData = new Dictionary<string, object> {{"messageType",messageType}}
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static string GetMessageTypes(string slug)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "message/" + slug;
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "GetMessageTypes"
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static string CreateConnector(DemonstratorApp.ExternalStructs.BDALayerManagementAPI.connector newConnector)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "connector/create";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.POST,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "CreateConnector",
                PostType = PostType.JSON,
                Data = newConnector, FormData = new Dictionary<string, object> {{"newConnector",newConnector}}
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static string BootstrapDimensionTables(DemonstratorApp.ExternalStructs.BDALayerManagementAPI.master_data master_data, string scnSlug)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "/datastore/" + scnSlug + "/boot";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.POST,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "BootstrapDimensionTables",
                PostType = PostType.JSON,
                Data = master_data, FormData = new Dictionary<string, object> {{"master_data",master_data}}
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }
        public static string PrintDimensionTablesSchema(string scnSlug)
        {
            System.Func<string> getUrl = () =>
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                return "datastore/" + scnSlug + "/schema";
            };
            var _operationRelativeUrl = getUrl.Invoke().Trim();
            if (_operationRelativeUrl?.StartsWith("/") == true && BaseUrl?.EndsWith("/") == true)
            {
                _operationRelativeUrl = _operationRelativeUrl.TrimStart('/');
            }
            var _targetUrl = BaseUrl + _operationRelativeUrl;
            var _options = new RestServiceConsumptionOptions
            {
                Url = _targetUrl,
                Verb = RestHTTPVerb.GET,
                ExtraHeaderData = new System.Collections.Generic.Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) {   },
                LogAccess = false,
                IsCachingEnabled = false,
                ApiName = "BDALayerManagementAPI",
                Operation = "PrintDimensionTablesSchema"
            };
            Func<ServiceConsumptionContainer, string> _invocation = (_httpResponse) =>
            {
                var _returnedItem = RestServiceConsumer.Consume<object>(_options, _httpResponse)?.ToString();
                return zAppDev.DotNet.Framework.Utilities.Common.SafeCast<string>(_returnedItem);
            };
            var _consumer = new ServiceConsumer<string>(_invocation);
            return _consumer.Invoke(_options);
        }

    }
}