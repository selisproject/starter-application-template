
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DemonstratorApp.DAL;

namespace DemonstratorApp.BO
{
	/// <summary>
	/// The PubSubManager extensions
	/// </summary>
	public static class PubSubManagerExtensions
	{
        public static void RestartPubSubSubscriber(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("PubSubManager", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "RestartPubSubSubscriber")) {
CLMS.SELIS.PubSubClient.PubSubSimpleManager.RemoveAllSubscribers();
}
}


public static void KeepSubscriberAlive(){using (new zAppDev.DotNet.Framework.Profiling.Profiler("PubSubManager", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "KeepSubscriberAlive")) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "PubSubManager",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "Is the subscriber alive?");
DateTime? sentTime = DateTime.UtcNow;
string certPath = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.Web.VirtualPathUtility.ToAbsolute(zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("PubSub_RootCAFilePath")));
string host = zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("PubSub_Host");
int? port = int.Parse(zAppDev.DotNet.Framework.Utilities.Common.GetConfigurationKey("PubSub_Port"));
string message = "{\"message_type\":\"ElgekaLoadList\",\"scn_slug\":\"elgeka\",\"payload\":\"\"}";
CLMS.SELIS.PubSubClient.PubSubSimpleManager.PublishMessage(certPath, host, port, message);
int? retries = 0;
while ((retries <= 5)) {
System.Threading.Thread.Sleep(2000);
retries = retries.GetValueOrDefault(0) + 1;}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "PubSubManager",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "After aloted time no PING message was received. Subscriber is DEAD! Restarting...");
}
}



        
	}
}
