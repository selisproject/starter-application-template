
// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Configuration;
using zAppDev.DotNet.Framework.Data.Domain;

using DemonstratorApp.DAL;

namespace DemonstratorApp.BO
{
	/// <summary>
	/// The Utils extensions
	/// </summary>
	public static class UtilsExtensions
	{
        public static void RaymetricsCSVParser(string path, int? transactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "RaymetricsCSVParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.Contains("raymetrics") ?? false)) == false))) {
return;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "raymetrics File Import");
int? rowCount = 0;
int? test = 0;
string[] entries = null;
string[] orderEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(transactionId);
DemonstratorApp.BO.ImportedBuyer newImportedBuyer = new DemonstratorApp.BO.ImportedBuyer();
System.Collections.Generic.List<DemonstratorApp.BO.Order> orders = new System.Collections.Generic.List<DemonstratorApp.BO.Order>();
System.Collections.Generic.List<DemonstratorApp.BO.Invoice> invoices = new System.Collections.Generic.List<DemonstratorApp.BO.Invoice>();
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
continue;}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
continue;}
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0).StartsWith("Πελάτης"))) {
newImportedBuyer.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "Customer is " + (newImportedBuyer?.Code ?? ""));
}
if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "order----> " + row);
orderEntries = row?.SplitExtended(';', false);if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("ΤΔΑ-Χ"))) {
DemonstratorApp.BO.Invoice inv = new DemonstratorApp.BO.Invoice();
inv.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);inv.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);inv.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);invoices?.Add(inv);
DemonstratorApp.BO.Order order = new DemonstratorApp.BO.Order();
order.DateOfOrder = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 0), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);order.OrderNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 4);order.Invoices = invoices.ToList();orders?.Add(order);
}
else if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("EU-INV"))) {
DemonstratorApp.BO.Invoice inv = new DemonstratorApp.BO.Invoice();
inv.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);inv.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);inv.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);inv.CustomerType = "EU Customer";invoices?.Add(inv);
DemonstratorApp.BO.Order order = new DemonstratorApp.BO.Order();
order.DateOfOrder = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 0), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);order.OrderNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 4);order.Invoices = invoices.ToList();orders?.Add(order);
}
else if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("NoE-INV"))) {
DemonstratorApp.BO.Invoice inv = new DemonstratorApp.BO.Invoice();
inv.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);inv.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);inv.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);inv.CustomerType = "Non EU Customer";invoices?.Add(inv);
DemonstratorApp.BO.Order order = new DemonstratorApp.BO.Order();
order.DateOfOrder = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 0), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);order.OrderNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 4);order.Invoices = invoices.ToList();orders?.Add(order);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;transaction?.AddOrders(orders);
new DemonstratorApp.DAL.Repository().Save<DemonstratorApp.BO.Transaction>(transaction);
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "Rowcount " + (rowCount?.ToString() ?? ""));
}
}


public static DemonstratorApp.BO.Order LecosOrderCSVParser(DemonstratorApp.BO.Order newOrder, string path, int? TransactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "LecosOrderCSVParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return null;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "LEKOS File Import");
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(TransactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return null;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "rows " + row);
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return null;
}
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0).StartsWith("Α-ΠΑ"))) {
newOrder.OrderNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);newOrder.DateOfOrder = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);newOrder.PaymentTerms = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 10);}
if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.OrderProduct product = new DemonstratorApp.BO.OrderProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));newOrder?.AddOrderProducts(product);
var _var0 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var0) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");supplier?.AddSupplierProducts(newSupplierProduct);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return newOrder;
}
}


public static DemonstratorApp.BO.DeliveryNote LecosDeliveryNoteParser(DemonstratorApp.BO.DeliveryNote newDeliveryNote, string path, int? TransactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "LecosDeliveryNoteParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return null;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "LEKOS File Import");
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(TransactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return null;
}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return null;
}
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0).StartsWith("Α-ΔΑ"))) {
newDeliveryNote.DeliveryNoteNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);newDeliveryNote.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);newDeliveryNote.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);newDeliveryNote.Amount = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 14));}
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0).StartsWith("Α-ΤΔ"))) {
newDeliveryNote.DeliveryNoteNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);newDeliveryNote.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);newDeliveryNote.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);newDeliveryNote.Amount = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 14));DemonstratorApp.BO.Invoice newInvoice = new DemonstratorApp.BO.Invoice();
newInvoice.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);newInvoice.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);newInvoice.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);newInvoice.Amount = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 14));transaction?.AddInvoices(newInvoice);
}
if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.DeliveryNoteProduct product = new DemonstratorApp.BO.DeliveryNoteProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));newDeliveryNote?.AddDeliveryNoteProducts(product);
var _var1 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var1) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");supplier?.AddSupplierProducts(newSupplierProduct);
new DemonstratorApp.DAL.Repository().Save<DemonstratorApp.BO.Supplier>(supplier);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return newDeliveryNote;
}
}


public static DemonstratorApp.BO.Invoice LecosInvoiceParser(DemonstratorApp.BO.Invoice newInvoice, string path, int? TransactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "LecosInvoiceParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return null;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "LEKOS File Import");
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(TransactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return null;
}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return null;
}
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0).StartsWith("Α-ΤΠ"))) {
newInvoice.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);newInvoice.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);newInvoice.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);newInvoice.Amount = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 14));}
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0).StartsWith("Α-ΤΔ"))) {
DemonstratorApp.BO.DeliveryNote newDeliveryNote = new DemonstratorApp.BO.DeliveryNote();
newDeliveryNote.DeliveryNoteNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);newDeliveryNote.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);newDeliveryNote.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);newDeliveryNote.Amount = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 14));newInvoice.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);newInvoice.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);newInvoice.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);newInvoice.Amount = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 14));transaction?.AddInvoices(newInvoice);
}
if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.InvoiceProduct product = new DemonstratorApp.BO.InvoiceProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));newInvoice?.AddInvoiceProducts(product);
var _var2 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var2) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");supplier?.AddSupplierProducts(newSupplierProduct);
new DemonstratorApp.DAL.Repository().Save<DemonstratorApp.BO.Supplier>(supplier);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return newInvoice;
}
}


public static DemonstratorApp.BO.CreditNote LecosCreditNoteParser(DemonstratorApp.BO.CreditNote crNote, string path, int? TransactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "LecosCreditNoteParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return null;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "LEKOS File Import");
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(TransactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return null;
}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return null;
}
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0).StartsWith("Χ-Α"))) {
crNote.CreditNoteNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);crNote.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);crNote.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);crNote.TotalPrice = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 14));}
if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.CreditNoteProduct product = new DemonstratorApp.BO.CreditNoteProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));crNote?.AddCreditNoteProducts(product);
var _var3 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var3) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");supplier?.AddSupplierProducts(newSupplierProduct);
new DemonstratorApp.DAL.Repository().Save<DemonstratorApp.BO.Supplier>(supplier);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return crNote;
}
}


public static void LecosEUInvoiseParser(this BO.Utils @this, string path, int? TransactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "LecosEUInvoiseParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "LEKOS File Import");
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(TransactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Invoice newInvoice = new DemonstratorApp.BO.Invoice();
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return;
}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return;
}
newInvoice.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);newInvoice.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);newInvoice.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);newInvoice.Amount = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 14));newInvoice.CustomerType = "EU Customer";if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.InvoiceProduct product = new DemonstratorApp.BO.InvoiceProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));newInvoice?.AddInvoiceProducts(product);
var _var4 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var4) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");supplier?.AddSupplierProducts(newSupplierProduct);
new DemonstratorApp.DAL.Repository().Save<DemonstratorApp.BO.Supplier>(supplier);
}
}
}
transaction?.AddInvoices(newInvoice);
new DemonstratorApp.DAL.Repository().Save<DemonstratorApp.BO.Transaction>(transaction);
}
}


public static void RaymetricsParser(this BO.Utils @this, string path, int? transactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "RaymetricsParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "raymetrics File Import");
int? rowCount = 0;
string[] entries = null;
string[] orderEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(transactionId);
DemonstratorApp.BO.ImportedBuyer newImportedBuyer = new DemonstratorApp.BO.ImportedBuyer();
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
continue;}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
continue;}
if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0).StartsWith("Πελάτης"))) {
newImportedBuyer.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "Customer is " + (newImportedBuyer?.Code ?? ""));
if ((transaction?.ImportedBuyer?.Code != newImportedBuyer?.Code)) {
return;
}
}
if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "order----> " + row);
orderEntries = row?.SplitExtended(';', false);if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("ΤΔΑ-Χ"))) {
DemonstratorApp.BO.Invoice inv = new DemonstratorApp.BO.Invoice();
inv.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);inv.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);inv.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);transaction?.AddInvoices(inv);
}
else if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("EU-INV"))) {
DemonstratorApp.BO.Invoice inv = new DemonstratorApp.BO.Invoice();
inv.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);inv.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);inv.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);inv.CustomerType = "EU Customer";transaction?.AddInvoices(inv);
}
else if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("NoE-INV"))) {
DemonstratorApp.BO.Invoice inv = new DemonstratorApp.BO.Invoice();
inv.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);inv.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);inv.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);inv.CustomerType = "Non EU Customer";transaction?.AddInvoices(inv);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
new DemonstratorApp.DAL.Repository().Save<DemonstratorApp.BO.Transaction>(transaction);
}
}


public static DemonstratorApp.BO.Invoice RaymetricsInvoiceParser(DemonstratorApp.BO.Invoice invoice, string path){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "RaymetricsInvoiceParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return invoice;
}
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "raymetrics File Import");
int? rowCount = 0;
string[] entries = null;
string[] orderEntries = null;
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
rowCount = rowCount.GetValueOrDefault(0) + 1;continue;}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
rowCount = rowCount.GetValueOrDefault(0) + 1;continue;}
if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "order----> " + row);
orderEntries = row?.SplitExtended(';', false);if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("ΤΔΑ-Χ"))) {
invoice.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);invoice.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);invoice.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);}
else if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("EU-INV"))) {
invoice.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);invoice.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);invoice.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);invoice.CustomerType = "EU Customer";}
else if ((zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 2).StartsWith("NoE-INV"))) {
invoice.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);invoice.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 3);invoice.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(orderEntries, 5);invoice.CustomerType = "Non EU Customer";}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return invoice;
}
}


public static DemonstratorApp.BO.Order OrderStandardCSVParser(DemonstratorApp.BO.Order order, string path, int? transactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "OrderStandardCSVParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return order;
}
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(transactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return order;
}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return order;
}
order.OrderNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);order.DateOfOrder = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);order.EstimatedDateOfDelivery = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);order.PaymentTerms = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 3);order.From = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 4);order.DeliveryTo = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 5);if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.OrderProduct product = new DemonstratorApp.BO.OrderProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));product.UnitValue = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 4);product.Price = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 5));order?.AddOrderProducts(product);
var _var5 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var5) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.UnitValue = (product?.UnitValue ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");newSupplierProduct.Price = (product?.Price ?? 0);supplier?.AddSupplierProducts(newSupplierProduct);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return order;
}
}


public static DemonstratorApp.BO.Invoice InvoiceStandardCSVParser(DemonstratorApp.BO.Invoice invoice, string path, int? transactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "InvoiceStandardCSVParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return invoice;
}
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(transactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return invoice;
}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return invoice;
}
invoice.InvoiceNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);invoice.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);invoice.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);invoice.CustomerType = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 3);invoice.Amount = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 4));invoice.TotalPrice = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 5));invoice.CumulativeBalance = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 6));if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.InvoiceProduct product = new DemonstratorApp.BO.InvoiceProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));product.UnitValue = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 4);product.Price = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 5));invoice?.AddInvoiceProducts(product);
var _var6 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var6) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.UnitValue = (product?.UnitValue ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");newSupplierProduct.Price = (product?.Price ?? 0);supplier?.AddSupplierProducts(newSupplierProduct);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return invoice;
}
}


public static DemonstratorApp.BO.DeliveryNote DeliveryNoteStandardCSVParser(DemonstratorApp.BO.DeliveryNote deliveryNote, string path, int? transactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "DeliveryNoteStandardCSVParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return deliveryNote;
}
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(transactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return deliveryNote;
}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return deliveryNote;
}
deliveryNote.DeliveryNoteNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);deliveryNote.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);deliveryNote.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.DeliveryNoteProduct product = new DemonstratorApp.BO.DeliveryNoteProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));product.UnitValue = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 4);product.Price = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 5));deliveryNote?.AddDeliveryNoteProducts(product);
var _var7 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var7) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.UnitValue = (product?.UnitValue ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");newSupplierProduct.Price = (product?.Price ?? 0);supplier?.AddSupplierProducts(newSupplierProduct);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return deliveryNote;
}
}


public static DemonstratorApp.BO.CreditNote CreditNoteStandardCSVParser(this BO.Utils @this, DemonstratorApp.BO.CreditNote creditNote, string path, int? transactionId){using (new zAppDev.DotNet.Framework.Profiling.Profiler("Utils", zAppDev.DotNet.Framework.Profiling.AppDevSymbolType.ClassOperation, "CreditNoteStandardCSVParser")) {
string pathCSV = zAppDev.DotNet.Framework.Utilities.Web.MapPath(System.IO.Path.Combine("~/App_Data/Uploads", path));
if (((((pathCSV?.ToLower().Contains("csv".ToLower()) ?? false)) == false))) {
return creditNote;
}
int? rowCount = 0;
string[] entries = null;
string[] productEntries = null;
DemonstratorApp.BO.Transaction transaction =  new DemonstratorApp.DAL.Repository().GetById<DemonstratorApp.BO.Transaction>(transactionId);
System.Collections.Generic.List<string> delim = new System.Collections.Generic.List<string>();
delim.Add("\r");
delim.Add("\n");
DemonstratorApp.BO.Supplier supplier = transaction?.Supplier;
foreach (var row in System.IO.File.ReadAllText(pathCSV).SplitExtended(delim.ToArray(), true) ?? Enumerable.Empty<string>()) {
if (((row == null || row == "") || (row == null || row.Trim() == ""))) {
return creditNote;
}
entries = row?.SplitExtended(';', false);if (((((entries.Length > 0)) == false))) {
return creditNote;
}
creditNote.CreditNoteNumber = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 0);creditNote.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 1);creditNote.DateIssued = zAppDev.DotNet.Framework.Utilities.Common.ParseExactDate(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(entries, 2), "dd/MM/yyyy", System.Globalization.CultureInfo.InvariantCulture).GetValueOrDefault(System.Data.SqlTypes.SqlDateTime.MinValue.Value);if ((rowCount > 0)) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Info, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product----> " + row);
productEntries = row?.SplitExtended(';', false);DemonstratorApp.BO.CreditNoteProduct product = new DemonstratorApp.BO.CreditNoteProduct();
product.Code = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 0);product.Description = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 1);product.MeasurementUnit = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 2);product.Quantity = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 3));product.UnitValue = zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 4);product.Price = zAppDev.DotNet.Framework.Utilities.Common.ConvertToDecimal(zAppDev.DotNet.Framework.Utilities.Common.GetItemFromArray(productEntries, 5));creditNote?.AddCreditNoteProducts(product);
var _var8 = product?.Code;if (((supplier?.SupplierProducts?.Any((sp) => sp.Code == _var8) ?? false))) {
zAppDev.DotNet.Framework.Utilities.DebugHelper.Log(zAppDev.DotNet.Framework.Utilities.DebugMessageType.Warning, "Utils",  DemonstratorApp.Hubs.EventsHub.RaiseDebugMessage, "product " + (product?.Description ?? "") + "is already saved as a Supplier product.");
}
else {
DemonstratorApp.BO.SupplierProduct newSupplierProduct = new DemonstratorApp.BO.SupplierProduct();
newSupplierProduct.Code = (product?.Code ?? "");newSupplierProduct.Description = (product?.Description ?? "");newSupplierProduct.UnitValue = (product?.UnitValue ?? "");newSupplierProduct.MeasurementUnit = (product?.MeasurementUnit ?? "");newSupplierProduct.Price = (product?.Price ?? 0);supplier?.AddSupplierProducts(newSupplierProduct);
}
}
rowCount = rowCount.GetValueOrDefault(0) + 1;}
return creditNote;
}
}



        
	}
}
