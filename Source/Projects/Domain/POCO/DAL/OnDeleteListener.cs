// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using Iesi.Collections;
using log4net;
using NHibernate.Event;
using NHibernate.Util;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using DemonstratorApp.BO;

namespace DemonstratorApp.DAL
{
    public class OnDeleteListener : IDeleteEventListener
    {
        public System.Threading.Tasks.Task OnDeleteAsync(DeleteEvent @event, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnDelete(@event), cancellationToken);
        }

        public System.Threading.Tasks.Task OnDeleteAsync(DeleteEvent @event, ISet<object> transientEntities, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnDelete(@event, transientEntities), cancellationToken);
        }

        public void OnDelete(DeleteEvent @event)
        {
            OnDelete(@event, new IdentitySet());
        }

        public void OnDelete(DeleteEvent @event, ISet<object> transientEntities)
        {
            var entity = @event.Entity;
            System.Type entityType = entity.GetType();
            if (entityType.AssemblyQualifiedName.IndexOf("ProxyAssembly", StringComparison.OrdinalIgnoreCase) > -1)
            {
                entityType = entityType.BaseType;
            }
            try
            {
                switch (entity.GetType().FullName)
                {
                case "DemonstratorApp.BO.Agreement":
                    (new Repository()).DeleteAgreement((DemonstratorApp.BO.Agreement)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.CommercialAgreement":
                    (new Repository()).DeleteCommercialAgreement((DemonstratorApp.BO.CommercialAgreement)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.FundedTransaction":
                    (new Repository()).DeleteFundedTransaction((DemonstratorApp.BO.FundedTransaction)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.AgreementStatus":
                    (new Repository()).DeleteAgreementStatus((DemonstratorApp.BO.AgreementStatus)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.DocumentAgreement":
                    (new Repository()).DeleteDocumentAgreement((DemonstratorApp.BO.DocumentAgreement)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.AlgorithmCheck":
                    (new Repository()).DeleteAlgorithmCheck((DemonstratorApp.BO.AlgorithmCheck)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.BillOfLanding":
                    (new Repository()).DeleteBillOfLanding((DemonstratorApp.BO.BillOfLanding)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Buyer":
                    (new Repository()).DeleteBuyer((DemonstratorApp.BO.Buyer)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Contact":
                    (new Repository()).DeleteContact((DemonstratorApp.BO.Contact)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.CreditNoteProduct":
                    (new Repository()).DeleteCreditNoteProduct((DemonstratorApp.BO.CreditNoteProduct)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Dashboard":
                    (new Repository()).DeleteDashboard((DemonstratorApp.BO.Dashboard)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierStatistic":
                    (new Repository()).DeleteSupplierStatistic((DemonstratorApp.BO.SupplierStatistic)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.BuyerStatistic":
                    (new Repository()).DeleteBuyerStatistic((DemonstratorApp.BO.BuyerStatistic)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.DeliveryNote":
                    (new Repository()).DeleteDeliveryNote((DemonstratorApp.BO.DeliveryNote)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.DeliveryNoteProduct":
                    (new Repository()).DeleteDeliveryNoteProduct((DemonstratorApp.BO.DeliveryNoteProduct)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.FinalAcceptanceCertificate":
                    (new Repository()).DeleteFinalAcceptanceCertificate((DemonstratorApp.BO.FinalAcceptanceCertificate)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.ImportedBuyer":
                    (new Repository()).DeleteImportedBuyer((DemonstratorApp.BO.ImportedBuyer)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Intermediary":
                    (new Repository()).DeleteIntermediary((DemonstratorApp.BO.Intermediary)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.PartialProofOfDelivery":
                    (new Repository()).DeletePartialProofOfDelivery((DemonstratorApp.BO.PartialProofOfDelivery)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.CustomsClearingDocumentation":
                    (new Repository()).DeleteCustomsClearingDocumentation((DemonstratorApp.BO.CustomsClearingDocumentation)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.IntermediaryUser":
                    (new Repository()).DeleteIntermediaryUser((DemonstratorApp.BO.IntermediaryUser)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Investor":
                    (new Repository()).DeleteInvestor((DemonstratorApp.BO.Investor)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.AnnualTransactionVolume":
                    (new Repository()).DeleteAnnualTransactionVolume((DemonstratorApp.BO.AnnualTransactionVolume)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Invoice":
                    (new Repository()).DeleteInvoice((DemonstratorApp.BO.Invoice)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.InvoiceProduct":
                    (new Repository()).DeleteInvoiceProduct((DemonstratorApp.BO.InvoiceProduct)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.LetterOfCredit":
                    (new Repository()).DeleteLetterOfCredit((DemonstratorApp.BO.LetterOfCredit)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.MeanOfTransport":
                    (new Repository()).DeleteMeanOfTransport((DemonstratorApp.BO.MeanOfTransport)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Order":
                    (new Repository()).DeleteOrder((DemonstratorApp.BO.Order)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.OrderStatus":
                    (new Repository()).DeleteOrderStatus((DemonstratorApp.BO.OrderStatus)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.CreditNote":
                    (new Repository()).DeleteCreditNote((DemonstratorApp.BO.CreditNote)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.OrderPayment":
                    (new Repository()).DeleteOrderPayment((DemonstratorApp.BO.OrderPayment)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.OrderProduct":
                    (new Repository()).DeleteOrderProduct((DemonstratorApp.BO.OrderProduct)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Payment":
                    (new Repository()).DeletePayment((DemonstratorApp.BO.Payment)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.ProofOfDelivery":
                    (new Repository()).DeleteProofOfDelivery((DemonstratorApp.BO.ProofOfDelivery)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Supplier":
                    (new Repository()).DeleteSupplier((DemonstratorApp.BO.Supplier)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierBusinessStructureData":
                    (new Repository()).DeleteSupplierBusinessStructureData((DemonstratorApp.BO.SupplierBusinessStructureData)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierReceivables":
                    (new Repository()).DeleteSupplierReceivables((DemonstratorApp.BO.SupplierReceivables)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierContactInformation":
                    (new Repository()).DeleteSupplierContactInformation((DemonstratorApp.BO.SupplierContactInformation)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierTurnover":
                    (new Repository()).DeleteSupplierTurnover((DemonstratorApp.BO.SupplierTurnover)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierExtraInformation":
                    (new Repository()).DeleteSupplierExtraInformation((DemonstratorApp.BO.SupplierExtraInformation)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierUploads":
                    (new Repository()).DeleteSupplierUploads((DemonstratorApp.BO.SupplierUploads)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierEvaluation":
                    (new Repository()).DeleteSupplierEvaluation((DemonstratorApp.BO.SupplierEvaluation)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.DataQuality":
                    (new Repository()).DeleteDataQuality((DemonstratorApp.BO.DataQuality)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.DataAvailability":
                    (new Repository()).DeleteDataAvailability((DemonstratorApp.BO.DataAvailability)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.SupplierProduct":
                    (new Repository()).DeleteSupplierProduct((DemonstratorApp.BO.SupplierProduct)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.ProductCategory":
                    (new Repository()).DeleteProductCategory((DemonstratorApp.BO.ProductCategory)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Transaction":
                    (new Repository()).DeleteTransaction((DemonstratorApp.BO.Transaction)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.TransactionStatus":
                    (new Repository()).DeleteTransactionStatus((DemonstratorApp.BO.TransactionStatus)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.TransactionOverview":
                    (new Repository()).DeleteTransactionOverview((DemonstratorApp.BO.TransactionOverview)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.TransactionPayment":
                    (new Repository()).DeleteTransactionPayment((DemonstratorApp.BO.TransactionPayment)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Turnover":
                    (new Repository()).DeleteTurnover((DemonstratorApp.BO.Turnover)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.TurnoverStatistic":
                    (new Repository()).DeleteTurnoverStatistic((DemonstratorApp.BO.TurnoverStatistic)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.Preferences":
                    (new Repository()).DeletePreferences((DemonstratorApp.BO.Preferences)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.MapPoint":
                    (new Repository()).DeleteMapPoint((DemonstratorApp.BO.MapPoint)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction":
                    (new Repository()).DeleteApplicationUserAction((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile":
                    (new Repository()).DeleteApplicationUserExternalProfile((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting":
                    (new Repository()).DeleteApplicationSetting((zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser":
                    (new Repository()).DeleteApplicationUser((zAppDev.DotNet.Framework.Identity.Model.ApplicationUser)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole":
                    (new Repository()).DeleteApplicationRole((zAppDev.DotNet.Framework.Identity.Model.ApplicationRole)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation":
                    (new Repository()).DeleteApplicationOperation((zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission":
                    (new Repository()).DeleteApplicationPermission((zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient":
                    (new Repository()).DeleteApplicationClient((zAppDev.DotNet.Framework.Identity.Model.ApplicationClient)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin":
                    (new Repository()).DeleteApplicationUserLogin((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim":
                    (new Repository()).DeleteApplicationUserClaim((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting":
                    (new Repository()).DeleteProfileSetting((zAppDev.DotNet.Framework.Identity.Model.ProfileSetting)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.Profile":
                    (new Repository()).DeleteProfile((zAppDev.DotNet.Framework.Identity.Model.Profile)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage":
                    (new Repository()).DeleteApplicationLanguage((zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat":
                    (new Repository()).DeleteDateTimeFormat((zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme":
                    (new Repository()).DeleteApplicationTheme((zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme)entity, true, true, null);
                    break;
                case "DemonstratorApp.BO.FileData":
                    (new Repository()).DeleteFileData((DemonstratorApp.BO.FileData)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration":
                    (new Repository()).DeleteAuditEntityConfiguration((zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration":
                    (new Repository()).DeleteAuditPropertyConfiguration((zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry":
                    (new Repository()).DeleteAuditLogEntry((zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType":
                    (new Repository()).DeleteAuditLogEntryType((zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType":
                    (new Repository()).DeleteAuditLogPropertyActionType((zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase":
                    (new Repository()).DeleteWorkflowContextBase((zAppDev.DotNet.Framework.Workflow.WorkflowContextBase)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule":
                    (new Repository()).DeleteWorkflowSchedule((zAppDev.DotNet.Framework.Workflow.WorkflowSchedule)entity, true, true, null);
                    break;
                }
            }
            catch (Exception e)
            {
                (LogManager.GetLogger(this.GetType())).Error("Error deleting: " + entityType.FullName, e);
                throw;
            }
        }
    }
}
