// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Web;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate;
using NHibernate.Linq;
using DemonstratorApp.BO;
using log4net;
using NHibernate.Action;
using NHibernate.Engine;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Data.DAL;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Auditing;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Identity;

namespace DemonstratorApp.DAL
{
    public class RepositoryBuilder : IRepositoryBuilder
    {
        public ICreateRepository CreateCreateRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IDeleteRepository CreateDeleteRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IRetrieveRepository CreateRetrieveRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IUpdateRepository CreateUpdateRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IWorkflowRepository CreateWorkflowRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IIdentityRepository CreateIdentityRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IAuditingRepository CreateAuditingRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }
    }

    public class Repository : IRepository
    {
        public static List<string> SystemClassNames = new List<string>()
        { "ApplicationUserAction","ApplicationUserExternalProfile","ApplicationSetting","ApplicationUser","ApplicationRole","ApplicationOperation","ApplicationPermission","ApplicationClient","ApplicationUserLogin","ApplicationUserClaim","ProfileSetting","Profile","ApplicationLanguage","DateTimeFormat","ApplicationTheme","FileData","StorageMedium","AuditEntityConfiguration","AuditPropertyConfiguration","AuditLogEntry","AuditLogEntryType","AuditLogPropertyActionType","WorkflowStatus","WorkflowExecutionResult","WorkflowContextBase","WorkflowSchedule"
        };

        private readonly ISession _currentSession;
        private readonly MiniSessionManager _sessionManager;

        public Repository(MiniSessionManager manager = null)
        {
            _sessionManager = manager;
            if (_sessionManager == null)
            {
                _sessionManager = MiniSessionManager.Instance;
            }
            // Make sure the session is open
            _sessionManager.OpenSession();
            _currentSession = _sessionManager.Session;
        }

        // For using without a MiniSessionManager
        public Repository(ISession session)
        {
            _currentSession = session;
            _sessionManager = new MiniSessionManager();
        }

        private RepositoryAction? _prevAction;
        private void SetCurrentActionTo(RepositoryAction? action)
        {
            if (_sessionManager == null) return;
            _prevAction = _sessionManager.LastAction;
            _sessionManager.LastAction = (action ?? _prevAction ?? RepositoryAction.NONE);
        }

        private void RestoreLastAction()
        {
            SetCurrentActionTo(null);
        }

        #region Implementation of IRepository

        public void DeleteAgreement(DemonstratorApp.BO.Agreement agreement, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(agreement == null || agreement.IsTransient()) return;
            foreach (var toDissasociate in agreement.AgreementStatus)
            {
                agreement.RemoveAgreementStatus(toDissasociate);
            }
            agreement.Investor = null;
            agreement.DocumentAgreement = null;
            foreach (var toDissasociate in agreement.FundedTransactions)
            {
                agreement.RemoveFundedTransactions(toDissasociate);
            }
            foreach (var toDissasociate in agreement.CommercialAgreements)
            {
                agreement.RemoveCommercialAgreements(toDissasociate);
            }
            agreement.Supplier = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.TransactionPayment>(ap=> ap.Agreement == agreement))
            {
                toDissasociate.Agreement = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Agreement>(agreement, isCascaded);
        }
        public void DeleteAgreementStatus(DemonstratorApp.BO.AgreementStatus agreementstatus, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(agreementstatus == null || agreementstatus.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Agreement>(ap=> ap.AgreementStatus.Contains(agreementstatus)))
            {
                toDissasociate.RemoveAgreementStatus(agreementstatus);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.AgreementStatus>(agreementstatus, isCascaded);
        }
        public void DeleteAlgorithmCheck(DemonstratorApp.BO.AlgorithmCheck algorithmcheck, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(algorithmcheck == null || algorithmcheck.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.AlgorithmCheck>(algorithmcheck, isCascaded);
        }
        public void DeleteAnnualTransactionVolume(DemonstratorApp.BO.AnnualTransactionVolume annualtransactionvolume, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(annualtransactionvolume == null || annualtransactionvolume.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Investor>(ap=> ap.AnnualTransactionVolumes.Contains(annualtransactionvolume)))
            {
                toDissasociate.RemoveAnnualTransactionVolumes(annualtransactionvolume);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.AnnualTransactionVolume>(annualtransactionvolume, isCascaded);
        }
        public void DeleteApplicationClient(zAppDev.DotNet.Framework.Identity.Model.ApplicationClient applicationclient, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationclient == null || applicationclient.IsTransient()) return;
            applicationclient.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationClient>(applicationclient, isCascaded);
        }
        public void DeleteApplicationLanguage(zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage applicationlanguage, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationlanguage == null || applicationlanguage.IsTransient()) return;
            if (applicationlanguage.DateTimeFormat != null)
            {
                var toDelete = applicationlanguage.DateTimeFormat;
                applicationlanguage.DateTimeFormat.ApplicationLanguage = null;
                applicationlanguage.DateTimeFormat = null;
                DeleteDateTimeFormat(toDelete, false, isCascaded, applicationlanguage);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage>(applicationlanguage, isCascaded);
        }
        public void DeleteApplicationOperation(zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation applicationoperation, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationoperation == null || applicationoperation.IsTransient()) return;
            if (applicationoperation.Permissions.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationoperation.Permissions elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationOperation";
                cs.Data["PropertyName"] = "Permissions";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation>(applicationoperation, isCascaded);
        }
        public void DeleteApplicationPermission(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission applicationpermission, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationpermission == null || applicationpermission.IsTransient()) return;
            if (applicationpermission.Roles.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationpermission.Roles elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationPermission";
                cs.Data["PropertyName"] = "Roles";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            if (applicationpermission.Users.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationpermission.Users elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationPermission";
                cs.Data["PropertyName"] = "Users";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDissasociate in applicationpermission.Operations)
            {
                applicationpermission.RemoveOperations(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(applicationpermission, isCascaded);
        }
        public void DeleteApplicationRole(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole applicationrole, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationrole == null || applicationrole.IsTransient()) return;
            if (applicationrole.Users.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationrole.Users elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationRole";
                cs.Data["PropertyName"] = "Users";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDissasociate in applicationrole.Permissions)
            {
                applicationrole.RemovePermissions(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(applicationrole, isCascaded);
        }
        public void DeleteApplicationSetting(zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting applicationsetting, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationsetting == null || applicationsetting.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting>(applicationsetting, isCascaded);
        }
        public void DeleteApplicationTheme(zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme applicationtheme, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationtheme == null || applicationtheme.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme>(applicationtheme, isCascaded);
        }
        public void DeleteApplicationUser(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser applicationuser, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuser == null || applicationuser.IsTransient()) return;
            foreach (var toDelete in applicationuser.Clients)
            {
                applicationuser.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            foreach (var toDelete in applicationuser.Logins)
            {
                applicationuser.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDelete in applicationuser.Claims)
            {
                applicationuser.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in applicationuser.Permissions)
            {
                applicationuser.RemovePermissions(toDissasociate);
            }
            if (applicationuser.Profile != null)
            {
                var toDelete = applicationuser.Profile;
                applicationuser.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, applicationuser);
            }
            foreach (var toDissasociate in applicationuser.Roles)
            {
                applicationuser.RemoveRoles(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(applicationuser, isCascaded);
        }
        public void DeleteApplicationUserAction(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction applicationuseraction, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuseraction == null || applicationuseraction.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction>(applicationuseraction, isCascaded);
        }
        public void DeleteApplicationUserClaim(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim applicationuserclaim, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserclaim == null || applicationuserclaim.IsTransient()) return;
            applicationuserclaim.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim>(applicationuserclaim, isCascaded);
        }
        public void DeleteApplicationUserExternalProfile(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile applicationuserexternalprofile, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserexternalprofile == null || applicationuserexternalprofile.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile>(applicationuserexternalprofile, isCascaded);
        }
        public void DeleteApplicationUserLogin(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin applicationuserlogin, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserlogin == null || applicationuserlogin.IsTransient()) return;
            applicationuserlogin.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin>(applicationuserlogin, isCascaded);
        }
        public void DeleteAuditEntityConfiguration(zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration auditentityconfiguration, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditentityconfiguration == null || auditentityconfiguration.IsTransient()) return;
            foreach (var toDelete in auditentityconfiguration.Properties)
            {
                auditentityconfiguration.RemoveProperties(toDelete);
                DeleteAuditPropertyConfiguration(toDelete, false, isCascaded);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration>(auditentityconfiguration, isCascaded);
        }
        public void DeleteAuditLogEntry(zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry auditlogentry, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogentry == null || auditlogentry.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry>(auditlogentry, isCascaded);
        }
        public void DeleteAuditLogEntryType(zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType auditlogentrytype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogentrytype == null || auditlogentrytype.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType>(auditlogentrytype, isCascaded);
        }
        public void DeleteAuditLogPropertyActionType(zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType auditlogpropertyactiontype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogpropertyactiontype == null || auditlogpropertyactiontype.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType>(auditlogpropertyactiontype, isCascaded);
        }
        public void DeleteAuditPropertyConfiguration(zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration auditpropertyconfiguration, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditpropertyconfiguration == null || auditpropertyconfiguration.IsTransient()) return;
            auditpropertyconfiguration.Entity = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration>(auditpropertyconfiguration, isCascaded);
        }
        public void DeleteBillOfLanding(DemonstratorApp.BO.BillOfLanding billoflanding, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(billoflanding == null || billoflanding.IsTransient()) return;
            foreach (var toDissasociate in billoflanding.Orders)
            {
                billoflanding.RemoveOrders(toDissasociate);
            }
            billoflanding.MeanOfTransport = null;
            billoflanding.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.BillOfLanding>(billoflanding, isCascaded);
        }
        public void DeleteBuyer(DemonstratorApp.BO.Buyer buyer, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(buyer == null || buyer.IsTransient()) return;
            foreach (var toDelete in buyer.Clients)
            {
                buyer.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            foreach (var toDelete in buyer.Logins)
            {
                buyer.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.BuyerStatistic>(ap=> ap.Buyer == buyer))
            {
                toDissasociate.Buyer = null;
            }
            foreach (var toDissasociate in buyer.CommercialAgreements)
            {
                buyer.RemoveCommercialAgreements(toDissasociate);
            }
            foreach (var toDelete in buyer.Claims)
            {
                buyer.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            if (buyer.Profile != null)
            {
                var toDelete = buyer.Profile;
                buyer.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, buyer);
            }
            foreach (var toDissasociate in buyer.Roles)
            {
                buyer.RemoveRoles(toDissasociate);
            }
            foreach (var toDissasociate in buyer.Permissions)
            {
                buyer.RemovePermissions(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Buyer>(buyer, isCascaded);
        }
        public void DeleteBuyerStatistic(DemonstratorApp.BO.BuyerStatistic buyerstatistic, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(buyerstatistic == null || buyerstatistic.IsTransient()) return;
            buyerstatistic.Buyer = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Dashboard>(ap=> ap.BuyerStatistics.Contains(buyerstatistic)))
            {
                toDissasociate.RemoveBuyerStatistics(buyerstatistic);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.BuyerStatistic>(buyerstatistic, isCascaded);
        }
        public void DeleteCommercialAgreement(DemonstratorApp.BO.CommercialAgreement commercialagreement, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(commercialagreement == null || commercialagreement.IsTransient()) return;
            foreach (var toDissasociate in commercialagreement.Orders)
            {
                commercialagreement.RemoveOrders(toDissasociate);
            }
            commercialagreement.ImportedBuyer = null;
            commercialagreement.Buyer = null;
            foreach (var toDissasociate in commercialagreement.Transactions)
            {
                commercialagreement.RemoveTransactions(toDissasociate);
            }
            commercialagreement.Supplier = null;
            commercialagreement.Agreement = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.CommercialAgreement>(commercialagreement, isCascaded);
        }
        public void DeleteContact(DemonstratorApp.BO.Contact contact, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(contact == null || contact.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Contact>(contact, isCascaded);
        }
        public void DeleteCreditNote(DemonstratorApp.BO.CreditNote creditnote, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(creditnote == null || creditnote.IsTransient()) return;
            foreach (var toDissasociate in creditnote.CreditNoteProducts)
            {
                creditnote.RemoveCreditNoteProducts(toDissasociate);
            }
            foreach (var toDissasociate in creditnote.Orders)
            {
                creditnote.RemoveOrders(toDissasociate);
            }
            creditnote.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.CreditNote>(creditnote, isCascaded);
        }
        public void DeleteCreditNoteProduct(DemonstratorApp.BO.CreditNoteProduct creditnoteproduct, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(creditnoteproduct == null || creditnoteproduct.IsTransient()) return;
            creditnoteproduct.CreditNote = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.CreditNoteProduct>(creditnoteproduct, isCascaded);
        }
        public void DeleteCustomsClearingDocumentation(DemonstratorApp.BO.CustomsClearingDocumentation customsclearingdocumentation, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(customsclearingdocumentation == null || customsclearingdocumentation.IsTransient()) return;
            customsclearingdocumentation.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.CustomsClearingDocumentation>(customsclearingdocumentation, isCascaded);
        }
        public void DeleteDashboard(DemonstratorApp.BO.Dashboard dashboard, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(dashboard == null || dashboard.IsTransient()) return;
            foreach (var toDissasociate in dashboard.SupplierStatistics)
            {
                dashboard.RemoveSupplierStatistics(toDissasociate);
            }
            foreach (var toDissasociate in dashboard.BuyerStatistics)
            {
                dashboard.RemoveBuyerStatistics(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Dashboard>(dashboard, isCascaded);
        }
        public void DeleteDataAvailability(DemonstratorApp.BO.DataAvailability dataavailability, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(dataavailability == null || dataavailability.IsTransient()) return;
            dataavailability.Supplier = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.DataAvailability>(dataavailability, isCascaded);
        }
        public void DeleteDataQuality(DemonstratorApp.BO.DataQuality dataquality, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(dataquality == null || dataquality.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.DataQuality == dataquality))
            {
                toDissasociate.DataQuality = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.DataQuality>(dataquality, isCascaded);
        }
        public void DeleteDateTimeFormat(zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat datetimeformat, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(datetimeformat == null || datetimeformat.IsTransient()) return;
            datetimeformat.ApplicationLanguage = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat>(datetimeformat, isCascaded);
        }
        public void DeleteDeliveryNote(DemonstratorApp.BO.DeliveryNote deliverynote, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(deliverynote == null || deliverynote.IsTransient()) return;
            foreach (var toDissasociate in deliverynote.DeliveryNoteProducts)
            {
                deliverynote.RemoveDeliveryNoteProducts(toDissasociate);
            }
            foreach (var toDissasociate in deliverynote.Orders)
            {
                deliverynote.RemoveOrders(toDissasociate);
            }
            foreach (var toDissasociate in deliverynote.Products)
            {
                deliverynote.RemoveProducts(toDissasociate);
            }
            deliverynote.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.DeliveryNote>(deliverynote, isCascaded);
        }
        public void DeleteDeliveryNoteProduct(DemonstratorApp.BO.DeliveryNoteProduct deliverynoteproduct, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(deliverynoteproduct == null || deliverynoteproduct.IsTransient()) return;
            deliverynoteproduct.DeliveryNote = null;
            deliverynoteproduct.SupplierProduct = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.DeliveryNoteProduct>(deliverynoteproduct, isCascaded);
        }
        public void DeleteDocumentAgreement(DemonstratorApp.BO.DocumentAgreement documentagreement, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(documentagreement == null || documentagreement.IsTransient()) return;
            documentagreement.Agreement = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.DocumentAgreement>(documentagreement, isCascaded);
        }
        public void DeleteFileData(DemonstratorApp.BO.FileData filedata, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(filedata == null || filedata.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.FileData>(filedata, isCascaded);
        }
        public void DeleteFinalAcceptanceCertificate(DemonstratorApp.BO.FinalAcceptanceCertificate finalacceptancecertificate, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(finalacceptancecertificate == null || finalacceptancecertificate.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Order>(ap=> ap.FinalAcceptanceCertificate == finalacceptancecertificate))
            {
                toDissasociate.FinalAcceptanceCertificate = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.FinalAcceptanceCertificate>(finalacceptancecertificate, isCascaded);
        }
        public void DeleteFundedTransaction(DemonstratorApp.BO.FundedTransaction fundedtransaction, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(fundedtransaction == null || fundedtransaction.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Agreement>(ap=> ap.FundedTransactions.Contains(fundedtransaction)))
            {
                toDissasociate.RemoveFundedTransactions(fundedtransaction);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.FundedTransaction>(fundedtransaction, isCascaded);
        }
        public void DeleteImportedBuyer(DemonstratorApp.BO.ImportedBuyer importedbuyer, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(importedbuyer == null || importedbuyer.IsTransient()) return;
            foreach (var toDissasociate in importedbuyer.CommercialAgreement)
            {
                importedbuyer.RemoveCommercialAgreement(toDissasociate);
            }
            foreach (var toDissasociate in importedbuyer.Transactions)
            {
                importedbuyer.RemoveTransactions(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.ImportedBuyer>(importedbuyer, isCascaded);
        }
        public void DeleteIntermediary(DemonstratorApp.BO.Intermediary intermediary, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(intermediary == null || intermediary.IsTransient()) return;
            foreach (var toDissasociate in intermediary.Transactions)
            {
                intermediary.RemoveTransactions(toDissasociate);
            }
            foreach (var toDissasociate in intermediary.Orders)
            {
                intermediary.RemoveOrders(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.IntermediaryUser>(ap=> ap.Intermediary == intermediary))
            {
                toDissasociate.Intermediary = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Intermediary>(intermediary, isCascaded);
        }
        public void DeleteIntermediaryUser(DemonstratorApp.BO.IntermediaryUser intermediaryuser, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(intermediaryuser == null || intermediaryuser.IsTransient()) return;
            foreach (var toDelete in intermediaryuser.Clients)
            {
                intermediaryuser.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            intermediaryuser.Intermediary = null;
            foreach (var toDelete in intermediaryuser.Logins)
            {
                intermediaryuser.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDelete in intermediaryuser.Claims)
            {
                intermediaryuser.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in intermediaryuser.Permissions)
            {
                intermediaryuser.RemovePermissions(toDissasociate);
            }
            if (intermediaryuser.Profile != null)
            {
                var toDelete = intermediaryuser.Profile;
                intermediaryuser.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, intermediaryuser);
            }
            foreach (var toDissasociate in intermediaryuser.Roles)
            {
                intermediaryuser.RemoveRoles(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.IntermediaryUser>(intermediaryuser, isCascaded);
        }
        public void DeleteInvestor(DemonstratorApp.BO.Investor investor, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(investor == null || investor.IsTransient()) return;
            foreach (var toDelete in investor.Logins)
            {
                investor.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in investor.Agreements)
            {
                investor.RemoveAgreements(toDissasociate);
            }
            foreach (var toDelete in investor.Claims)
            {
                investor.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in investor.AnnualTransactionVolumes)
            {
                investor.RemoveAnnualTransactionVolumes(toDissasociate);
            }
            foreach (var toDelete in investor.Clients)
            {
                investor.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in investor.Permissions)
            {
                investor.RemovePermissions(toDissasociate);
            }
            if (investor.Profile != null)
            {
                var toDelete = investor.Profile;
                investor.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, investor);
            }
            foreach (var toDissasociate in investor.Roles)
            {
                investor.RemoveRoles(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Investor>(investor, isCascaded);
        }
        public void DeleteInvoice(DemonstratorApp.BO.Invoice invoice, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(invoice == null || invoice.IsTransient()) return;
            foreach (var toDissasociate in invoice.InvoiceProducts)
            {
                invoice.RemoveInvoiceProducts(toDissasociate);
            }
            foreach (var toDissasociate in invoice.Orders)
            {
                invoice.RemoveOrders(toDissasociate);
            }
            foreach (var toDissasociate in invoice.Products)
            {
                invoice.RemoveProducts(toDissasociate);
            }
            invoice.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Invoice>(invoice, isCascaded);
        }
        public void DeleteInvoiceProduct(DemonstratorApp.BO.InvoiceProduct invoiceproduct, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(invoiceproduct == null || invoiceproduct.IsTransient()) return;
            invoiceproduct.Invoice = null;
            invoiceproduct.SupplierProduct = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.InvoiceProduct>(invoiceproduct, isCascaded);
        }
        public void DeleteLetterOfCredit(DemonstratorApp.BO.LetterOfCredit letterofcredit, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(letterofcredit == null || letterofcredit.IsTransient()) return;
            foreach (var toDissasociate in letterofcredit.Orders)
            {
                letterofcredit.RemoveOrders(toDissasociate);
            }
            letterofcredit.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.LetterOfCredit>(letterofcredit, isCascaded);
        }
        public void DeleteMapPoint(DemonstratorApp.BO.MapPoint mappoint, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(mappoint == null || mappoint.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.MapPoint>(mappoint, isCascaded);
        }
        public void DeleteMeanOfTransport(DemonstratorApp.BO.MeanOfTransport meanoftransport, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(meanoftransport == null || meanoftransport.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.BillOfLanding>(ap=> ap.MeanOfTransport == meanoftransport))
            {
                toDissasociate.MeanOfTransport = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.MeanOfTransport>(meanoftransport, isCascaded);
        }
        public void DeleteOrder(DemonstratorApp.BO.Order order, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(order == null || order.IsTransient()) return;
            order.FinalAcceptanceCertificate = null;
            order.CommercialAgreement = null;
            foreach (var toDissasociate in order.CreditNotes)
            {
                order.RemoveCreditNotes(toDissasociate);
            }
            foreach (var toDissasociate in order.ProofOfDeliveries)
            {
                order.RemoveProofOfDeliveries(toDissasociate);
            }
            foreach (var toDissasociate in order.OrderPayment)
            {
                order.RemoveOrderPayment(toDissasociate);
            }
            foreach (var toDissasociate in order.DeliveryNotes)
            {
                order.RemoveDeliveryNotes(toDissasociate);
            }
            foreach (var toDissasociate in order.LetterOfCredits)
            {
                order.RemoveLetterOfCredits(toDissasociate);
            }
            foreach (var toDissasociate in order.OrderProducts)
            {
                order.RemoveOrderProducts(toDissasociate);
            }
            foreach (var toDissasociate in order.BillOfLandings)
            {
                order.RemoveBillOfLandings(toDissasociate);
            }
            order.OrderStatus = null;
            foreach (var toDissasociate in order.Intermediaries)
            {
                order.RemoveIntermediaries(toDissasociate);
            }
            foreach (var toDissasociate in order.Invoices)
            {
                order.RemoveInvoices(toDissasociate);
            }
            order.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Order>(order, isCascaded);
        }
        public void DeleteOrderPayment(DemonstratorApp.BO.OrderPayment orderpayment, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderpayment == null || orderpayment.IsTransient()) return;
            orderpayment.Order = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.OrderPayment>(orderpayment, isCascaded);
        }
        public void DeleteOrderProduct(DemonstratorApp.BO.OrderProduct orderproduct, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderproduct == null || orderproduct.IsTransient()) return;
            orderproduct.SupplierProduct = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.DeliveryNote>(ap=> ap.Products.Contains(orderproduct)))
            {
                toDissasociate.RemoveProducts(orderproduct);
            }
            orderproduct.Order = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Invoice>(ap=> ap.Products.Contains(orderproduct)))
            {
                toDissasociate.RemoveProducts(orderproduct);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.OrderProduct>(orderproduct, isCascaded);
        }
        public void DeleteOrderStatus(DemonstratorApp.BO.OrderStatus orderstatus, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderstatus == null || orderstatus.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Order>(ap=> ap.OrderStatus == orderstatus))
            {
                toDissasociate.OrderStatus = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.OrderStatus>(orderstatus, isCascaded);
        }
        public void DeletePartialProofOfDelivery(DemonstratorApp.BO.PartialProofOfDelivery partialproofofdelivery, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(partialproofofdelivery == null || partialproofofdelivery.IsTransient()) return;
            partialproofofdelivery.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.PartialProofOfDelivery>(partialproofofdelivery, isCascaded);
        }
        public void DeletePayment(DemonstratorApp.BO.Payment payment, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(payment == null || payment.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Payment>(payment, isCascaded);
        }
        public void DeletePreferences(DemonstratorApp.BO.Preferences preferences, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(preferences == null || preferences.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Preferences>(preferences, isCascaded);
        }
        public void DeleteProductCategory(DemonstratorApp.BO.ProductCategory productcategory, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(productcategory == null || productcategory.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.SupplierProduct>(ap=> ap.ProductCategory == productcategory))
            {
                toDissasociate.ProductCategory = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.ProductCategory>(productcategory, isCascaded);
        }
        public void DeleteProfile(zAppDev.DotNet.Framework.Identity.Model.Profile profile, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(profile == null || profile.IsTransient()) return;
            foreach (var toDelete in profile.Settings)
            {
                profile.RemoveSettings(toDelete);
                DeleteProfileSetting(toDelete, false, isCascaded);
            }
            var _ApplicationUserApplicationUserProfilecount = this.Get<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(ap=> ap.Profile == profile).Count;
            if (
                (calledBy != null)
                &&
                (
                    (calledBy.GetType() == typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser) || calledBy.GetType().FullName == "ApplicationUserProxy")  ||
                    (calledBy.GetType() == typeof(DemonstratorApp.BO.Buyer) || calledBy.GetType().FullName == "BuyerProxy")  ||
                    (calledBy.GetType() == typeof(DemonstratorApp.BO.IntermediaryUser) || calledBy.GetType().FullName == "IntermediaryUserProxy")  ||
                    (calledBy.GetType() == typeof(DemonstratorApp.BO.Investor) || calledBy.GetType().FullName == "InvestorProxy")  ||
                    (calledBy.GetType() == typeof(DemonstratorApp.BO.Supplier) || calledBy.GetType().FullName == "SupplierProxy")
                )
            ) _ApplicationUserApplicationUserProfilecount--;
            if (_ApplicationUserApplicationUserProfilecount > 0)
            {
                var cs = new System.Data.ConstraintException("At least one ApplicationUser exists so Profile cannot be deleted");
                cs.Data["Entity"] = "ApplicationUser";
                cs.Data["PropertyName"] = "Profile";
                cs.Data["Multiplicity"] = "0..1";
                throw cs;
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.Profile>(profile, isCascaded);
        }
        public void DeleteProfileSetting(zAppDev.DotNet.Framework.Identity.Model.ProfileSetting profilesetting, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(profilesetting == null || profilesetting.IsTransient()) return;
            profilesetting.ParentProfile = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ProfileSetting>(profilesetting, isCascaded);
        }
        public void DeleteProofOfDelivery(DemonstratorApp.BO.ProofOfDelivery proofofdelivery, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(proofofdelivery == null || proofofdelivery.IsTransient()) return;
            foreach (var toDissasociate in proofofdelivery.Orders)
            {
                proofofdelivery.RemoveOrders(toDissasociate);
            }
            proofofdelivery.Transaction = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.ProofOfDelivery>(proofofdelivery, isCascaded);
        }
        public void DeleteSupplier(DemonstratorApp.BO.Supplier supplier, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplier == null || supplier.IsTransient()) return;
            foreach (var toDissasociate in supplier.CustomerAgreements)
            {
                supplier.RemoveCustomerAgreements(toDissasociate);
            }
            foreach (var toDissasociate in supplier.GeneralConstractuals)
            {
                supplier.RemoveGeneralConstractuals(toDissasociate);
            }
            foreach (var toDissasociate in supplier.Agreements)
            {
                supplier.RemoveAgreements(toDissasociate);
            }
            foreach (var toDissasociate in supplier.OrganizationalCharts)
            {
                supplier.RemoveOrganizationalCharts(toDissasociate);
            }
            supplier.SupplierReceivables = null;
            foreach (var toDissasociate in supplier.InvoicesForms)
            {
                supplier.RemoveInvoicesForms(toDissasociate);
            }
            supplier.SupplierTurnover = null;
            foreach (var toDissasociate in supplier.Declarations)
            {
                supplier.RemoveDeclarations(toDissasociate);
            }
            foreach (var toDissasociate in supplier.FinancialStatements)
            {
                supplier.RemoveFinancialStatements(toDissasociate);
            }
            supplier.SupplierEvaluation = null;
            foreach (var toDissasociate in supplier.BusinessPlans)
            {
                supplier.RemoveBusinessPlans(toDissasociate);
            }
            supplier.DataQuality = null;
            foreach (var toDissasociate in supplier.OutstandingBalances)
            {
                supplier.RemoveOutstandingBalances(toDissasociate);
            }
            supplier.DataAvailability = null;
            foreach (var toDissasociate in supplier.CurrentStatements)
            {
                supplier.RemoveCurrentStatements(toDissasociate);
            }
            foreach (var toDissasociate in supplier.SupplierProducts)
            {
                supplier.RemoveSupplierProducts(toDissasociate);
            }
            foreach (var toDissasociate in supplier.FactoringAgreements)
            {
                supplier.RemoveFactoringAgreements(toDissasociate);
            }
            foreach (var toDissasociate in supplier.Transactions)
            {
                supplier.RemoveTransactions(toDissasociate);
            }
            supplier.SupplierBusinessStructureData = null;
            supplier.SupplierContactInformation = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.TurnoverStatistic>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            foreach (var toDissasociate in supplier.EconomicEvaluations)
            {
                supplier.RemoveEconomicEvaluations(toDissasociate);
            }
            foreach (var toDissasociate in supplier.PriorOutstandingBalances)
            {
                supplier.RemovePriorOutstandingBalances(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.SupplierStatistic>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            foreach (var toDissasociate in supplier.CurrentCredits)
            {
                supplier.RemoveCurrentCredits(toDissasociate);
            }
            foreach (var toDelete in supplier.Clients)
            {
                supplier.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            supplier.SupplierExtraInformation = null;
            foreach (var toDelete in supplier.Logins)
            {
                supplier.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in supplier.CommercialAgreements)
            {
                supplier.RemoveCommercialAgreements(toDissasociate);
            }
            foreach (var toDelete in supplier.Claims)
            {
                supplier.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in supplier.CurrentSituations)
            {
                supplier.RemoveCurrentSituations(toDissasociate);
            }
            if (supplier.Profile != null)
            {
                var toDelete = supplier.Profile;
                supplier.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, supplier);
            }
            foreach (var toDissasociate in supplier.Roles)
            {
                supplier.RemoveRoles(toDissasociate);
            }
            foreach (var toDissasociate in supplier.Permissions)
            {
                supplier.RemovePermissions(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Supplier>(supplier, isCascaded);
        }
        public void DeleteSupplierBusinessStructureData(DemonstratorApp.BO.SupplierBusinessStructureData supplierbusinessstructuredata, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplierbusinessstructuredata == null || supplierbusinessstructuredata.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.SupplierBusinessStructureData == supplierbusinessstructuredata))
            {
                toDissasociate.SupplierBusinessStructureData = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierBusinessStructureData>(supplierbusinessstructuredata, isCascaded);
        }
        public void DeleteSupplierContactInformation(DemonstratorApp.BO.SupplierContactInformation suppliercontactinformation, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(suppliercontactinformation == null || suppliercontactinformation.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.SupplierContactInformation == suppliercontactinformation))
            {
                toDissasociate.SupplierContactInformation = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierContactInformation>(suppliercontactinformation, isCascaded);
        }
        public void DeleteSupplierEvaluation(DemonstratorApp.BO.SupplierEvaluation supplierevaluation, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplierevaluation == null || supplierevaluation.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.SupplierEvaluation == supplierevaluation))
            {
                toDissasociate.SupplierEvaluation = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierEvaluation>(supplierevaluation, isCascaded);
        }
        public void DeleteSupplierExtraInformation(DemonstratorApp.BO.SupplierExtraInformation supplierextrainformation, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplierextrainformation == null || supplierextrainformation.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.SupplierExtraInformation == supplierextrainformation))
            {
                toDissasociate.SupplierExtraInformation = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierExtraInformation>(supplierextrainformation, isCascaded);
        }
        public void DeleteSupplierProduct(DemonstratorApp.BO.SupplierProduct supplierproduct, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplierproduct == null || supplierproduct.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.DeliveryNoteProduct>(ap=> ap.SupplierProduct == supplierproduct))
            {
                toDissasociate.SupplierProduct = null;
            }
            supplierproduct.ProductCategory = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.InvoiceProduct>(ap=> ap.SupplierProduct == supplierproduct))
            {
                toDissasociate.SupplierProduct = null;
            }
            supplierproduct.Supplier = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.OrderProduct>(ap=> ap.SupplierProduct == supplierproduct))
            {
                toDissasociate.SupplierProduct = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierProduct>(supplierproduct, isCascaded);
        }
        public void DeleteSupplierReceivables(DemonstratorApp.BO.SupplierReceivables supplierreceivables, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplierreceivables == null || supplierreceivables.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.SupplierReceivables == supplierreceivables))
            {
                toDissasociate.SupplierReceivables = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierReceivables>(supplierreceivables, isCascaded);
        }
        public void DeleteSupplierStatistic(DemonstratorApp.BO.SupplierStatistic supplierstatistic, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplierstatistic == null || supplierstatistic.IsTransient()) return;
            supplierstatistic.Supplier = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Dashboard>(ap=> ap.SupplierStatistics.Contains(supplierstatistic)))
            {
                toDissasociate.RemoveSupplierStatistics(supplierstatistic);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierStatistic>(supplierstatistic, isCascaded);
        }
        public void DeleteSupplierTurnover(DemonstratorApp.BO.SupplierTurnover supplierturnover, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplierturnover == null || supplierturnover.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.SupplierTurnover == supplierturnover))
            {
                toDissasociate.SupplierTurnover = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierTurnover>(supplierturnover, isCascaded);
        }
        public void DeleteSupplierUploads(DemonstratorApp.BO.SupplierUploads supplieruploads, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplieruploads == null || supplieruploads.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.CurrentStatements.Contains(supplieruploads)))
            {
                toDissasociate.RemoveCurrentStatements(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.CurrentCredits.Contains(supplieruploads)))
            {
                toDissasociate.RemoveCurrentCredits(supplieruploads);
            }
            supplieruploads.Supplier2 = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.FactoringAgreements.Contains(supplieruploads)))
            {
                toDissasociate.RemoveFactoringAgreements(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.PriorOutstandingBalances.Contains(supplieruploads)))
            {
                toDissasociate.RemovePriorOutstandingBalances(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.CustomerAgreements.Contains(supplieruploads)))
            {
                toDissasociate.RemoveCustomerAgreements(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.CurrentSituations.Contains(supplieruploads)))
            {
                toDissasociate.RemoveCurrentSituations(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.GeneralConstractuals.Contains(supplieruploads)))
            {
                toDissasociate.RemoveGeneralConstractuals(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.BusinessPlans.Contains(supplieruploads)))
            {
                toDissasociate.RemoveBusinessPlans(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.OrganizationalCharts.Contains(supplieruploads)))
            {
                toDissasociate.RemoveOrganizationalCharts(supplieruploads);
            }
            supplieruploads.Supplier = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.InvoicesForms.Contains(supplieruploads)))
            {
                toDissasociate.RemoveInvoicesForms(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.OutstandingBalances.Contains(supplieruploads)))
            {
                toDissasociate.RemoveOutstandingBalances(supplieruploads);
            }
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Supplier>(ap=> ap.Declarations.Contains(supplieruploads)))
            {
                toDissasociate.RemoveDeclarations(supplieruploads);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.SupplierUploads>(supplieruploads, isCascaded);
        }
        public void DeleteTransaction(DemonstratorApp.BO.Transaction transaction, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(transaction == null || transaction.IsTransient()) return;
            transaction.Supplier = null;
            transaction.ImportedBuyer = null;
            foreach (var toDissasociate in transaction.Orders)
            {
                transaction.RemoveOrders(toDissasociate);
            }
            foreach (var toDissasociate in transaction.LetterOfCredits)
            {
                transaction.RemoveLetterOfCredits(toDissasociate);
            }
            foreach (var toDissasociate in transaction.DeliveryNotes)
            {
                transaction.RemoveDeliveryNotes(toDissasociate);
            }
            foreach (var toDissasociate in transaction.Intermediaries)
            {
                transaction.RemoveIntermediaries(toDissasociate);
            }
            foreach (var toDissasociate in transaction.ProofOfDeliveries)
            {
                transaction.RemoveProofOfDeliveries(toDissasociate);
            }
            foreach (var toDissasociate in transaction.PartialProofOfDeliveries)
            {
                transaction.RemovePartialProofOfDeliveries(toDissasociate);
            }
            transaction.CommercialAgreement = null;
            foreach (var toDissasociate in transaction.CustomsClearingDocumentations)
            {
                transaction.RemoveCustomsClearingDocumentations(toDissasociate);
            }
            foreach (var toDissasociate in transaction.Invoices)
            {
                transaction.RemoveInvoices(toDissasociate);
            }
            foreach (var toDissasociate in transaction.BillOfLandings)
            {
                transaction.RemoveBillOfLandings(toDissasociate);
            }
            foreach (var toDissasociate in transaction.CreditNotes)
            {
                transaction.RemoveCreditNotes(toDissasociate);
            }
            transaction.TransactionOverview = null;
            transaction.TransactionStatus = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.TransactionPayment>(ap=> ap.Transactions.Contains(transaction)))
            {
                toDissasociate.RemoveTransactions(transaction);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Transaction>(transaction, isCascaded);
        }
        public void DeleteTransactionOverview(DemonstratorApp.BO.TransactionOverview transactionoverview, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(transactionoverview == null || transactionoverview.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Transaction>(ap=> ap.TransactionOverview == transactionoverview))
            {
                toDissasociate.TransactionOverview = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.TransactionOverview>(transactionoverview, isCascaded);
        }
        public void DeleteTransactionPayment(DemonstratorApp.BO.TransactionPayment transactionpayment, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(transactionpayment == null || transactionpayment.IsTransient()) return;
            foreach (var toDissasociate in transactionpayment.Transactions)
            {
                transactionpayment.RemoveTransactions(toDissasociate);
            }
            transactionpayment.Agreement = null;
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.TransactionPayment>(transactionpayment, isCascaded);
        }
        public void DeleteTransactionStatus(DemonstratorApp.BO.TransactionStatus transactionstatus, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(transactionstatus == null || transactionstatus.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Transaction>(ap=> ap.TransactionStatus == transactionstatus))
            {
                toDissasociate.TransactionStatus = null;
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.TransactionStatus>(transactionstatus, isCascaded);
        }
        public void DeleteTurnover(DemonstratorApp.BO.Turnover turnover, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(turnover == null || turnover.IsTransient()) return;
            foreach (var toDissasociate in turnover.TurnoverStatistics)
            {
                turnover.RemoveTurnoverStatistics(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.Turnover>(turnover, isCascaded);
        }
        public void DeleteTurnoverStatistic(DemonstratorApp.BO.TurnoverStatistic turnoverstatistic, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(turnoverstatistic == null || turnoverstatistic.IsTransient()) return;
            turnoverstatistic.Supplier = null;
            foreach (var toDissasociate in this.Get<DemonstratorApp.BO.Turnover>(ap=> ap.TurnoverStatistics.Contains(turnoverstatistic)))
            {
                toDissasociate.RemoveTurnoverStatistics(turnoverstatistic);
            }
            if (!doNotCallDeleteForThis) Delete<DemonstratorApp.BO.TurnoverStatistic>(turnoverstatistic, isCascaded);
        }
        public void DeleteWorkflowContextBase(zAppDev.DotNet.Framework.Workflow.WorkflowContextBase workflowcontextbase, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(workflowcontextbase == null || workflowcontextbase.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Workflow.WorkflowContextBase>(workflowcontextbase, isCascaded);
        }
        public void DeleteWorkflowSchedule(zAppDev.DotNet.Framework.Workflow.WorkflowSchedule workflowschedule, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(workflowschedule == null || workflowschedule.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Workflow.WorkflowSchedule>(workflowschedule, isCascaded);
        }


        #endregion

        #region Generic Data Retrieval
        public T GetById<T>(object id, bool throwIfNotFound = true) where T : class
        {
            SetCurrentActionTo(RepositoryAction.GET);
            var obj = _currentSession.Get<T>(id);

            if(throwIfNotFound && obj == null)
            {
                throw new ApplicationException($"No {typeof(T).Name} was found with key: {id}.");
            }

            if (!CanReadInstance(obj))
            {
                if (throwIfNotFound)
                {
                    throw new ApplicationException($"No Read Access for {typeof(T).Name} instance with key: {id}.");
                }
                else
                {
                    obj = null;
                }
            }

            RestoreLastAction();
            return obj;
        }

        public void SaveWithoutTransaction<T>(T entity) where T : class
        {
            try
            {
                _currentSession.SaveOrUpdate(entity);
            }
            catch (zAppDev.DotNet.Framework.Exceptions.BusinessException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Business Exception", e);
                throw;
            }
            catch (NHibernate.Exceptions.GenericADOException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch (NonUniqueObjectException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch(StaleObjectStateException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                _currentSession.Merge(entity);
            }
        }

        public void Save<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.SAVE);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof (T).Name + " was specified.");
            }

            SaveWithoutTransaction(entity);
            RestoreLastAction();
        }

        public void Insert<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.INSERT);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }

            try
            {
                _currentSession.Save(entity);
            }
            catch (zAppDev.DotNet.Framework.Exceptions.BusinessException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Business Exception", e);
                throw;
            }
            catch (NHibernate.Exceptions.GenericADOException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                throw;
            }
            catch (NonUniqueObjectException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                throw;
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                _currentSession.Merge(entity);
            }

            RestoreLastAction();
        }

        public void Update<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.UPDATE);
            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }
            _currentSession.Update(entity);
            RestoreLastAction();
        }

        public void Delete<T>(T entity, bool isCascaded = false) where T : class
        {
            SetCurrentActionTo(RepositoryAction.DELETE);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }

            // var exists = GetMainQuery<T>().WithOptions(options => options.SetCacheable(true)).Any(a => a == entity);
            // if (!exists)
            // {
            //    RestoreLastAction();
            //    return;
            // }

            try
            {
                _currentSession.Delete(entity);
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof (T));
                log.Error("Error deleting", e);
                throw;
            }

            RestoreLastAction();
        }

        public T Merge<T>(T entity) where T : class
        {
            return new ObjectGraphWalker().AssociateGraphWithSession(entity, MiniSessionManager.Instance);
        }

        public List<double> GeAggregates<T>(Expression<Func<T, bool>> predicate,
                                            Dictionary<Expression<Func<T, double>>, string> requestedAggregates)
        {
            var mainQuery = GetMainQuery<T>();
            List<double> aggregateValues = new List<double>();
            if (predicate == null)
            {
                predicate = a => true;
            }
            foreach (var entry in requestedAggregates)
            {
                try
                {
                    switch (entry.Value)
                    {
                    case "SUM":
                        aggregateValues.Add(mainQuery.Where(predicate).Sum(entry.Key));
                        break;
                    case "AVERAGE":
                        aggregateValues.Add(mainQuery.Where(predicate).Average(entry.Key));
                        break;
                    case "COUNT":
                        aggregateValues.Add(mainQuery.Where(predicate).Count());
                        break;
                    }
                }
                catch
                {
                    aggregateValues.Add(0);
                }
            }
            return aggregateValues;
        }

        private static IFutureValue<TResult> ToFutureValue<TSource, TResult>(IQueryable source, Expression<Func<IQueryable<TSource>, TResult>> selector)
        where TResult : struct
        {
            var provider = (DefaultQueryProvider)source.Provider;
            var method = ((MethodCallExpression)selector.Body).Method;
            var expression = Expression.Call(null, method, source.Expression);
            return provider.ExecuteFutureValue<TResult>(expression);
        }

        public List<T> Get<T>(Expression<Func<T, bool>> predicate,
                              int startRowIndex,
                              int pageSize,
                              Dictionary<Expression<Func<T, object>>, bool> orderBy,
                              out int totalRecords, bool cacheQuery = true)
        {
            if (orderBy == null)
            {
                orderBy = new Dictionary<Expression<Func<T, object>>, bool>();
            }
            if (predicate?.Body.NodeType == ExpressionType.Constant
                    && (((ConstantExpression)predicate.Body)).Value != null)
            {
                var val = (bool)(((ConstantExpression)predicate.Body)).Value;
                if (val)
                {
                    predicate = null;
                }
                else
                {
                    totalRecords = 0;
                    return new List<T>();
                }
            }
            var objects = GetMainQuery<T>();
            if (cacheQuery)
            {
                objects = objects.WithOptions(options => options.SetCacheable(true));
            }
            var futureCount = predicate == null
                              ? ToFutureValue<T, int>(objects, x => x.Count())
                              : ToFutureValue<T, int>(objects.Where(predicate), x => x.Count());
            var ordered = (IOrderedQueryable<T>)((predicate == null)
                                                 ? objects
                                                 : objects.Where(predicate));
            if (orderBy.Keys.Count > 0)
            {
                var first = orderBy.First();
                ordered = first.Value
                          ? ordered.OrderBy(first.Key)
                          : ordered.OrderByDescending(first.Key);
                foreach (var pair in orderBy.Skip(1))
                {
                    ordered = pair.Value
                              ? ordered.ThenBy(pair.Key)
                              : ordered.ThenByDescending(pair.Key);
                }
            }
            var paged = ordered.Skip(startRowIndex).Take(pageSize).ToFuture().ToList();
            totalRecords = futureCount.Value;
            return paged;
        }

        public IQueryable<T> GetAsQueryable<T>(Expression<Func<T, bool>> predicate = null, bool cacheQuery = true)
        {
            SetCurrentActionTo(RepositoryAction.GET);
            if (predicate?.Body.NodeType == ExpressionType.Constant
                    && (((ConstantExpression)predicate.Body)).Value != null)
            {
                var val = (bool)(((ConstantExpression)predicate.Body)).Value;
                if (val)
                {
                    predicate = null;
                }
                else
                {
                    // If the predicate returns false then return empty resultset
                    RestoreLastAction();
                    return Enumerable.Empty<T>().AsQueryable();
                }
            }
            var query = GetMainQuery<T>();
            if (predicate != null)
            {
                query = query.Where(predicate);
            }
            if (cacheQuery)
            {
                query = query.WithOptions(options => options.SetCacheable(true));
            }
            RestoreLastAction();
            return query;
        }

        public List<T> Get<T>(Expression<Func<T, bool>> predicate, bool cacheQuery = true)
        {
            var list = GetAsQueryable(predicate, cacheQuery).ToList();
            list = AppendPendingInsertions(predicate, list);
            list = RemovePendingDeletions(predicate, list);
            return list;
        }

        public int? GetCount<T>(Expression<Func<T, bool>> predicate = null, bool cacheQuery = true)
        {
            return GetAsQueryable(predicate, cacheQuery).Count()
                   + GetItemsToAppend(predicate).Count()
                   - GetItemsToRemove(predicate).Count();
        }

        public List<T> GetAll<T>(bool cacheQuery = true)
        {
            return Get<T>(null, cacheQuery);
        }

        public List<T> GetAll<T>(int startRowIndex, int pageSize, out int totalRecords, bool cacheQuery = true)
        {
            SetCurrentActionTo(RepositoryAction.GET);
            var items = GetMainQuery<T>();
            if (cacheQuery)
            {
                items = items.WithOptions(options => options.SetCacheable(true));
            }
            var futureCount = ToFutureValue<T, int>(items, x => x.Count());
            var paged = items.Skip(startRowIndex).Take(pageSize).ToFuture().ToList();
            totalRecords = futureCount.Value;
            RestoreLastAction();
            return paged;
        }

        public IQueryable<T> GetMainQuery<T>()
        {
            return ApplyReadFilter(_currentSession.Query<T>());
        }

        #endregion

        #region Helper Methods
        private static readonly FieldInfo _insertionsFieldInfo = typeof(ActionQueue).GetField("insertions", BindingFlags.NonPublic | BindingFlags.Instance);
        private List<T> AppendPendingInsertions<T>(Expression<Func<T, bool>> predicate, List<T> list = null)
        {
            if (list == null)
            {
                list = new List<T>();
            }
            if (!_sessionManager.WillFlush || !(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue).AreInsertionsOrDeletionsQueued)
                return list;
            var itemsToAppend = GetItemsToAppend(predicate);
            var items = itemsToAppend.ToList();
            if (!items.Any()) return list;
            if (!items.Any())
            {
                list = items;
            }
            if (list.Count > items.Count)
            {
                list.AddRange(items);
            }
            else
            {
                items.AddRange(list);
                list = items;
            }
            return list;
        }

        private static readonly FieldInfo _deletionsFieldInfo = typeof(ActionQueue).GetField("deletions", BindingFlags.NonPublic | BindingFlags.Instance);
        private List<T> RemovePendingDeletions<T>(Expression<Func<T, bool>> predicate, List<T> list = null)
        {
            if (list == null)
            {
                list = new List<T>();
            }
            if (list.Count == 0)
            {
                return list;
            }
            if (!_sessionManager.WillFlush || !(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue).AreInsertionsOrDeletionsQueued)
                return list;
            var itemsToRemove = GetItemsToRemove(predicate);
            foreach (var item in itemsToRemove)
            {
                if (list.Contains(item))
                {
                    list.Remove(item);
                }
            }
            return list;
        }

        private IQueryable<T> GetItemsToAppend<T>(Expression<Func<T, bool>> predicate)
        {
            if (_insertionsFieldInfo == null)
            {
                throw new ApplicationException("Could not find `insertions` field in NH Session's Action Queue!");
            }
            var insertions = (List<AbstractEntityInsertAction>)_insertionsFieldInfo.GetValue(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue);
            var itemsToAppend
                = insertions
                  .Cast<EntityInsertAction>()
                  .Where(a => a.EntityName == typeof(T).FullName)
                  .Select(a => (T)a.Instance)
                  .AsQueryable();
            if (predicate != null)
            {
                itemsToAppend = itemsToAppend.Where(predicate);
            }
            return itemsToAppend;
        }

        private IQueryable<T> GetItemsToRemove<T>(Expression<Func<T, bool>> predicate)
        {
            if (_deletionsFieldInfo == null)
            {
                throw new ApplicationException("Could not find `deletions` field in NH Session's Action Queue!");
            }
            var deletions = (List<EntityDeleteAction>) _deletionsFieldInfo.GetValue(((NHibernate.Impl.SessionImpl) _currentSession).ActionQueue);
            var itemsToRemove
                = deletions
                  .Where(a => a.EntityName == typeof (T).FullName)
                  .Select(a => (T) a.Instance)
                  .AsQueryable();
            if (predicate != null)
            {
                itemsToRemove = itemsToRemove.Where(predicate);
            }
            return itemsToRemove;
        }

        public void Evict(object obj)
        {
            _currentSession.Evict(obj);
        }

        private IQueryable<T> ApplyReadFilter<T>(IQueryable<T> query)
        {
            return query;
        }


        private bool CanReadInstance<T>(T instance)
        {
            if (instance == null) return true;
            var tmpList = new List<T> { instance };
            tmpList = ApplyReadFilter(tmpList.AsQueryable()).ToList();
            return tmpList.Any();
        }

        #endregion
    }
}