// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DemonstratorApp.BO
{
    /// <summary>
    /// The Agreement class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Agreement : IDomainModelClass
    {
        #region Agreement's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="StartDate")]
        protected DateTime? startDate;
        [DataMember(Name="EndDate")]
        protected DateTime? endDate;
        [DataMember(Name="FundedRate")]
        protected decimal? fundedRate;
        [DataMember(Name="FundedAmount")]
        protected decimal? fundedAmount;
        [DataMember(Name="CurrentAgreementStatus")]
        protected string currentAgreementStatus;
        [DataMember(Name="InterestRate")]
        protected decimal? interestRate;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Agreement's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The StartDate property
///
/// </summary>
///
        public virtual DateTime? StartDate
        {
            get
            {
                return startDate;
            }
            set
            {
                startDate = value;
            }
        }
/// <summary>
/// The EndDate property
///
/// </summary>
///
        public virtual DateTime? EndDate
        {
            get
            {
                return endDate;
            }
            set
            {
                endDate = value;
            }
        }
/// <summary>
/// The FundedRate property
///
/// </summary>
///
        public virtual decimal? FundedRate
        {
            get
            {
                return fundedRate;
            }
            set
            {
                fundedRate = value;
            }
        }
/// <summary>
/// The FundedAmount property
///
/// </summary>
///
        public virtual decimal? FundedAmount
        {
            get
            {
                return fundedAmount;
            }
            set
            {
                fundedAmount = value;
            }
        }
/// <summary>
/// The CurrentAgreementStatus property
///
/// </summary>
///
        public virtual string CurrentAgreementStatus
        {
            get
            {
                var __valToGet = Get_CurrentAgreementStatus();
                return __valToGet;
            }
            set
            {
                currentAgreementStatus = value;
            }
        }
/// <summary>
/// The InterestRate property
///
/// </summary>
///
        public virtual decimal? InterestRate
        {
            get
            {
                return interestRate;
            }
            set
            {
                interestRate = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Agreement's Participant Properties
        [DataMember(Name="Investor")]
        protected Investor investor;
        public virtual Investor Investor
        {
            get
            {
                return investor;
            }
            set
            {
                if(Equals(investor, value)) return;
                var __oldValue = investor;
                investor?.InternalRemoveAgreements(this);
                investor = value;
                if (value != null)
                {
                    investor.InternalAddAgreements(this);
                }
            }
        }
        [DataMember(Name="Supplier")]
        protected Supplier supplier;
        public virtual Supplier Supplier
        {
            get
            {
                return supplier;
            }
            set
            {
                if(Equals(supplier, value)) return;
                var __oldValue = supplier;
                supplier?.InternalRemoveAgreements(this);
                supplier = value;
                if (value != null)
                {
                    supplier.InternalAddAgreements(this);
                }
            }
        }
        [DataMember(Name="FundedTransactions")]
        protected IList<FundedTransaction> fundedTransactions = new List<FundedTransaction>();
        public virtual List<FundedTransaction> FundedTransactions
        {
            get
            {
                if (fundedTransactions is FundedTransaction[])
                {
                    fundedTransactions = fundedTransactions.ToList();
                }
                if (fundedTransactions == null)
                {
                    fundedTransactions = new List<FundedTransaction>();
                }
                return fundedTransactions.ToList();
            }
            set
            {
                if (fundedTransactions is FundedTransaction[])
                {
                    fundedTransactions = fundedTransactions.ToList();
                }
                if (fundedTransactions != null)
                {
                    var __itemsToDelete = new List<FundedTransaction>(fundedTransactions);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveFundedTransactions(__item);
                    }
                }
                if(value == null)
                {
                    fundedTransactions = new List<FundedTransaction>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddFundedTransactions(__item);
                }
            }
        }
        public virtual void AddFundedTransactions(IList<FundedTransaction> __items)
        {
            foreach (var __item in __items)
            {
                AddFundedTransactions(__item);
            }
        }

        public virtual void InternalAddFundedTransactions(FundedTransaction __item)
        {
            if (__item == null || disableInternalAdditions) return;
            fundedTransactions?.Add(__item);
        }

        public virtual void InternalRemoveFundedTransactions(FundedTransaction __item)
        {
            if (__item == null) return;
            fundedTransactions?.Remove(__item);
        }

        public virtual void AddFundedTransactions(FundedTransaction __item)
        {
            if (__item == null) return;
            InternalAddFundedTransactions(__item);
        }

        public virtual void AddAtIndexFundedTransactions(int index, FundedTransaction __item)
        {
            if (__item == null) return;
            fundedTransactions?.Insert(index, __item);
        }

        public virtual void RemoveFundedTransactions(FundedTransaction __item)
        {
            if (__item != null)
            {
                InternalRemoveFundedTransactions(__item);
            }
        }
        public virtual void SetFundedTransactionsAt(FundedTransaction __item, int __index)
        {
            if (__item == null)
            {
                fundedTransactions[__index] = null;
            }
            else
            {
                fundedTransactions[__index] = __item;
            }
        }

        public virtual void ClearFundedTransactions()
        {
            if (fundedTransactions!=null)
            {
                var __itemsToRemove = fundedTransactions.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveFundedTransactions(__item);
                }
            }
        }
        [DataMember(Name="AgreementStatus")]
        protected IList<AgreementStatus> agreementStatus = new List<AgreementStatus>();
        public virtual List<AgreementStatus> AgreementStatus
        {
            get
            {
                if (agreementStatus is AgreementStatus[])
                {
                    agreementStatus = agreementStatus.ToList();
                }
                if (agreementStatus == null)
                {
                    agreementStatus = new List<AgreementStatus>();
                }
                return agreementStatus.ToList();
            }
            set
            {
                if (agreementStatus is AgreementStatus[])
                {
                    agreementStatus = agreementStatus.ToList();
                }
                if (agreementStatus != null)
                {
                    var __itemsToDelete = new List<AgreementStatus>(agreementStatus);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveAgreementStatus(__item);
                    }
                }
                if(value == null)
                {
                    agreementStatus = new List<AgreementStatus>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddAgreementStatus(__item);
                }
            }
        }
        public virtual void AddAgreementStatus(IList<AgreementStatus> __items)
        {
            foreach (var __item in __items)
            {
                AddAgreementStatus(__item);
            }
        }

        public virtual void InternalAddAgreementStatus(AgreementStatus __item)
        {
            if (__item == null || disableInternalAdditions) return;
            agreementStatus?.Add(__item);
        }

        public virtual void InternalRemoveAgreementStatus(AgreementStatus __item)
        {
            if (__item == null) return;
            agreementStatus?.Remove(__item);
        }

        public virtual void AddAgreementStatus(AgreementStatus __item)
        {
            if (__item == null) return;
            InternalAddAgreementStatus(__item);
        }

        public virtual void AddAtIndexAgreementStatus(int index, AgreementStatus __item)
        {
            if (__item == null) return;
            agreementStatus?.Insert(index, __item);
        }

        public virtual void RemoveAgreementStatus(AgreementStatus __item)
        {
            if (__item != null)
            {
                InternalRemoveAgreementStatus(__item);
            }
        }
        public virtual void SetAgreementStatusAt(AgreementStatus __item, int __index)
        {
            if (__item == null)
            {
                agreementStatus[__index] = null;
            }
            else
            {
                agreementStatus[__index] = __item;
            }
        }

        public virtual void ClearAgreementStatus()
        {
            if (agreementStatus!=null)
            {
                var __itemsToRemove = agreementStatus.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveAgreementStatus(__item);
                }
            }
        }
        [DataMember(Name="DocumentAgreement")]
        protected DocumentAgreement documentAgreement;
        public virtual DocumentAgreement DocumentAgreement
        {
            get
            {
                return documentAgreement;
            }
            set
            {
                if(Equals(documentAgreement, value)) return;
                var __oldValue = documentAgreement;
                if (value != null)
                {
                    if(documentAgreement != null && !Equals(documentAgreement, value))
                        documentAgreement.Agreement = null;
                    documentAgreement = value;
                    if(documentAgreement.Agreement != this)
                        documentAgreement.Agreement = this;
                }
                else
                {
                    if (documentAgreement != null)
                    {
                        var __obj = documentAgreement;
                        documentAgreement = null;
                        __obj.Agreement = null;
                    }
                }
            }
        }
        [DataMember(Name="CommercialAgreements")]
        protected IList<CommercialAgreement> commercialAgreements = new List<CommercialAgreement>();
        public virtual List<CommercialAgreement> CommercialAgreements
        {
            get
            {
                if (commercialAgreements is CommercialAgreement[])
                {
                    commercialAgreements = commercialAgreements.ToList();
                }
                if (commercialAgreements == null)
                {
                    commercialAgreements = new List<CommercialAgreement>();
                }
                return commercialAgreements.ToList();
            }
            set
            {
                if (commercialAgreements is CommercialAgreement[])
                {
                    commercialAgreements = commercialAgreements.ToList();
                }
                if (commercialAgreements != null)
                {
                    var __itemsToDelete = new List<CommercialAgreement>(commercialAgreements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCommercialAgreements(__item);
                    }
                }
                if(value == null)
                {
                    commercialAgreements = new List<CommercialAgreement>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCommercialAgreements(__item);
                }
            }
        }
        public virtual void AddCommercialAgreements(IList<CommercialAgreement> __items)
        {
            foreach (var __item in __items)
            {
                AddCommercialAgreements(__item);
            }
        }

        public virtual void InternalAddCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null || disableInternalAdditions) return;
            commercialAgreements?.Add(__item);
        }

        public virtual void InternalRemoveCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null) return;
            commercialAgreements?.Remove(__item);
        }

        public virtual void AddCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null) return;
            if (__item.Agreement != this)
                __item.Agreement = this;
        }

        public virtual void AddAtIndexCommercialAgreements(int index, CommercialAgreement __item)
        {
            if (__item == null) return;
            commercialAgreements?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Agreement != this)
                    __item.Agreement = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveCommercialAgreements(CommercialAgreement __item)
        {
            if (__item != null)
            {
                __item.Agreement = null;
            }
        }
        public virtual void SetCommercialAgreementsAt(CommercialAgreement __item, int __index)
        {
            if (__item == null)
            {
                commercialAgreements[__index].Agreement = null;
            }
            else
            {
                commercialAgreements[__index] = __item;
                if (__item.Agreement != this)
                    __item.Agreement = this;
            }
        }

        public virtual void ClearCommercialAgreements()
        {
            if (commercialAgreements!=null)
            {
                var __itemsToRemove = commercialAgreements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCommercialAgreements(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Agreement class
/// </summary>
/// <returns>New Agreement object</returns>
/// <remarks></remarks>
        public Agreement() {}
        #endregion
        #region Accessors Implementation
        private string Get_CurrentAgreementStatus()
        {
            if (this?.agreementStatus != null)
            {
                System.Collections.Generic.List<DemonstratorApp.BO.AgreementStatus> firstAgreementStatus = this?.agreementStatus?.OrderByDescending((a) => a.DateOccured).ToList();
                if (((firstAgreementStatus?.Count() ?? 0) > 0))
                {
                    return (firstAgreementStatus?.FirstOrDefault()?.Status ?? "");
                }
                else
                {
                    return "";
                }
            }
            else
            {
                return "";
            }
        }

        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (CurrentAgreementStatus != null && CurrentAgreementStatus.Length > 100)
            {
                __errors.Add("Length of property 'CurrentAgreementStatus' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Agreement' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (StartDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EndDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (FundedRate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (FundedAmount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CurrentAgreementStatus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (InterestRate?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Agreement] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Agreement Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Agreement copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Agreement)copiedObjects[this];
            copy = copy ?? new Agreement();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.StartDate = this.StartDate;
            copy.EndDate = this.EndDate;
            copy.FundedRate = this.FundedRate;
            copy.FundedAmount = this.FundedAmount;
            copy.CurrentAgreementStatus = this.CurrentAgreementStatus;
            copy.InterestRate = this.InterestRate;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            if(deep && this.investor != null)
            {
                if (!copiedObjects.Contains(this.investor))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Investor = this.Investor;
                    else if (asNew)
                        copy.Investor = this.Investor.Copy(deep, copiedObjects, true);
                    else
                        copy.investor = this.investor.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Investor = (Investor)copiedObjects[this.Investor];
                    else
                        copy.investor = (Investor)copiedObjects[this.Investor];
                }
            }
            if(deep && this.supplier != null)
            {
                if (!copiedObjects.Contains(this.supplier))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Supplier = this.Supplier;
                    else if (asNew)
                        copy.Supplier = this.Supplier.Copy(deep, copiedObjects, true);
                    else
                        copy.supplier = this.supplier.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Supplier = (Supplier)copiedObjects[this.Supplier];
                    else
                        copy.supplier = (Supplier)copiedObjects[this.Supplier];
                }
            }
            copy.fundedTransactions = new List<FundedTransaction>();
            if(deep && this.fundedTransactions != null)
            {
                foreach (var __item in this.fundedTransactions)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddFundedTransactions(__item);
                        else
                            copy.AddFundedTransactions(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddFundedTransactions((FundedTransaction)copiedObjects[__item]);
                    }
                }
            }
            copy.agreementStatus = new List<AgreementStatus>();
            if(deep && this.agreementStatus != null)
            {
                foreach (var __item in this.agreementStatus)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddAgreementStatus(__item);
                        else
                            copy.AddAgreementStatus(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddAgreementStatus((AgreementStatus)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.documentAgreement != null)
            {
                if (!copiedObjects.Contains(this.documentAgreement))
                {
                    if (asNew && reuseNestedObjects)
                        copy.DocumentAgreement = this.DocumentAgreement;
                    else if (asNew)
                        copy.DocumentAgreement = this.DocumentAgreement.Copy(deep, copiedObjects, true);
                    else
                        copy.documentAgreement = this.documentAgreement.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.DocumentAgreement = (DocumentAgreement)copiedObjects[this.DocumentAgreement];
                    else
                        copy.documentAgreement = (DocumentAgreement)copiedObjects[this.DocumentAgreement];
                }
            }
            copy.commercialAgreements = new List<CommercialAgreement>();
            if(deep && this.commercialAgreements != null)
            {
                foreach (var __item in this.commercialAgreements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCommercialAgreements(__item);
                        else
                            copy.AddCommercialAgreements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCommercialAgreements((CommercialAgreement)copiedObjects[__item]);
                    }
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Agreement;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Agreement x, Agreement y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Agreement x, Agreement y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Agreement compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
