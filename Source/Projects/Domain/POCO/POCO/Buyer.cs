// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DemonstratorApp.BO
{
    /// <summary>
    /// The Buyer class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    [KnownType(typeof(ApplicationUser))]

    public class Buyer : ApplicationUser, IDomainModelClass
    {
        #region Buyer's Fields
        [DataMember(Name="BuyerId")]
        protected int? buyerId;
        [DataMember(Name="PrimaryPhone")]
        protected string primaryPhone;
        [DataMember(Name="SecondaryPhone")]
        protected string secondaryPhone;
        [DataMember(Name="Fax")]
        protected string fax;
        [DataMember(Name="WebSite")]
        protected string webSite;
        [DataMember(Name="Company")]
        protected string company;
        [DataMember(Name="AnnualTurnOver")]
        protected decimal? annualTurnOver;
        [DataMember(Name="LegalRepresentative")]
        protected string legalRepresentative;
        [DataMember(Name="Rating")]
        protected string rating;
        [DataMember(Name="CreditInsurance")]
        protected bool creditInsurance;
        [DataMember(Name="Logo")]
        protected string logo;
        [DataMember(Name="AddressOne")]
        protected string addressOne;
        [DataMember(Name="AddressTwo")]
        protected string addressTwo;
        [DataMember(Name="VatNumber")]
        protected string vatNumber;
        [DataMember(Name="ContactPerson")]
        protected string contactPerson;
        [DataMember(Name="Prefix")]
        protected string prefix;
        [DataMember(Name="Temp")]
        protected string temp;
#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Buyer's Properties
/// <summary>
/// The BuyerId property
///
/// </summary>
///
        public virtual int? BuyerId
        {
            get
            {
                return buyerId;
            }
            set
            {
                buyerId = value;
            }
        }
/// <summary>
/// The PrimaryPhone property
///
/// </summary>
///
        public virtual string PrimaryPhone
        {
            get
            {
                return primaryPhone;
            }
            set
            {
                primaryPhone = value;
            }
        }
/// <summary>
/// The SecondaryPhone property
///
/// </summary>
///
        public virtual string SecondaryPhone
        {
            get
            {
                return secondaryPhone;
            }
            set
            {
                secondaryPhone = value;
            }
        }
/// <summary>
/// The Fax property
///
/// </summary>
///
        public virtual string Fax
        {
            get
            {
                return fax;
            }
            set
            {
                fax = value;
            }
        }
/// <summary>
/// The WebSite property
///
/// </summary>
///
        public virtual string WebSite
        {
            get
            {
                return webSite;
            }
            set
            {
                webSite = value;
            }
        }
/// <summary>
/// The Company property
///
/// </summary>
///
        public virtual string Company
        {
            get
            {
                return company;
            }
            set
            {
                company = value;
            }
        }
/// <summary>
/// The AnnualTurnOver property
///
/// </summary>
///
        public virtual decimal? AnnualTurnOver
        {
            get
            {
                return annualTurnOver;
            }
            set
            {
                annualTurnOver = value;
            }
        }
/// <summary>
/// The LegalRepresentative property
///
/// </summary>
///
        public virtual string LegalRepresentative
        {
            get
            {
                return legalRepresentative;
            }
            set
            {
                legalRepresentative = value;
            }
        }
/// <summary>
/// The Rating property
///
/// </summary>
///
        public virtual string Rating
        {
            get
            {
                return rating;
            }
            set
            {
                rating = value;
            }
        }
/// <summary>
/// The CreditInsurance property
///
/// </summary>
///
        public virtual bool CreditInsurance
        {
            get
            {
                return creditInsurance;
            }
            set
            {
                creditInsurance = value;
            }
        }
/// <summary>
/// The Logo property
///
/// </summary>
///
        public virtual string Logo
        {
            get
            {
                return logo;
            }
            set
            {
                logo = value;
            }
        }
/// <summary>
/// The AddressOne property
///
/// </summary>
///
        public virtual string AddressOne
        {
            get
            {
                return addressOne;
            }
            set
            {
                addressOne = value;
            }
        }
/// <summary>
/// The AddressTwo property
///
/// </summary>
///
        public virtual string AddressTwo
        {
            get
            {
                return addressTwo;
            }
            set
            {
                addressTwo = value;
            }
        }
/// <summary>
/// The VatNumber property
///
/// </summary>
///
        public virtual string VatNumber
        {
            get
            {
                return vatNumber;
            }
            set
            {
                vatNumber = value;
            }
        }
/// <summary>
/// The ContactPerson property
///
/// </summary>
///
        public virtual string ContactPerson
        {
            get
            {
                return contactPerson;
            }
            set
            {
                contactPerson = value;
            }
        }
/// <summary>
/// The Prefix property
///
/// </summary>
///
        public virtual string Prefix
        {
            get
            {
                return prefix;
            }
            set
            {
                prefix = value;
            }
        }
/// <summary>
/// The Temp property
///
/// </summary>
///
        public virtual string Temp
        {
            get
            {
                return temp;
            }
            set
            {
                temp = value;
            }
        }
        #endregion
        #region Buyer's Participant Properties
        [DataMember(Name="CommercialAgreements")]
        protected IList<CommercialAgreement> commercialAgreements = new List<CommercialAgreement>();
        public virtual List<CommercialAgreement> CommercialAgreements
        {
            get
            {
                if (commercialAgreements is CommercialAgreement[])
                {
                    commercialAgreements = commercialAgreements.ToList();
                }
                if (commercialAgreements == null)
                {
                    commercialAgreements = new List<CommercialAgreement>();
                }
                return commercialAgreements.ToList();
            }
            set
            {
                if (commercialAgreements is CommercialAgreement[])
                {
                    commercialAgreements = commercialAgreements.ToList();
                }
                if (commercialAgreements != null)
                {
                    var __itemsToDelete = new List<CommercialAgreement>(commercialAgreements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCommercialAgreements(__item);
                    }
                }
                if(value == null)
                {
                    commercialAgreements = new List<CommercialAgreement>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCommercialAgreements(__item);
                }
            }
        }
        public virtual void AddCommercialAgreements(IList<CommercialAgreement> __items)
        {
            foreach (var __item in __items)
            {
                AddCommercialAgreements(__item);
            }
        }

        public virtual void InternalAddCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null || disableInternalAdditions) return;
            commercialAgreements?.Add(__item);
        }

        public virtual void InternalRemoveCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null) return;
            commercialAgreements?.Remove(__item);
        }

        public virtual void AddCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null) return;
            if (__item.Buyer != this)
                __item.Buyer = this;
        }

        public virtual void AddAtIndexCommercialAgreements(int index, CommercialAgreement __item)
        {
            if (__item == null) return;
            commercialAgreements?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Buyer != this)
                    __item.Buyer = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveCommercialAgreements(CommercialAgreement __item)
        {
            if (__item != null)
            {
                __item.Buyer = null;
            }
        }
        public virtual void SetCommercialAgreementsAt(CommercialAgreement __item, int __index)
        {
            if (__item == null)
            {
                commercialAgreements[__index].Buyer = null;
            }
            else
            {
                commercialAgreements[__index] = __item;
                if (__item.Buyer != this)
                    __item.Buyer = this;
            }
        }

        public virtual void ClearCommercialAgreements()
        {
            if (commercialAgreements!=null)
            {
                var __itemsToRemove = commercialAgreements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCommercialAgreements(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Buyer class
/// </summary>
/// <returns>New Buyer object</returns>
/// <remarks></remarks>
        public Buyer(): base() {}
        #endregion
        #region Methods

        public override List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            __errors = base._Validate(throwException);
            if (PrimaryPhone != null && PrimaryPhone.Length > 100)
            {
                __errors.Add("Length of property 'PrimaryPhone' cannot be greater than 100.");
            }
            if (SecondaryPhone != null && SecondaryPhone.Length > 100)
            {
                __errors.Add("Length of property 'SecondaryPhone' cannot be greater than 100.");
            }
            if (Fax != null && Fax.Length > 100)
            {
                __errors.Add("Length of property 'Fax' cannot be greater than 100.");
            }
            if (WebSite != null && WebSite.Length > 100)
            {
                __errors.Add("Length of property 'WebSite' cannot be greater than 100.");
            }
            if (Company != null && Company.Length > 100)
            {
                __errors.Add("Length of property 'Company' cannot be greater than 100.");
            }
            if (LegalRepresentative != null && LegalRepresentative.Length > 100)
            {
                __errors.Add("Length of property 'LegalRepresentative' cannot be greater than 100.");
            }
            if (Rating != null && Rating.Length > 100)
            {
                __errors.Add("Length of property 'Rating' cannot be greater than 100.");
            }
            if (Logo != null && Logo.Length > 100)
            {
                __errors.Add("Length of property 'Logo' cannot be greater than 100.");
            }
            if (AddressOne != null && AddressOne.Length > 100)
            {
                __errors.Add("Length of property 'AddressOne' cannot be greater than 100.");
            }
            if (AddressTwo != null && AddressTwo.Length > 100)
            {
                __errors.Add("Length of property 'AddressTwo' cannot be greater than 100.");
            }
            if (VatNumber != null && VatNumber.Length > 100)
            {
                __errors.Add("Length of property 'VatNumber' cannot be greater than 100.");
            }
            if (ContactPerson != null && ContactPerson.Length > 100)
            {
                __errors.Add("Length of property 'ContactPerson' cannot be greater than 100.");
            }
            if (Prefix != null && Prefix.Length > 100)
            {
                __errors.Add("Length of property 'Prefix' cannot be greater than 100.");
            }
            if (Temp != null && Temp.Length > 100)
            {
                __errors.Add("Length of property 'Temp' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Buyer' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (BuyerId?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PrimaryPhone?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SecondaryPhone?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Fax?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (WebSite?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Company?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AnnualTurnOver?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (LegalRepresentative?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Rating?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CreditInsurance.GetHashCode() );
            hashCode = hashCode * -1521134295 + (Logo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AddressOne?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AddressTwo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (VatNumber?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ContactPerson?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Prefix?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Temp?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (UserName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PasswordHash?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SecurityStamp?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EmailConfirmed.GetHashCode() );
            hashCode = hashCode * -1521134295 + (LockoutEnabled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (PhoneNumberConfirmed.GetHashCode() );
            hashCode = hashCode * -1521134295 + (TwoFactorEnabled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (AccessFailedCount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Email?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PhoneNumber?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (LockoutEndDate?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Buyer] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Buyer Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Buyer copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Buyer)copiedObjects[this];
            copy = copy ?? new Buyer();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
            }
            copy.BuyerId = this.BuyerId;
            copy.PrimaryPhone = this.PrimaryPhone;
            copy.SecondaryPhone = this.SecondaryPhone;
            copy.Fax = this.Fax;
            copy.WebSite = this.WebSite;
            copy.Company = this.Company;
            copy.AnnualTurnOver = this.AnnualTurnOver;
            copy.LegalRepresentative = this.LegalRepresentative;
            copy.Rating = this.Rating;
            copy.CreditInsurance = this.CreditInsurance;
            copy.Logo = this.Logo;
            copy.AddressOne = this.AddressOne;
            copy.AddressTwo = this.AddressTwo;
            copy.VatNumber = this.VatNumber;
            copy.ContactPerson = this.ContactPerson;
            copy.Prefix = this.Prefix;
            copy.Temp = this.Temp;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.commercialAgreements = new List<CommercialAgreement>();
            if(deep && this.commercialAgreements != null)
            {
                foreach (var __item in this.commercialAgreements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCommercialAgreements(__item);
                        else
                            copy.AddCommercialAgreements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCommercialAgreements((CommercialAgreement)copiedObjects[__item]);
                    }
                }
            }
            base.Copy(deep, copiedObjects, asNew, reuseNestedObjects, copy);
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Buyer;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Buyer x, Buyer y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Buyer x, Buyer y)
        {
            return !(x == y);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion


    }
}
