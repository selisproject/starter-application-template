// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DemonstratorApp.BO
{
    /// <summary>
    /// The Investor class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    [KnownType(typeof(ApplicationUser))]

    public class Investor : ApplicationUser, IDomainModelClass
    {
        #region Investor's Fields
        [DataMember(Name="InvestorId")]
        protected int? investorId;
        [DataMember(Name="PrimaryPhone")]
        protected string primaryPhone;
        [DataMember(Name="SecondaryPhone")]
        protected string secondaryPhone;
        [DataMember(Name="Fax")]
        protected string fax;
        [DataMember(Name="WebSite")]
        protected string webSite;
        [DataMember(Name="Company")]
        protected string company;
        [DataMember(Name="ContactPerson")]
        protected string contactPerson;
        [DataMember(Name="Logo")]
        protected string logo;
        [DataMember(Name="SupervisingAuthority")]
        protected string supervisingAuthority;
        [DataMember(Name="RegistrationNo")]
        protected string registrationNo;
        [DataMember(Name="DomainFocus")]
        protected string domainFocus;
        [DataMember(Name="TurnOver")]
        protected decimal? turnOver;
        [DataMember(Name="VatNumber")]
        protected string vatNumber;
        [DataMember(Name="AddressTwo")]
        protected string addressTwo;
        [DataMember(Name="AddressOne")]
        protected string addressOne;
        [DataMember(Name="ManagingDirector")]
        protected string managingDirector;
        [DataMember(Name="TargetMarket")]
        protected string targetMarket;
        [DataMember(Name="CustomerSizeFrom")]
        protected string customerSizeFrom;
        [DataMember(Name="CustomerSizeTo")]
        protected string customerSizeTo;
        [DataMember(Name="LocalJurisdiction")]
        protected string localJurisdiction;
        [DataMember(Name="CommercialRegNo")]
        protected string commercialRegNo;
        [DataMember(Name="OtherMinRequirements")]
        protected string otherMinRequirements;
        [DataMember(Name="CRR")]
        protected bool cRR;
        [DataMember(Name="UploadCompliance")]
        protected string uploadCompliance;
        [DataMember(Name="OtherMemberships")]
        protected string otherMemberships;
        [DataMember(Name="OtherDomainFocus")]
        protected string otherDomainFocus;
        [DataMember(Name="InvestorStatus")]
        protected string investorStatus;
        [DataMember(Name="IAFC")]
        protected bool iAFC;
        [DataMember(Name="Prefix")]
        protected string prefix;
#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Investor's Properties
/// <summary>
/// The InvestorId property
///
/// </summary>
///
        public virtual int? InvestorId
        {
            get
            {
                return investorId;
            }
            set
            {
                investorId = value;
            }
        }
/// <summary>
/// The PrimaryPhone property
///
/// </summary>
///
        public virtual string PrimaryPhone
        {
            get
            {
                return primaryPhone;
            }
            set
            {
                primaryPhone = value;
            }
        }
/// <summary>
/// The SecondaryPhone property
///
/// </summary>
///
        public virtual string SecondaryPhone
        {
            get
            {
                return secondaryPhone;
            }
            set
            {
                secondaryPhone = value;
            }
        }
/// <summary>
/// The Fax property
///
/// </summary>
///
        public virtual string Fax
        {
            get
            {
                return fax;
            }
            set
            {
                fax = value;
            }
        }
/// <summary>
/// The WebSite property
///
/// </summary>
///
        public virtual string WebSite
        {
            get
            {
                return webSite;
            }
            set
            {
                webSite = value;
            }
        }
/// <summary>
/// The Company property
///
/// </summary>
///
        public virtual string Company
        {
            get
            {
                return company;
            }
            set
            {
                company = value;
            }
        }
/// <summary>
/// The ContactPerson property
///
/// </summary>
///
        public virtual string ContactPerson
        {
            get
            {
                return contactPerson;
            }
            set
            {
                contactPerson = value;
            }
        }
/// <summary>
/// The Logo property
///
/// </summary>
///
        public virtual string Logo
        {
            get
            {
                return logo;
            }
            set
            {
                logo = value;
            }
        }
/// <summary>
/// The SupervisingAuthority property
///
/// </summary>
///
        public virtual string SupervisingAuthority
        {
            get
            {
                return supervisingAuthority;
            }
            set
            {
                supervisingAuthority = value;
            }
        }
/// <summary>
/// The RegistrationNo property
///
/// </summary>
///
        public virtual string RegistrationNo
        {
            get
            {
                return registrationNo;
            }
            set
            {
                registrationNo = value;
            }
        }
/// <summary>
/// The DomainFocus property
///
/// </summary>
///
        public virtual string DomainFocus
        {
            get
            {
                return domainFocus;
            }
            set
            {
                domainFocus = value;
            }
        }
/// <summary>
/// The TurnOver property
///
/// </summary>
///
        public virtual decimal? TurnOver
        {
            get
            {
                return turnOver;
            }
            set
            {
                turnOver = value;
            }
        }
/// <summary>
/// The VatNumber property
///
/// </summary>
///
        public virtual string VatNumber
        {
            get
            {
                return vatNumber;
            }
            set
            {
                vatNumber = value;
            }
        }
/// <summary>
/// The AddressTwo property
///
/// </summary>
///
        public virtual string AddressTwo
        {
            get
            {
                return addressTwo;
            }
            set
            {
                addressTwo = value;
            }
        }
/// <summary>
/// The AddressOne property
///
/// </summary>
///
        public virtual string AddressOne
        {
            get
            {
                return addressOne;
            }
            set
            {
                addressOne = value;
            }
        }
/// <summary>
/// The ManagingDirector property
///
/// </summary>
///
        public virtual string ManagingDirector
        {
            get
            {
                return managingDirector;
            }
            set
            {
                managingDirector = value;
            }
        }
/// <summary>
/// The TargetMarket property
///
/// </summary>
///
        public virtual string TargetMarket
        {
            get
            {
                return targetMarket;
            }
            set
            {
                targetMarket = value;
            }
        }
/// <summary>
/// The CustomerSizeFrom property
///
/// </summary>
///
        public virtual string CustomerSizeFrom
        {
            get
            {
                return customerSizeFrom;
            }
            set
            {
                customerSizeFrom = value;
            }
        }
/// <summary>
/// The CustomerSizeTo property
///
/// </summary>
///
        public virtual string CustomerSizeTo
        {
            get
            {
                return customerSizeTo;
            }
            set
            {
                customerSizeTo = value;
            }
        }
/// <summary>
/// The LocalJurisdiction property
///
/// </summary>
///
        public virtual string LocalJurisdiction
        {
            get
            {
                return localJurisdiction;
            }
            set
            {
                localJurisdiction = value;
            }
        }
/// <summary>
/// The CommercialRegNo property
///
/// </summary>
///
        public virtual string CommercialRegNo
        {
            get
            {
                return commercialRegNo;
            }
            set
            {
                commercialRegNo = value;
            }
        }
/// <summary>
/// The OtherMinRequirements property
///
/// </summary>
///
        public virtual string OtherMinRequirements
        {
            get
            {
                return otherMinRequirements;
            }
            set
            {
                otherMinRequirements = value;
            }
        }
/// <summary>
/// The CRR property
///
/// </summary>
///
        public virtual bool CRR
        {
            get
            {
                return cRR;
            }
            set
            {
                cRR = value;
            }
        }
/// <summary>
/// The UploadCompliance property
///
/// </summary>
///
        public virtual string UploadCompliance
        {
            get
            {
                return uploadCompliance;
            }
            set
            {
                uploadCompliance = value;
            }
        }
/// <summary>
/// The OtherMemberships property
///
/// </summary>
///
        public virtual string OtherMemberships
        {
            get
            {
                return otherMemberships;
            }
            set
            {
                otherMemberships = value;
            }
        }
/// <summary>
/// The OtherDomainFocus property
///
/// </summary>
///
        public virtual string OtherDomainFocus
        {
            get
            {
                return otherDomainFocus;
            }
            set
            {
                otherDomainFocus = value;
            }
        }
/// <summary>
/// The InvestorStatus property
///
/// </summary>
///
        public virtual string InvestorStatus
        {
            get
            {
                return investorStatus;
            }
            set
            {
                investorStatus = value;
            }
        }
/// <summary>
/// The IAFC property
///
/// </summary>
///
        public virtual bool IAFC
        {
            get
            {
                return iAFC;
            }
            set
            {
                iAFC = value;
            }
        }
/// <summary>
/// The Prefix property
///
/// </summary>
///
        public virtual string Prefix
        {
            get
            {
                return prefix;
            }
            set
            {
                prefix = value;
            }
        }
        #endregion
        #region Investor's Participant Properties
        [DataMember(Name="Agreements")]
        protected IList<Agreement> agreements = new List<Agreement>();
        public virtual List<Agreement> Agreements
        {
            get
            {
                if (agreements is Agreement[])
                {
                    agreements = agreements.ToList();
                }
                if (agreements == null)
                {
                    agreements = new List<Agreement>();
                }
                return agreements.ToList();
            }
            set
            {
                if (agreements is Agreement[])
                {
                    agreements = agreements.ToList();
                }
                if (agreements != null)
                {
                    var __itemsToDelete = new List<Agreement>(agreements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveAgreements(__item);
                    }
                }
                if(value == null)
                {
                    agreements = new List<Agreement>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddAgreements(__item);
                }
            }
        }
        public virtual void AddAgreements(IList<Agreement> __items)
        {
            foreach (var __item in __items)
            {
                AddAgreements(__item);
            }
        }

        public virtual void InternalAddAgreements(Agreement __item)
        {
            if (__item == null || disableInternalAdditions) return;
            agreements?.Add(__item);
        }

        public virtual void InternalRemoveAgreements(Agreement __item)
        {
            if (__item == null) return;
            agreements?.Remove(__item);
        }

        public virtual void AddAgreements(Agreement __item)
        {
            if (__item == null) return;
            if (__item.Investor != this)
                __item.Investor = this;
        }

        public virtual void AddAtIndexAgreements(int index, Agreement __item)
        {
            if (__item == null) return;
            agreements?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Investor != this)
                    __item.Investor = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveAgreements(Agreement __item)
        {
            if (__item != null)
            {
                __item.Investor = null;
            }
        }
        public virtual void SetAgreementsAt(Agreement __item, int __index)
        {
            if (__item == null)
            {
                agreements[__index].Investor = null;
            }
            else
            {
                agreements[__index] = __item;
                if (__item.Investor != this)
                    __item.Investor = this;
            }
        }

        public virtual void ClearAgreements()
        {
            if (agreements!=null)
            {
                var __itemsToRemove = agreements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveAgreements(__item);
                }
            }
        }
        [DataMember(Name="AnnualTransactionVolumes")]
        protected IList<AnnualTransactionVolume> annualTransactionVolumes = new List<AnnualTransactionVolume>();
        public virtual List<AnnualTransactionVolume> AnnualTransactionVolumes
        {
            get
            {
                if (annualTransactionVolumes is AnnualTransactionVolume[])
                {
                    annualTransactionVolumes = annualTransactionVolumes.ToList();
                }
                if (annualTransactionVolumes == null)
                {
                    annualTransactionVolumes = new List<AnnualTransactionVolume>();
                }
                return annualTransactionVolumes.ToList();
            }
            set
            {
                if (annualTransactionVolumes is AnnualTransactionVolume[])
                {
                    annualTransactionVolumes = annualTransactionVolumes.ToList();
                }
                if (annualTransactionVolumes != null)
                {
                    var __itemsToDelete = new List<AnnualTransactionVolume>(annualTransactionVolumes);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveAnnualTransactionVolumes(__item);
                    }
                }
                if(value == null)
                {
                    annualTransactionVolumes = new List<AnnualTransactionVolume>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddAnnualTransactionVolumes(__item);
                }
            }
        }
        public virtual void AddAnnualTransactionVolumes(IList<AnnualTransactionVolume> __items)
        {
            foreach (var __item in __items)
            {
                AddAnnualTransactionVolumes(__item);
            }
        }

        public virtual void InternalAddAnnualTransactionVolumes(AnnualTransactionVolume __item)
        {
            if (__item == null || disableInternalAdditions) return;
            annualTransactionVolumes?.Add(__item);
        }

        public virtual void InternalRemoveAnnualTransactionVolumes(AnnualTransactionVolume __item)
        {
            if (__item == null) return;
            annualTransactionVolumes?.Remove(__item);
        }

        public virtual void AddAnnualTransactionVolumes(AnnualTransactionVolume __item)
        {
            if (__item == null) return;
            InternalAddAnnualTransactionVolumes(__item);
        }

        public virtual void AddAtIndexAnnualTransactionVolumes(int index, AnnualTransactionVolume __item)
        {
            if (__item == null) return;
            annualTransactionVolumes?.Insert(index, __item);
        }

        public virtual void RemoveAnnualTransactionVolumes(AnnualTransactionVolume __item)
        {
            if (__item != null)
            {
                InternalRemoveAnnualTransactionVolumes(__item);
            }
        }
        public virtual void SetAnnualTransactionVolumesAt(AnnualTransactionVolume __item, int __index)
        {
            if (__item == null)
            {
                annualTransactionVolumes[__index] = null;
            }
            else
            {
                annualTransactionVolumes[__index] = __item;
            }
        }

        public virtual void ClearAnnualTransactionVolumes()
        {
            if (annualTransactionVolumes!=null)
            {
                var __itemsToRemove = annualTransactionVolumes.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveAnnualTransactionVolumes(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Investor class
/// </summary>
/// <returns>New Investor object</returns>
/// <remarks></remarks>
        public Investor(): base() {}
        #endregion
        #region Methods

        public override List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            __errors = base._Validate(throwException);
            if (PrimaryPhone != null && PrimaryPhone.Length > 100)
            {
                __errors.Add("Length of property 'PrimaryPhone' cannot be greater than 100.");
            }
            if (SecondaryPhone != null && SecondaryPhone.Length > 100)
            {
                __errors.Add("Length of property 'SecondaryPhone' cannot be greater than 100.");
            }
            if (Fax != null && Fax.Length > 100)
            {
                __errors.Add("Length of property 'Fax' cannot be greater than 100.");
            }
            if (WebSite != null && WebSite.Length > 100)
            {
                __errors.Add("Length of property 'WebSite' cannot be greater than 100.");
            }
            if (Company != null && Company.Length > 100)
            {
                __errors.Add("Length of property 'Company' cannot be greater than 100.");
            }
            if (ContactPerson != null && ContactPerson.Length > 100)
            {
                __errors.Add("Length of property 'ContactPerson' cannot be greater than 100.");
            }
            if (Logo != null && Logo.Length > 100)
            {
                __errors.Add("Length of property 'Logo' cannot be greater than 100.");
            }
            if (SupervisingAuthority != null && SupervisingAuthority.Length > 100)
            {
                __errors.Add("Length of property 'SupervisingAuthority' cannot be greater than 100.");
            }
            if (RegistrationNo != null && RegistrationNo.Length > 100)
            {
                __errors.Add("Length of property 'RegistrationNo' cannot be greater than 100.");
            }
            if (DomainFocus != null && DomainFocus.Length > 100)
            {
                __errors.Add("Length of property 'DomainFocus' cannot be greater than 100.");
            }
            if (VatNumber != null && VatNumber.Length > 100)
            {
                __errors.Add("Length of property 'VatNumber' cannot be greater than 100.");
            }
            if (AddressTwo != null && AddressTwo.Length > 100)
            {
                __errors.Add("Length of property 'AddressTwo' cannot be greater than 100.");
            }
            if (AddressOne != null && AddressOne.Length > 100)
            {
                __errors.Add("Length of property 'AddressOne' cannot be greater than 100.");
            }
            if (ManagingDirector != null && ManagingDirector.Length > 100)
            {
                __errors.Add("Length of property 'ManagingDirector' cannot be greater than 100.");
            }
            if (TargetMarket != null && TargetMarket.Length > 100)
            {
                __errors.Add("Length of property 'TargetMarket' cannot be greater than 100.");
            }
            if (CustomerSizeFrom != null && CustomerSizeFrom.Length > 100)
            {
                __errors.Add("Length of property 'CustomerSizeFrom' cannot be greater than 100.");
            }
            if (CustomerSizeTo != null && CustomerSizeTo.Length > 100)
            {
                __errors.Add("Length of property 'CustomerSizeTo' cannot be greater than 100.");
            }
            if (LocalJurisdiction != null && LocalJurisdiction.Length > 100)
            {
                __errors.Add("Length of property 'LocalJurisdiction' cannot be greater than 100.");
            }
            if (CommercialRegNo != null && CommercialRegNo.Length > 100)
            {
                __errors.Add("Length of property 'CommercialRegNo' cannot be greater than 100.");
            }
            if (OtherMinRequirements != null && OtherMinRequirements.Length > 2147483647)
            {
                __errors.Add("Length of property 'OtherMinRequirements' cannot be greater than 2147483647.");
            }
            if (UploadCompliance != null && UploadCompliance.Length > 2147483647)
            {
                __errors.Add("Length of property 'UploadCompliance' cannot be greater than 2147483647.");
            }
            if (OtherMemberships != null && OtherMemberships.Length > 2147483647)
            {
                __errors.Add("Length of property 'OtherMemberships' cannot be greater than 2147483647.");
            }
            if (OtherDomainFocus != null && OtherDomainFocus.Length > 100)
            {
                __errors.Add("Length of property 'OtherDomainFocus' cannot be greater than 100.");
            }
            if (InvestorStatus != null && InvestorStatus.Length > 100)
            {
                __errors.Add("Length of property 'InvestorStatus' cannot be greater than 100.");
            }
            if (Prefix != null && Prefix.Length > 100)
            {
                __errors.Add("Length of property 'Prefix' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Investor' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (InvestorId?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PrimaryPhone?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SecondaryPhone?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Fax?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (WebSite?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Company?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ContactPerson?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Logo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SupervisingAuthority?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RegistrationNo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DomainFocus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TurnOver?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (VatNumber?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AddressTwo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AddressOne?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ManagingDirector?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TargetMarket?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CustomerSizeFrom?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CustomerSizeTo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (LocalJurisdiction?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CommercialRegNo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OtherMinRequirements?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CRR.GetHashCode() );
            hashCode = hashCode * -1521134295 + (UploadCompliance?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OtherMemberships?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OtherDomainFocus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (InvestorStatus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (IAFC.GetHashCode() );
            hashCode = hashCode * -1521134295 + (Prefix?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (UserName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PasswordHash?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SecurityStamp?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EmailConfirmed.GetHashCode() );
            hashCode = hashCode * -1521134295 + (LockoutEnabled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (PhoneNumberConfirmed.GetHashCode() );
            hashCode = hashCode * -1521134295 + (TwoFactorEnabled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (AccessFailedCount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Email?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PhoneNumber?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (LockoutEndDate?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Investor] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Investor Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Investor copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Investor)copiedObjects[this];
            copy = copy ?? new Investor();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
            }
            copy.InvestorId = this.InvestorId;
            copy.PrimaryPhone = this.PrimaryPhone;
            copy.SecondaryPhone = this.SecondaryPhone;
            copy.Fax = this.Fax;
            copy.WebSite = this.WebSite;
            copy.Company = this.Company;
            copy.ContactPerson = this.ContactPerson;
            copy.Logo = this.Logo;
            copy.SupervisingAuthority = this.SupervisingAuthority;
            copy.RegistrationNo = this.RegistrationNo;
            copy.DomainFocus = this.DomainFocus;
            copy.TurnOver = this.TurnOver;
            copy.VatNumber = this.VatNumber;
            copy.AddressTwo = this.AddressTwo;
            copy.AddressOne = this.AddressOne;
            copy.ManagingDirector = this.ManagingDirector;
            copy.TargetMarket = this.TargetMarket;
            copy.CustomerSizeFrom = this.CustomerSizeFrom;
            copy.CustomerSizeTo = this.CustomerSizeTo;
            copy.LocalJurisdiction = this.LocalJurisdiction;
            copy.CommercialRegNo = this.CommercialRegNo;
            copy.OtherMinRequirements = this.OtherMinRequirements;
            copy.CRR = this.CRR;
            copy.UploadCompliance = this.UploadCompliance;
            copy.OtherMemberships = this.OtherMemberships;
            copy.OtherDomainFocus = this.OtherDomainFocus;
            copy.InvestorStatus = this.InvestorStatus;
            copy.IAFC = this.IAFC;
            copy.Prefix = this.Prefix;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.agreements = new List<Agreement>();
            if(deep && this.agreements != null)
            {
                foreach (var __item in this.agreements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddAgreements(__item);
                        else
                            copy.AddAgreements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddAgreements((Agreement)copiedObjects[__item]);
                    }
                }
            }
            copy.annualTransactionVolumes = new List<AnnualTransactionVolume>();
            if(deep && this.annualTransactionVolumes != null)
            {
                foreach (var __item in this.annualTransactionVolumes)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddAnnualTransactionVolumes(__item);
                        else
                            copy.AddAnnualTransactionVolumes(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddAnnualTransactionVolumes((AnnualTransactionVolume)copiedObjects[__item]);
                    }
                }
            }
            base.Copy(deep, copiedObjects, asNew, reuseNestedObjects, copy);
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Investor;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Investor x, Investor y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Investor x, Investor y)
        {
            return !(x == y);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion


    }
}
