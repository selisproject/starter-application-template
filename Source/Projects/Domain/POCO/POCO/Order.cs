// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DemonstratorApp.BO
{
    /// <summary>
    /// The Order class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Order : IDomainModelClass
    {
        #region Order's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="OrderNumber")]
        protected string orderNumber;
        [DataMember(Name="EstimatedDateOfDelivery")]
        protected DateTime? estimatedDateOfDelivery;
        [DataMember(Name="PaymentTerms")]
        protected string paymentTerms;
        [DataMember(Name="IntermediateParty")]
        protected bool intermediateParty;
        [DataMember(Name="IsCancelled")]
        protected bool isCancelled;
        [DataMember(Name="DateOfOrder")]
        protected DateTime? dateOfOrder;
        [DataMember(Name="OrderAmount")]
        protected decimal? orderAmount;
        [DataMember(Name="TotalPrice")]
        protected decimal? totalPrice;
        [DataMember(Name="From")]
        protected string from;
        [DataMember(Name="DeliveryTo")]
        protected string deliveryTo;
        [DataMember(Name="OrderAttachment")]
        protected string orderAttachment;
        [DataMember(Name="Status")]
        protected DemonstratorApp.BO.Status? status;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Order's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The OrderNumber property
///
/// </summary>
///
        public virtual string OrderNumber
        {
            get
            {
                return orderNumber;
            }
            set
            {
                orderNumber = value;
            }
        }
/// <summary>
/// The EstimatedDateOfDelivery property
///
/// </summary>
///
        public virtual DateTime? EstimatedDateOfDelivery
        {
            get
            {
                return estimatedDateOfDelivery;
            }
            set
            {
                estimatedDateOfDelivery = value;
            }
        }
/// <summary>
/// The PaymentTerms property
///
/// </summary>
///
        public virtual string PaymentTerms
        {
            get
            {
                return paymentTerms;
            }
            set
            {
                paymentTerms = value;
            }
        }
/// <summary>
/// The IntermediateParty property
///
/// </summary>
///
        public virtual bool IntermediateParty
        {
            get
            {
                return intermediateParty;
            }
            set
            {
                intermediateParty = value;
            }
        }
/// <summary>
/// The IsCancelled property
///
/// </summary>
///
        public virtual bool IsCancelled
        {
            get
            {
                return isCancelled;
            }
            set
            {
                isCancelled = value;
            }
        }
/// <summary>
/// The DateOfOrder property
///
/// </summary>
///
        public virtual DateTime? DateOfOrder
        {
            get
            {
                return dateOfOrder;
            }
            set
            {
                dateOfOrder = value;
            }
        }
/// <summary>
/// The OrderAmount property
///
/// </summary>
///
        public virtual decimal? OrderAmount
        {
            get
            {
                return orderAmount;
            }
            set
            {
                orderAmount = value;
            }
        }
/// <summary>
/// The TotalPrice property
///
/// </summary>
///
        public virtual decimal? TotalPrice
        {
            get
            {
                return totalPrice;
            }
            set
            {
                totalPrice = value;
            }
        }
/// <summary>
/// The From property
///
/// </summary>
///
        public virtual string From
        {
            get
            {
                return from;
            }
            set
            {
                from = value;
            }
        }
/// <summary>
/// The DeliveryTo property
///
/// </summary>
///
        public virtual string DeliveryTo
        {
            get
            {
                return deliveryTo;
            }
            set
            {
                deliveryTo = value;
            }
        }
/// <summary>
/// The OrderAttachment property
///
/// </summary>
///
        public virtual string OrderAttachment
        {
            get
            {
                return orderAttachment;
            }
            set
            {
                orderAttachment = value;
            }
        }
/// <summary>
/// The Status property
///
/// </summary>
///
        public virtual DemonstratorApp.BO.Status? Status
        {
            get
            {
                return status;
            }
            set
            {
                status = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Order's Participant Properties
        [DataMember(Name="CommercialAgreement")]
        protected CommercialAgreement commercialAgreement;
        public virtual CommercialAgreement CommercialAgreement
        {
            get
            {
                return commercialAgreement;
            }
            set
            {
                if(Equals(commercialAgreement, value)) return;
                var __oldValue = commercialAgreement;
                commercialAgreement?.InternalRemoveOrders(this);
                commercialAgreement = value;
                if (value != null)
                {
                    commercialAgreement.InternalAddOrders(this);
                }
            }
        }
        [DataMember(Name="OrderProducts")]
        protected IList<OrderProduct> orderProducts = new List<OrderProduct>();
        public virtual List<OrderProduct> OrderProducts
        {
            get
            {
                if (orderProducts is OrderProduct[])
                {
                    orderProducts = orderProducts.ToList();
                }
                if (orderProducts == null)
                {
                    orderProducts = new List<OrderProduct>();
                }
                return orderProducts.ToList();
            }
            set
            {
                if (orderProducts is OrderProduct[])
                {
                    orderProducts = orderProducts.ToList();
                }
                if (orderProducts != null)
                {
                    var __itemsToDelete = new List<OrderProduct>(orderProducts);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveOrderProducts(__item);
                    }
                }
                if(value == null)
                {
                    orderProducts = new List<OrderProduct>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddOrderProducts(__item);
                }
            }
        }
        public virtual void AddOrderProducts(IList<OrderProduct> __items)
        {
            foreach (var __item in __items)
            {
                AddOrderProducts(__item);
            }
        }

        public virtual void InternalAddOrderProducts(OrderProduct __item)
        {
            if (__item == null || disableInternalAdditions) return;
            orderProducts?.Add(__item);
        }

        public virtual void InternalRemoveOrderProducts(OrderProduct __item)
        {
            if (__item == null) return;
            orderProducts?.Remove(__item);
        }

        public virtual void AddOrderProducts(OrderProduct __item)
        {
            if (__item == null) return;
            if (__item.Order != this)
                __item.Order = this;
        }

        public virtual void AddAtIndexOrderProducts(int index, OrderProduct __item)
        {
            if (__item == null) return;
            orderProducts?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Order != this)
                    __item.Order = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveOrderProducts(OrderProduct __item)
        {
            if (__item != null)
            {
                __item.Order = null;
            }
        }
        public virtual void SetOrderProductsAt(OrderProduct __item, int __index)
        {
            if (__item == null)
            {
                orderProducts[__index].Order = null;
            }
            else
            {
                orderProducts[__index] = __item;
                if (__item.Order != this)
                    __item.Order = this;
            }
        }

        public virtual void ClearOrderProducts()
        {
            if (orderProducts!=null)
            {
                var __itemsToRemove = orderProducts.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveOrderProducts(__item);
                }
            }
        }
        [DataMember(Name="ProofOfDeliveries")]
        protected IList<ProofOfDelivery> proofOfDeliveries = new List<ProofOfDelivery>();
        public virtual List<ProofOfDelivery> ProofOfDeliveries
        {
            get
            {
                if (proofOfDeliveries is ProofOfDelivery[])
                {
                    proofOfDeliveries = proofOfDeliveries.ToList();
                }
                if (proofOfDeliveries == null)
                {
                    proofOfDeliveries = new List<ProofOfDelivery>();
                }
                return proofOfDeliveries.ToList();
            }
            set
            {
                if (proofOfDeliveries is ProofOfDelivery[])
                {
                    proofOfDeliveries = proofOfDeliveries.ToList();
                }
                if (proofOfDeliveries != null)
                {
                    var __itemsToDelete = new List<ProofOfDelivery>(proofOfDeliveries);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveProofOfDeliveries(__item);
                    }
                }
                if(value == null)
                {
                    proofOfDeliveries = new List<ProofOfDelivery>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddProofOfDeliveries(__item);
                }
            }
        }
        public virtual void AddProofOfDeliveries(IList<ProofOfDelivery> __items)
        {
            foreach (var __item in __items)
            {
                AddProofOfDeliveries(__item);
            }
        }

        public virtual void InternalAddProofOfDeliveries(ProofOfDelivery __item)
        {
            if (__item == null || disableInternalAdditions) return;
            proofOfDeliveries?.Add(__item);
        }

        public virtual void InternalRemoveProofOfDeliveries(ProofOfDelivery __item)
        {
            if (__item == null) return;
            proofOfDeliveries?.Remove(__item);
        }

        public virtual void AddProofOfDeliveries(ProofOfDelivery __item)
        {
            if (__item == null) return;
            if (!proofOfDeliveries.Contains(__item))
                InternalAddProofOfDeliveries(__item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void AddAtIndexProofOfDeliveries(int index, ProofOfDelivery __item)
        {
            if (__item == null) return;
            if (!proofOfDeliveries.Contains(__item))
                proofOfDeliveries.Insert(index, __item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void RemoveProofOfDeliveries(ProofOfDelivery __item)
        {
            if (__item != null)
            {
                if (proofOfDeliveries.Contains(__item))
                    InternalRemoveProofOfDeliveries(__item);
                if(__item.Orders.Contains(this))
                    __item.RemoveOrders(this);
            }
        }
        public virtual void SetProofOfDeliveriesAt(ProofOfDelivery __item, int __index)
        {
            if (__item == null)
            {
                proofOfDeliveries[__index].RemoveOrders(this);
            }
            else
            {
                proofOfDeliveries[__index] = __item;
                if (!__item.Orders.Contains(this))
                    __item.AddOrders(this);
            }
        }

        public virtual void ClearProofOfDeliveries()
        {
            if (proofOfDeliveries!=null)
            {
                var __itemsToRemove = proofOfDeliveries.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveProofOfDeliveries(__item);
                }
            }
        }
        [DataMember(Name="Invoices")]
        protected IList<Invoice> invoices = new List<Invoice>();
        public virtual List<Invoice> Invoices
        {
            get
            {
                if (invoices is Invoice[])
                {
                    invoices = invoices.ToList();
                }
                if (invoices == null)
                {
                    invoices = new List<Invoice>();
                }
                return invoices.ToList();
            }
            set
            {
                if (invoices is Invoice[])
                {
                    invoices = invoices.ToList();
                }
                if (invoices != null)
                {
                    var __itemsToDelete = new List<Invoice>(invoices);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveInvoices(__item);
                    }
                }
                if(value == null)
                {
                    invoices = new List<Invoice>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddInvoices(__item);
                }
            }
        }
        public virtual void AddInvoices(IList<Invoice> __items)
        {
            foreach (var __item in __items)
            {
                AddInvoices(__item);
            }
        }

        public virtual void InternalAddInvoices(Invoice __item)
        {
            if (__item == null || disableInternalAdditions) return;
            invoices?.Add(__item);
        }

        public virtual void InternalRemoveInvoices(Invoice __item)
        {
            if (__item == null) return;
            invoices?.Remove(__item);
        }

        public virtual void AddInvoices(Invoice __item)
        {
            if (__item == null) return;
            if (!invoices.Contains(__item))
                InternalAddInvoices(__item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void AddAtIndexInvoices(int index, Invoice __item)
        {
            if (__item == null) return;
            if (!invoices.Contains(__item))
                invoices.Insert(index, __item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void RemoveInvoices(Invoice __item)
        {
            if (__item != null)
            {
                if (invoices.Contains(__item))
                    InternalRemoveInvoices(__item);
                if(__item.Orders.Contains(this))
                    __item.RemoveOrders(this);
            }
        }
        public virtual void SetInvoicesAt(Invoice __item, int __index)
        {
            if (__item == null)
            {
                invoices[__index].RemoveOrders(this);
            }
            else
            {
                invoices[__index] = __item;
                if (!__item.Orders.Contains(this))
                    __item.AddOrders(this);
            }
        }

        public virtual void ClearInvoices()
        {
            if (invoices!=null)
            {
                var __itemsToRemove = invoices.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveInvoices(__item);
                }
            }
        }
        [DataMember(Name="DeliveryNotes")]
        protected IList<DeliveryNote> deliveryNotes = new List<DeliveryNote>();
        public virtual List<DeliveryNote> DeliveryNotes
        {
            get
            {
                if (deliveryNotes is DeliveryNote[])
                {
                    deliveryNotes = deliveryNotes.ToList();
                }
                if (deliveryNotes == null)
                {
                    deliveryNotes = new List<DeliveryNote>();
                }
                return deliveryNotes.ToList();
            }
            set
            {
                if (deliveryNotes is DeliveryNote[])
                {
                    deliveryNotes = deliveryNotes.ToList();
                }
                if (deliveryNotes != null)
                {
                    var __itemsToDelete = new List<DeliveryNote>(deliveryNotes);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveDeliveryNotes(__item);
                    }
                }
                if(value == null)
                {
                    deliveryNotes = new List<DeliveryNote>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddDeliveryNotes(__item);
                }
            }
        }
        public virtual void AddDeliveryNotes(IList<DeliveryNote> __items)
        {
            foreach (var __item in __items)
            {
                AddDeliveryNotes(__item);
            }
        }

        public virtual void InternalAddDeliveryNotes(DeliveryNote __item)
        {
            if (__item == null || disableInternalAdditions) return;
            deliveryNotes?.Add(__item);
        }

        public virtual void InternalRemoveDeliveryNotes(DeliveryNote __item)
        {
            if (__item == null) return;
            deliveryNotes?.Remove(__item);
        }

        public virtual void AddDeliveryNotes(DeliveryNote __item)
        {
            if (__item == null) return;
            if (!deliveryNotes.Contains(__item))
                InternalAddDeliveryNotes(__item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void AddAtIndexDeliveryNotes(int index, DeliveryNote __item)
        {
            if (__item == null) return;
            if (!deliveryNotes.Contains(__item))
                deliveryNotes.Insert(index, __item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void RemoveDeliveryNotes(DeliveryNote __item)
        {
            if (__item != null)
            {
                if (deliveryNotes.Contains(__item))
                    InternalRemoveDeliveryNotes(__item);
                if(__item.Orders.Contains(this))
                    __item.RemoveOrders(this);
            }
        }
        public virtual void SetDeliveryNotesAt(DeliveryNote __item, int __index)
        {
            if (__item == null)
            {
                deliveryNotes[__index].RemoveOrders(this);
            }
            else
            {
                deliveryNotes[__index] = __item;
                if (!__item.Orders.Contains(this))
                    __item.AddOrders(this);
            }
        }

        public virtual void ClearDeliveryNotes()
        {
            if (deliveryNotes!=null)
            {
                var __itemsToRemove = deliveryNotes.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveDeliveryNotes(__item);
                }
            }
        }
        [DataMember(Name="OrderStatus")]
        protected OrderStatus orderStatus;
        public virtual OrderStatus OrderStatus
        {
            get
            {
                return orderStatus;
            }
            set
            {
                if(Equals(orderStatus, value)) return;
                var __oldValue = orderStatus;
                if (value != null)
                {
                    orderStatus = value;
                }
                else
                {
                    if (orderStatus != null)
                    {
                        orderStatus = null;
                    }
                }
            }
        }
        [DataMember(Name="FinalAcceptanceCertificate")]
        protected FinalAcceptanceCertificate finalAcceptanceCertificate;
        public virtual FinalAcceptanceCertificate FinalAcceptanceCertificate
        {
            get
            {
                return finalAcceptanceCertificate;
            }
            set
            {
                if(Equals(finalAcceptanceCertificate, value)) return;
                var __oldValue = finalAcceptanceCertificate;
                if (value != null)
                {
                    finalAcceptanceCertificate = value;
                }
                else
                {
                    if (finalAcceptanceCertificate != null)
                    {
                        finalAcceptanceCertificate = null;
                    }
                }
            }
        }
        [DataMember(Name="CreditNotes")]
        protected IList<CreditNote> creditNotes = new List<CreditNote>();
        public virtual List<CreditNote> CreditNotes
        {
            get
            {
                if (creditNotes is CreditNote[])
                {
                    creditNotes = creditNotes.ToList();
                }
                if (creditNotes == null)
                {
                    creditNotes = new List<CreditNote>();
                }
                return creditNotes.ToList();
            }
            set
            {
                if (creditNotes is CreditNote[])
                {
                    creditNotes = creditNotes.ToList();
                }
                if (creditNotes != null)
                {
                    var __itemsToDelete = new List<CreditNote>(creditNotes);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCreditNotes(__item);
                    }
                }
                if(value == null)
                {
                    creditNotes = new List<CreditNote>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCreditNotes(__item);
                }
            }
        }
        public virtual void AddCreditNotes(IList<CreditNote> __items)
        {
            foreach (var __item in __items)
            {
                AddCreditNotes(__item);
            }
        }

        public virtual void InternalAddCreditNotes(CreditNote __item)
        {
            if (__item == null || disableInternalAdditions) return;
            creditNotes?.Add(__item);
        }

        public virtual void InternalRemoveCreditNotes(CreditNote __item)
        {
            if (__item == null) return;
            creditNotes?.Remove(__item);
        }

        public virtual void AddCreditNotes(CreditNote __item)
        {
            if (__item == null) return;
            if (!creditNotes.Contains(__item))
                InternalAddCreditNotes(__item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void AddAtIndexCreditNotes(int index, CreditNote __item)
        {
            if (__item == null) return;
            if (!creditNotes.Contains(__item))
                creditNotes.Insert(index, __item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void RemoveCreditNotes(CreditNote __item)
        {
            if (__item != null)
            {
                if (creditNotes.Contains(__item))
                    InternalRemoveCreditNotes(__item);
                if(__item.Orders.Contains(this))
                    __item.RemoveOrders(this);
            }
        }
        public virtual void SetCreditNotesAt(CreditNote __item, int __index)
        {
            if (__item == null)
            {
                creditNotes[__index].RemoveOrders(this);
            }
            else
            {
                creditNotes[__index] = __item;
                if (!__item.Orders.Contains(this))
                    __item.AddOrders(this);
            }
        }

        public virtual void ClearCreditNotes()
        {
            if (creditNotes!=null)
            {
                var __itemsToRemove = creditNotes.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCreditNotes(__item);
                }
            }
        }
        [DataMember(Name="OrderPayment")]
        protected IList<OrderPayment> orderPayment = new List<OrderPayment>();
        public virtual List<OrderPayment> OrderPayment
        {
            get
            {
                if (orderPayment is OrderPayment[])
                {
                    orderPayment = orderPayment.ToList();
                }
                if (orderPayment == null)
                {
                    orderPayment = new List<OrderPayment>();
                }
                return orderPayment.ToList();
            }
            set
            {
                if (orderPayment is OrderPayment[])
                {
                    orderPayment = orderPayment.ToList();
                }
                if (orderPayment != null)
                {
                    var __itemsToDelete = new List<OrderPayment>(orderPayment);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveOrderPayment(__item);
                    }
                }
                if(value == null)
                {
                    orderPayment = new List<OrderPayment>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddOrderPayment(__item);
                }
            }
        }
        public virtual void AddOrderPayment(IList<OrderPayment> __items)
        {
            foreach (var __item in __items)
            {
                AddOrderPayment(__item);
            }
        }

        public virtual void InternalAddOrderPayment(OrderPayment __item)
        {
            if (__item == null || disableInternalAdditions) return;
            orderPayment?.Add(__item);
        }

        public virtual void InternalRemoveOrderPayment(OrderPayment __item)
        {
            if (__item == null) return;
            orderPayment?.Remove(__item);
        }

        public virtual void AddOrderPayment(OrderPayment __item)
        {
            if (__item == null) return;
            if (__item.Order != this)
                __item.Order = this;
        }

        public virtual void AddAtIndexOrderPayment(int index, OrderPayment __item)
        {
            if (__item == null) return;
            orderPayment?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Order != this)
                    __item.Order = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveOrderPayment(OrderPayment __item)
        {
            if (__item != null)
            {
                __item.Order = null;
            }
        }
        public virtual void SetOrderPaymentAt(OrderPayment __item, int __index)
        {
            if (__item == null)
            {
                orderPayment[__index].Order = null;
            }
            else
            {
                orderPayment[__index] = __item;
                if (__item.Order != this)
                    __item.Order = this;
            }
        }

        public virtual void ClearOrderPayment()
        {
            if (orderPayment!=null)
            {
                var __itemsToRemove = orderPayment.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveOrderPayment(__item);
                }
            }
        }
        [DataMember(Name="LetterOfCredits")]
        protected IList<LetterOfCredit> letterOfCredits = new List<LetterOfCredit>();
        public virtual List<LetterOfCredit> LetterOfCredits
        {
            get
            {
                if (letterOfCredits is LetterOfCredit[])
                {
                    letterOfCredits = letterOfCredits.ToList();
                }
                if (letterOfCredits == null)
                {
                    letterOfCredits = new List<LetterOfCredit>();
                }
                return letterOfCredits.ToList();
            }
            set
            {
                if (letterOfCredits is LetterOfCredit[])
                {
                    letterOfCredits = letterOfCredits.ToList();
                }
                if (letterOfCredits != null)
                {
                    var __itemsToDelete = new List<LetterOfCredit>(letterOfCredits);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveLetterOfCredits(__item);
                    }
                }
                if(value == null)
                {
                    letterOfCredits = new List<LetterOfCredit>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddLetterOfCredits(__item);
                }
            }
        }
        public virtual void AddLetterOfCredits(IList<LetterOfCredit> __items)
        {
            foreach (var __item in __items)
            {
                AddLetterOfCredits(__item);
            }
        }

        public virtual void InternalAddLetterOfCredits(LetterOfCredit __item)
        {
            if (__item == null || disableInternalAdditions) return;
            letterOfCredits?.Add(__item);
        }

        public virtual void InternalRemoveLetterOfCredits(LetterOfCredit __item)
        {
            if (__item == null) return;
            letterOfCredits?.Remove(__item);
        }

        public virtual void AddLetterOfCredits(LetterOfCredit __item)
        {
            if (__item == null) return;
            if (!letterOfCredits.Contains(__item))
                InternalAddLetterOfCredits(__item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void AddAtIndexLetterOfCredits(int index, LetterOfCredit __item)
        {
            if (__item == null) return;
            if (!letterOfCredits.Contains(__item))
                letterOfCredits.Insert(index, __item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void RemoveLetterOfCredits(LetterOfCredit __item)
        {
            if (__item != null)
            {
                if (letterOfCredits.Contains(__item))
                    InternalRemoveLetterOfCredits(__item);
                if(__item.Orders.Contains(this))
                    __item.RemoveOrders(this);
            }
        }
        public virtual void SetLetterOfCreditsAt(LetterOfCredit __item, int __index)
        {
            if (__item == null)
            {
                letterOfCredits[__index].RemoveOrders(this);
            }
            else
            {
                letterOfCredits[__index] = __item;
                if (!__item.Orders.Contains(this))
                    __item.AddOrders(this);
            }
        }

        public virtual void ClearLetterOfCredits()
        {
            if (letterOfCredits!=null)
            {
                var __itemsToRemove = letterOfCredits.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveLetterOfCredits(__item);
                }
            }
        }
        [DataMember(Name="BillOfLandings")]
        protected IList<BillOfLanding> billOfLandings = new List<BillOfLanding>();
        public virtual List<BillOfLanding> BillOfLandings
        {
            get
            {
                if (billOfLandings is BillOfLanding[])
                {
                    billOfLandings = billOfLandings.ToList();
                }
                if (billOfLandings == null)
                {
                    billOfLandings = new List<BillOfLanding>();
                }
                return billOfLandings.ToList();
            }
            set
            {
                if (billOfLandings is BillOfLanding[])
                {
                    billOfLandings = billOfLandings.ToList();
                }
                if (billOfLandings != null)
                {
                    var __itemsToDelete = new List<BillOfLanding>(billOfLandings);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveBillOfLandings(__item);
                    }
                }
                if(value == null)
                {
                    billOfLandings = new List<BillOfLanding>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddBillOfLandings(__item);
                }
            }
        }
        public virtual void AddBillOfLandings(IList<BillOfLanding> __items)
        {
            foreach (var __item in __items)
            {
                AddBillOfLandings(__item);
            }
        }

        public virtual void InternalAddBillOfLandings(BillOfLanding __item)
        {
            if (__item == null || disableInternalAdditions) return;
            billOfLandings?.Add(__item);
        }

        public virtual void InternalRemoveBillOfLandings(BillOfLanding __item)
        {
            if (__item == null) return;
            billOfLandings?.Remove(__item);
        }

        public virtual void AddBillOfLandings(BillOfLanding __item)
        {
            if (__item == null) return;
            if (!billOfLandings.Contains(__item))
                InternalAddBillOfLandings(__item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void AddAtIndexBillOfLandings(int index, BillOfLanding __item)
        {
            if (__item == null) return;
            if (!billOfLandings.Contains(__item))
                billOfLandings.Insert(index, __item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void RemoveBillOfLandings(BillOfLanding __item)
        {
            if (__item != null)
            {
                if (billOfLandings.Contains(__item))
                    InternalRemoveBillOfLandings(__item);
                if(__item.Orders.Contains(this))
                    __item.RemoveOrders(this);
            }
        }
        public virtual void SetBillOfLandingsAt(BillOfLanding __item, int __index)
        {
            if (__item == null)
            {
                billOfLandings[__index].RemoveOrders(this);
            }
            else
            {
                billOfLandings[__index] = __item;
                if (!__item.Orders.Contains(this))
                    __item.AddOrders(this);
            }
        }

        public virtual void ClearBillOfLandings()
        {
            if (billOfLandings!=null)
            {
                var __itemsToRemove = billOfLandings.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveBillOfLandings(__item);
                }
            }
        }
        [DataMember(Name="Intermediaries")]
        protected IList<Intermediary> intermediaries = new List<Intermediary>();
        public virtual List<Intermediary> Intermediaries
        {
            get
            {
                if (intermediaries is Intermediary[])
                {
                    intermediaries = intermediaries.ToList();
                }
                if (intermediaries == null)
                {
                    intermediaries = new List<Intermediary>();
                }
                return intermediaries.ToList();
            }
            set
            {
                if (intermediaries is Intermediary[])
                {
                    intermediaries = intermediaries.ToList();
                }
                if (intermediaries != null)
                {
                    var __itemsToDelete = new List<Intermediary>(intermediaries);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveIntermediaries(__item);
                    }
                }
                if(value == null)
                {
                    intermediaries = new List<Intermediary>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddIntermediaries(__item);
                }
            }
        }
        public virtual void AddIntermediaries(IList<Intermediary> __items)
        {
            foreach (var __item in __items)
            {
                AddIntermediaries(__item);
            }
        }

        public virtual void InternalAddIntermediaries(Intermediary __item)
        {
            if (__item == null || disableInternalAdditions) return;
            intermediaries?.Add(__item);
        }

        public virtual void InternalRemoveIntermediaries(Intermediary __item)
        {
            if (__item == null) return;
            intermediaries?.Remove(__item);
        }

        public virtual void AddIntermediaries(Intermediary __item)
        {
            if (__item == null) return;
            if (!intermediaries.Contains(__item))
                InternalAddIntermediaries(__item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void AddAtIndexIntermediaries(int index, Intermediary __item)
        {
            if (__item == null) return;
            if (!intermediaries.Contains(__item))
                intermediaries.Insert(index, __item);
            if (!__item.Orders.Contains(this))
                __item.AddOrders(this);
        }

        public virtual void RemoveIntermediaries(Intermediary __item)
        {
            if (__item != null)
            {
                if (intermediaries.Contains(__item))
                    InternalRemoveIntermediaries(__item);
                if(__item.Orders.Contains(this))
                    __item.RemoveOrders(this);
            }
        }
        public virtual void SetIntermediariesAt(Intermediary __item, int __index)
        {
            if (__item == null)
            {
                intermediaries[__index].RemoveOrders(this);
            }
            else
            {
                intermediaries[__index] = __item;
                if (!__item.Orders.Contains(this))
                    __item.AddOrders(this);
            }
        }

        public virtual void ClearIntermediaries()
        {
            if (intermediaries!=null)
            {
                var __itemsToRemove = intermediaries.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveIntermediaries(__item);
                }
            }
        }
        [DataMember(Name="Transaction")]
        protected Transaction transaction;
        public virtual Transaction Transaction
        {
            get
            {
                return transaction;
            }
            set
            {
                if(Equals(transaction, value)) return;
                var __oldValue = transaction;
                transaction?.InternalRemoveOrders(this);
                transaction = value;
                if (value != null)
                {
                    transaction.InternalAddOrders(this);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Order class
/// </summary>
/// <returns>New Order object</returns>
/// <remarks></remarks>
        public Order() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (OrderNumber != null && OrderNumber.Length > 100)
            {
                __errors.Add("Length of property 'OrderNumber' cannot be greater than 100.");
            }
            if (PaymentTerms != null && PaymentTerms.Length > 100)
            {
                __errors.Add("Length of property 'PaymentTerms' cannot be greater than 100.");
            }
            if (From != null && From.Length > 100)
            {
                __errors.Add("Length of property 'From' cannot be greater than 100.");
            }
            if (DeliveryTo != null && DeliveryTo.Length > 100)
            {
                __errors.Add("Length of property 'DeliveryTo' cannot be greater than 100.");
            }
            if (OrderAttachment != null && OrderAttachment.Length > 100)
            {
                __errors.Add("Length of property 'OrderAttachment' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Order' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OrderNumber?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EstimatedDateOfDelivery?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PaymentTerms?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (IntermediateParty.GetHashCode() );
            hashCode = hashCode * -1521134295 + (IsCancelled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (DateOfOrder?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OrderAmount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TotalPrice?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (From?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DeliveryTo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (OrderAttachment?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Status?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Order] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Order Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Order copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Order)copiedObjects[this];
            copy = copy ?? new Order();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.OrderNumber = this.OrderNumber;
            copy.EstimatedDateOfDelivery = this.EstimatedDateOfDelivery;
            copy.PaymentTerms = this.PaymentTerms;
            copy.IntermediateParty = this.IntermediateParty;
            copy.IsCancelled = this.IsCancelled;
            copy.DateOfOrder = this.DateOfOrder;
            copy.OrderAmount = this.OrderAmount;
            copy.TotalPrice = this.TotalPrice;
            copy.From = this.From;
            copy.DeliveryTo = this.DeliveryTo;
            copy.OrderAttachment = this.OrderAttachment;
            copy.Status = this.Status;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            if(deep && this.commercialAgreement != null)
            {
                if (!copiedObjects.Contains(this.commercialAgreement))
                {
                    if (asNew && reuseNestedObjects)
                        copy.CommercialAgreement = this.CommercialAgreement;
                    else if (asNew)
                        copy.CommercialAgreement = this.CommercialAgreement.Copy(deep, copiedObjects, true);
                    else
                        copy.commercialAgreement = this.commercialAgreement.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.CommercialAgreement = (CommercialAgreement)copiedObjects[this.CommercialAgreement];
                    else
                        copy.commercialAgreement = (CommercialAgreement)copiedObjects[this.CommercialAgreement];
                }
            }
            copy.orderProducts = new List<OrderProduct>();
            if(deep && this.orderProducts != null)
            {
                foreach (var __item in this.orderProducts)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddOrderProducts(__item);
                        else
                            copy.AddOrderProducts(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddOrderProducts((OrderProduct)copiedObjects[__item]);
                    }
                }
            }
            copy.proofOfDeliveries = new List<ProofOfDelivery>();
            if(deep && this.proofOfDeliveries != null)
            {
                foreach (var __item in this.proofOfDeliveries)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddProofOfDeliveries(__item);
                        else
                            copy.AddProofOfDeliveries(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddProofOfDeliveries((ProofOfDelivery)copiedObjects[__item]);
                    }
                }
            }
            copy.invoices = new List<Invoice>();
            if(deep && this.invoices != null)
            {
                foreach (var __item in this.invoices)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddInvoices(__item);
                        else
                            copy.AddInvoices(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddInvoices((Invoice)copiedObjects[__item]);
                    }
                }
            }
            copy.deliveryNotes = new List<DeliveryNote>();
            if(deep && this.deliveryNotes != null)
            {
                foreach (var __item in this.deliveryNotes)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddDeliveryNotes(__item);
                        else
                            copy.AddDeliveryNotes(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddDeliveryNotes((DeliveryNote)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.orderStatus != null)
            {
                if (!copiedObjects.Contains(this.orderStatus))
                {
                    if (asNew && reuseNestedObjects)
                        copy.OrderStatus = this.OrderStatus;
                    else if (asNew)
                        copy.OrderStatus = this.OrderStatus.Copy(deep, copiedObjects, true);
                    else
                        copy.orderStatus = this.orderStatus.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.OrderStatus = (OrderStatus)copiedObjects[this.OrderStatus];
                    else
                        copy.orderStatus = (OrderStatus)copiedObjects[this.OrderStatus];
                }
            }
            if(deep && this.finalAcceptanceCertificate != null)
            {
                if (!copiedObjects.Contains(this.finalAcceptanceCertificate))
                {
                    if (asNew && reuseNestedObjects)
                        copy.FinalAcceptanceCertificate = this.FinalAcceptanceCertificate;
                    else if (asNew)
                        copy.FinalAcceptanceCertificate = this.FinalAcceptanceCertificate.Copy(deep, copiedObjects, true);
                    else
                        copy.finalAcceptanceCertificate = this.finalAcceptanceCertificate.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.FinalAcceptanceCertificate = (FinalAcceptanceCertificate)copiedObjects[this.FinalAcceptanceCertificate];
                    else
                        copy.finalAcceptanceCertificate = (FinalAcceptanceCertificate)copiedObjects[this.FinalAcceptanceCertificate];
                }
            }
            copy.creditNotes = new List<CreditNote>();
            if(deep && this.creditNotes != null)
            {
                foreach (var __item in this.creditNotes)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCreditNotes(__item);
                        else
                            copy.AddCreditNotes(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCreditNotes((CreditNote)copiedObjects[__item]);
                    }
                }
            }
            copy.orderPayment = new List<OrderPayment>();
            if(deep && this.orderPayment != null)
            {
                foreach (var __item in this.orderPayment)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddOrderPayment(__item);
                        else
                            copy.AddOrderPayment(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddOrderPayment((OrderPayment)copiedObjects[__item]);
                    }
                }
            }
            copy.letterOfCredits = new List<LetterOfCredit>();
            if(deep && this.letterOfCredits != null)
            {
                foreach (var __item in this.letterOfCredits)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddLetterOfCredits(__item);
                        else
                            copy.AddLetterOfCredits(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddLetterOfCredits((LetterOfCredit)copiedObjects[__item]);
                    }
                }
            }
            copy.billOfLandings = new List<BillOfLanding>();
            if(deep && this.billOfLandings != null)
            {
                foreach (var __item in this.billOfLandings)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddBillOfLandings(__item);
                        else
                            copy.AddBillOfLandings(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddBillOfLandings((BillOfLanding)copiedObjects[__item]);
                    }
                }
            }
            copy.intermediaries = new List<Intermediary>();
            if(deep && this.intermediaries != null)
            {
                foreach (var __item in this.intermediaries)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddIntermediaries(__item);
                        else
                            copy.AddIntermediaries(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddIntermediaries((Intermediary)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.transaction != null)
            {
                if (!copiedObjects.Contains(this.transaction))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Transaction = this.Transaction;
                    else if (asNew)
                        copy.Transaction = this.Transaction.Copy(deep, copiedObjects, true);
                    else
                        copy.transaction = this.transaction.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Transaction = (Transaction)copiedObjects[this.Transaction];
                    else
                        copy.transaction = (Transaction)copiedObjects[this.Transaction];
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Order;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Order x, Order y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Order x, Order y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Order compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
