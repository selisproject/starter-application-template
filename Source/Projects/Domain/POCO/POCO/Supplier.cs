// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DemonstratorApp.BO
{
    /// <summary>
    /// The Supplier class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    [KnownType(typeof(ApplicationUser))]

    public class Supplier : ApplicationUser, IDomainModelClass
    {
        #region Supplier's Fields
        [DataMember(Name="SupplierId")]
        protected int? supplierId;
        [DataMember(Name="Company")]
        protected string company;
        [DataMember(Name="CompanyLogo")]
        protected string companyLogo;
        [DataMember(Name="Business")]
        protected string business;
        [DataMember(Name="CurrentAmount")]
        protected string currentAmount;
        [DataMember(Name="AverageAmount")]
        protected string averageAmount;
        [DataMember(Name="PercentageOfCreditNotes")]
        protected string percentageOfCreditNotes;
        [DataMember(Name="PrimaryPhone")]
        protected string primaryPhone;
        [DataMember(Name="SecondaryPhone")]
        protected string secondaryPhone;
        [DataMember(Name="Fax")]
        protected string fax;
        [DataMember(Name="WebSite")]
        protected string webSite;
        [DataMember(Name="AcceptedPolicyTerms")]
        protected bool acceptedPolicyTerms;
        [DataMember(Name="SupplierStatus")]
        protected string supplierStatus;
        [DataMember(Name="DomainFocus")]
        protected string domainFocus;
        [DataMember(Name="EvaluationResult")]
        protected string evaluationResult;
        [DataMember(Name="EvaluationCountResult")]
        protected int? evaluationCountResult;
        [DataMember(Name="AnnualTurnover")]
        protected bool annualTurnover;
        [DataMember(Name="BEnvironment")]
        protected bool bEnvironment;
        [DataMember(Name="PTerms")]
        protected bool pTerms;
        [DataMember(Name="Average")]
        protected bool average;
        [DataMember(Name="InvoiceValue")]
        protected bool invoiceValue;
        [DataMember(Name="EqRatio")]
        protected bool eqRatio;
        [DataMember(Name="Prefix")]
        protected string prefix;
        [DataMember(Name="VATNumber")]
        protected string vATNumber;
        [DataMember(Name="MarketSegment")]
        protected string marketSegment;
        [DataMember(Name="AdditionalComments")]
        protected string additionalComments;
        [DataMember(Name="AdditionalCommentsStep2")]
        protected string additionalCommentsStep2;
        [DataMember(Name="AdditionalCommentsStep3")]
        protected string additionalCommentsStep3;
#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Supplier's Properties
/// <summary>
/// The SupplierId property
///
/// </summary>
///
        public virtual int? SupplierId
        {
            get
            {
                return supplierId;
            }
            set
            {
                supplierId = value;
            }
        }
/// <summary>
/// The Company property
///
/// </summary>
///
        public virtual string Company
        {
            get
            {
                return company;
            }
            set
            {
                company = value;
            }
        }
/// <summary>
/// The CompanyLogo property
///
/// </summary>
///
        public virtual string CompanyLogo
        {
            get
            {
                return companyLogo;
            }
            set
            {
                companyLogo = value;
            }
        }
/// <summary>
/// The Business property
///
/// </summary>
///
        public virtual string Business
        {
            get
            {
                return business;
            }
            set
            {
                business = value;
            }
        }
/// <summary>
/// The CurrentAmount property
///
/// </summary>
///
        public virtual string CurrentAmount
        {
            get
            {
                return currentAmount;
            }
            set
            {
                currentAmount = value;
            }
        }
/// <summary>
/// The AverageAmount property
///
/// </summary>
///
        public virtual string AverageAmount
        {
            get
            {
                return averageAmount;
            }
            set
            {
                averageAmount = value;
            }
        }
/// <summary>
/// The PercentageOfCreditNotes property
///
/// </summary>
///
        public virtual string PercentageOfCreditNotes
        {
            get
            {
                return percentageOfCreditNotes;
            }
            set
            {
                percentageOfCreditNotes = value;
            }
        }
/// <summary>
/// The PrimaryPhone property
///
/// </summary>
///
        public virtual string PrimaryPhone
        {
            get
            {
                return primaryPhone;
            }
            set
            {
                primaryPhone = value;
            }
        }
/// <summary>
/// The SecondaryPhone property
///
/// </summary>
///
        public virtual string SecondaryPhone
        {
            get
            {
                return secondaryPhone;
            }
            set
            {
                secondaryPhone = value;
            }
        }
/// <summary>
/// The Fax property
///
/// </summary>
///
        public virtual string Fax
        {
            get
            {
                return fax;
            }
            set
            {
                fax = value;
            }
        }
/// <summary>
/// The WebSite property
///
/// </summary>
///
        public virtual string WebSite
        {
            get
            {
                return webSite;
            }
            set
            {
                webSite = value;
            }
        }
/// <summary>
/// The AcceptedPolicyTerms property
///
/// </summary>
///
        public virtual bool AcceptedPolicyTerms
        {
            get
            {
                return acceptedPolicyTerms;
            }
            set
            {
                acceptedPolicyTerms = value;
            }
        }
/// <summary>
/// The SupplierStatus property
///
/// </summary>
///
        public virtual string SupplierStatus
        {
            get
            {
                return supplierStatus;
            }
            set
            {
                supplierStatus = value;
            }
        }
/// <summary>
/// The DomainFocus property
///
/// </summary>
///
        public virtual string DomainFocus
        {
            get
            {
                return domainFocus;
            }
            set
            {
                domainFocus = value;
            }
        }
/// <summary>
/// The EvaluationResult property
///
/// </summary>
///
        public virtual string EvaluationResult
        {
            get
            {
                return evaluationResult;
            }
            set
            {
                evaluationResult = value;
            }
        }
/// <summary>
/// The EvaluationCountResult property
///
/// </summary>
///
        public virtual int? EvaluationCountResult
        {
            get
            {
                return evaluationCountResult;
            }
            set
            {
                evaluationCountResult = value;
            }
        }
/// <summary>
/// The AnnualTurnover property
///
/// </summary>
///
        public virtual bool AnnualTurnover
        {
            get
            {
                return annualTurnover;
            }
            set
            {
                annualTurnover = value;
            }
        }
/// <summary>
/// The BEnvironment property
///
/// </summary>
///
        public virtual bool BEnvironment
        {
            get
            {
                return bEnvironment;
            }
            set
            {
                bEnvironment = value;
            }
        }
/// <summary>
/// The PTerms property
///
/// </summary>
///
        public virtual bool PTerms
        {
            get
            {
                return pTerms;
            }
            set
            {
                pTerms = value;
            }
        }
/// <summary>
/// The Average property
///
/// </summary>
///
        public virtual bool Average
        {
            get
            {
                return average;
            }
            set
            {
                average = value;
            }
        }
/// <summary>
/// The InvoiceValue property
///
/// </summary>
///
        public virtual bool InvoiceValue
        {
            get
            {
                return invoiceValue;
            }
            set
            {
                invoiceValue = value;
            }
        }
/// <summary>
/// The EqRatio property
///
/// </summary>
///
        public virtual bool EqRatio
        {
            get
            {
                return eqRatio;
            }
            set
            {
                eqRatio = value;
            }
        }
/// <summary>
/// The Prefix property
///
/// </summary>
///
        public virtual string Prefix
        {
            get
            {
                return prefix;
            }
            set
            {
                prefix = value;
            }
        }
/// <summary>
/// The VATNumber property
///
/// </summary>
///
        public virtual string VATNumber
        {
            get
            {
                return vATNumber;
            }
            set
            {
                vATNumber = value;
            }
        }
/// <summary>
/// The MarketSegment property
///
/// </summary>
///
        public virtual string MarketSegment
        {
            get
            {
                return marketSegment;
            }
            set
            {
                marketSegment = value;
            }
        }
/// <summary>
/// The AdditionalComments property
///
/// </summary>
///
        public virtual string AdditionalComments
        {
            get
            {
                return additionalComments;
            }
            set
            {
                additionalComments = value;
            }
        }
/// <summary>
/// The AdditionalCommentsStep2 property
///
/// </summary>
///
        public virtual string AdditionalCommentsStep2
        {
            get
            {
                return additionalCommentsStep2;
            }
            set
            {
                additionalCommentsStep2 = value;
            }
        }
/// <summary>
/// The AdditionalCommentsStep3 property
///
/// </summary>
///
        public virtual string AdditionalCommentsStep3
        {
            get
            {
                return additionalCommentsStep3;
            }
            set
            {
                additionalCommentsStep3 = value;
            }
        }
        #endregion
        #region Supplier's Participant Properties
        [DataMember(Name="CommercialAgreements")]
        protected IList<CommercialAgreement> commercialAgreements = new List<CommercialAgreement>();
        public virtual List<CommercialAgreement> CommercialAgreements
        {
            get
            {
                if (commercialAgreements is CommercialAgreement[])
                {
                    commercialAgreements = commercialAgreements.ToList();
                }
                if (commercialAgreements == null)
                {
                    commercialAgreements = new List<CommercialAgreement>();
                }
                return commercialAgreements.ToList();
            }
            set
            {
                if (commercialAgreements is CommercialAgreement[])
                {
                    commercialAgreements = commercialAgreements.ToList();
                }
                if (commercialAgreements != null)
                {
                    var __itemsToDelete = new List<CommercialAgreement>(commercialAgreements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCommercialAgreements(__item);
                    }
                }
                if(value == null)
                {
                    commercialAgreements = new List<CommercialAgreement>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCommercialAgreements(__item);
                }
            }
        }
        public virtual void AddCommercialAgreements(IList<CommercialAgreement> __items)
        {
            foreach (var __item in __items)
            {
                AddCommercialAgreements(__item);
            }
        }

        public virtual void InternalAddCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null || disableInternalAdditions) return;
            commercialAgreements?.Add(__item);
        }

        public virtual void InternalRemoveCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null) return;
            commercialAgreements?.Remove(__item);
        }

        public virtual void AddCommercialAgreements(CommercialAgreement __item)
        {
            if (__item == null) return;
            if (__item.Supplier != this)
                __item.Supplier = this;
        }

        public virtual void AddAtIndexCommercialAgreements(int index, CommercialAgreement __item)
        {
            if (__item == null) return;
            commercialAgreements?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveCommercialAgreements(CommercialAgreement __item)
        {
            if (__item != null)
            {
                __item.Supplier = null;
            }
        }
        public virtual void SetCommercialAgreementsAt(CommercialAgreement __item, int __index)
        {
            if (__item == null)
            {
                commercialAgreements[__index].Supplier = null;
            }
            else
            {
                commercialAgreements[__index] = __item;
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
        }

        public virtual void ClearCommercialAgreements()
        {
            if (commercialAgreements!=null)
            {
                var __itemsToRemove = commercialAgreements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCommercialAgreements(__item);
                }
            }
        }
        [DataMember(Name="Agreements")]
        protected IList<Agreement> agreements = new List<Agreement>();
        public virtual List<Agreement> Agreements
        {
            get
            {
                if (agreements is Agreement[])
                {
                    agreements = agreements.ToList();
                }
                if (agreements == null)
                {
                    agreements = new List<Agreement>();
                }
                return agreements.ToList();
            }
            set
            {
                if (agreements is Agreement[])
                {
                    agreements = agreements.ToList();
                }
                if (agreements != null)
                {
                    var __itemsToDelete = new List<Agreement>(agreements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveAgreements(__item);
                    }
                }
                if(value == null)
                {
                    agreements = new List<Agreement>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddAgreements(__item);
                }
            }
        }
        public virtual void AddAgreements(IList<Agreement> __items)
        {
            foreach (var __item in __items)
            {
                AddAgreements(__item);
            }
        }

        public virtual void InternalAddAgreements(Agreement __item)
        {
            if (__item == null || disableInternalAdditions) return;
            agreements?.Add(__item);
        }

        public virtual void InternalRemoveAgreements(Agreement __item)
        {
            if (__item == null) return;
            agreements?.Remove(__item);
        }

        public virtual void AddAgreements(Agreement __item)
        {
            if (__item == null) return;
            if (__item.Supplier != this)
                __item.Supplier = this;
        }

        public virtual void AddAtIndexAgreements(int index, Agreement __item)
        {
            if (__item == null) return;
            agreements?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveAgreements(Agreement __item)
        {
            if (__item != null)
            {
                __item.Supplier = null;
            }
        }
        public virtual void SetAgreementsAt(Agreement __item, int __index)
        {
            if (__item == null)
            {
                agreements[__index].Supplier = null;
            }
            else
            {
                agreements[__index] = __item;
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
        }

        public virtual void ClearAgreements()
        {
            if (agreements!=null)
            {
                var __itemsToRemove = agreements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveAgreements(__item);
                }
            }
        }
        [DataMember(Name="SupplierBusinessStructureData")]
        protected SupplierBusinessStructureData supplierBusinessStructureData;
        public virtual SupplierBusinessStructureData SupplierBusinessStructureData
        {
            get
            {
                return supplierBusinessStructureData;
            }
            set
            {
                if(Equals(supplierBusinessStructureData, value)) return;
                var __oldValue = supplierBusinessStructureData;
                if (value != null)
                {
                    supplierBusinessStructureData = value;
                }
                else
                {
                    if (supplierBusinessStructureData != null)
                    {
                        supplierBusinessStructureData = null;
                    }
                }
            }
        }
        [DataMember(Name="SupplierReceivables")]
        protected SupplierReceivables supplierReceivables;
        public virtual SupplierReceivables SupplierReceivables
        {
            get
            {
                return supplierReceivables;
            }
            set
            {
                if(Equals(supplierReceivables, value)) return;
                var __oldValue = supplierReceivables;
                if (value != null)
                {
                    supplierReceivables = value;
                }
                else
                {
                    if (supplierReceivables != null)
                    {
                        supplierReceivables = null;
                    }
                }
            }
        }
        [DataMember(Name="SupplierContactInformation")]
        protected SupplierContactInformation supplierContactInformation;
        public virtual SupplierContactInformation SupplierContactInformation
        {
            get
            {
                return supplierContactInformation;
            }
            set
            {
                if(Equals(supplierContactInformation, value)) return;
                var __oldValue = supplierContactInformation;
                if (value != null)
                {
                    supplierContactInformation = value;
                }
                else
                {
                    if (supplierContactInformation != null)
                    {
                        supplierContactInformation = null;
                    }
                }
            }
        }
        [DataMember(Name="SupplierTurnover")]
        protected SupplierTurnover supplierTurnover;
        public virtual SupplierTurnover SupplierTurnover
        {
            get
            {
                return supplierTurnover;
            }
            set
            {
                if(Equals(supplierTurnover, value)) return;
                var __oldValue = supplierTurnover;
                if (value != null)
                {
                    supplierTurnover = value;
                }
                else
                {
                    if (supplierTurnover != null)
                    {
                        supplierTurnover = null;
                    }
                }
            }
        }
        [DataMember(Name="SupplierExtraInformation")]
        protected SupplierExtraInformation supplierExtraInformation;
        public virtual SupplierExtraInformation SupplierExtraInformation
        {
            get
            {
                return supplierExtraInformation;
            }
            set
            {
                if(Equals(supplierExtraInformation, value)) return;
                var __oldValue = supplierExtraInformation;
                if (value != null)
                {
                    supplierExtraInformation = value;
                }
                else
                {
                    if (supplierExtraInformation != null)
                    {
                        supplierExtraInformation = null;
                    }
                }
            }
        }
        [DataMember(Name="FinancialStatements")]
        protected IList<SupplierUploads> financialStatements = new List<SupplierUploads>();
        public virtual List<SupplierUploads> FinancialStatements
        {
            get
            {
                if (financialStatements is SupplierUploads[])
                {
                    financialStatements = financialStatements.ToList();
                }
                if (financialStatements == null)
                {
                    financialStatements = new List<SupplierUploads>();
                }
                return financialStatements.ToList();
            }
            set
            {
                if (financialStatements is SupplierUploads[])
                {
                    financialStatements = financialStatements.ToList();
                }
                if (financialStatements != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(financialStatements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveFinancialStatements(__item);
                    }
                }
                if(value == null)
                {
                    financialStatements = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddFinancialStatements(__item);
                }
            }
        }
        public virtual void AddFinancialStatements(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddFinancialStatements(__item);
            }
        }

        public virtual void InternalAddFinancialStatements(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            financialStatements?.Add(__item);
        }

        public virtual void InternalRemoveFinancialStatements(SupplierUploads __item)
        {
            if (__item == null) return;
            financialStatements?.Remove(__item);
        }

        public virtual void AddFinancialStatements(SupplierUploads __item)
        {
            if (__item == null) return;
            if (__item.Supplier != this)
                __item.Supplier = this;
        }

        public virtual void AddAtIndexFinancialStatements(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            financialStatements?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveFinancialStatements(SupplierUploads __item)
        {
            if (__item != null)
            {
                __item.Supplier = null;
            }
        }
        public virtual void SetFinancialStatementsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                financialStatements[__index].Supplier = null;
            }
            else
            {
                financialStatements[__index] = __item;
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
        }

        public virtual void ClearFinancialStatements()
        {
            if (financialStatements!=null)
            {
                var __itemsToRemove = financialStatements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveFinancialStatements(__item);
                }
            }
        }
        [DataMember(Name="EconomicEvaluations")]
        protected IList<SupplierUploads> economicEvaluations = new List<SupplierUploads>();
        public virtual List<SupplierUploads> EconomicEvaluations
        {
            get
            {
                if (economicEvaluations is SupplierUploads[])
                {
                    economicEvaluations = economicEvaluations.ToList();
                }
                if (economicEvaluations == null)
                {
                    economicEvaluations = new List<SupplierUploads>();
                }
                return economicEvaluations.ToList();
            }
            set
            {
                if (economicEvaluations is SupplierUploads[])
                {
                    economicEvaluations = economicEvaluations.ToList();
                }
                if (economicEvaluations != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(economicEvaluations);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveEconomicEvaluations(__item);
                    }
                }
                if(value == null)
                {
                    economicEvaluations = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddEconomicEvaluations(__item);
                }
            }
        }
        public virtual void AddEconomicEvaluations(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddEconomicEvaluations(__item);
            }
        }

        public virtual void InternalAddEconomicEvaluations(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            economicEvaluations?.Add(__item);
        }

        public virtual void InternalRemoveEconomicEvaluations(SupplierUploads __item)
        {
            if (__item == null) return;
            economicEvaluations?.Remove(__item);
        }

        public virtual void AddEconomicEvaluations(SupplierUploads __item)
        {
            if (__item == null) return;
            if (__item.Supplier2 != this)
                __item.Supplier2 = this;
        }

        public virtual void AddAtIndexEconomicEvaluations(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            economicEvaluations?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Supplier2 != this)
                    __item.Supplier2 = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveEconomicEvaluations(SupplierUploads __item)
        {
            if (__item != null)
            {
                __item.Supplier2 = null;
            }
        }
        public virtual void SetEconomicEvaluationsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                economicEvaluations[__index].Supplier2 = null;
            }
            else
            {
                economicEvaluations[__index] = __item;
                if (__item.Supplier2 != this)
                    __item.Supplier2 = this;
            }
        }

        public virtual void ClearEconomicEvaluations()
        {
            if (economicEvaluations!=null)
            {
                var __itemsToRemove = economicEvaluations.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveEconomicEvaluations(__item);
                }
            }
        }
        [DataMember(Name="BusinessPlans")]
        protected IList<SupplierUploads> businessPlans = new List<SupplierUploads>();
        public virtual List<SupplierUploads> BusinessPlans
        {
            get
            {
                if (businessPlans is SupplierUploads[])
                {
                    businessPlans = businessPlans.ToList();
                }
                if (businessPlans == null)
                {
                    businessPlans = new List<SupplierUploads>();
                }
                return businessPlans.ToList();
            }
            set
            {
                if (businessPlans is SupplierUploads[])
                {
                    businessPlans = businessPlans.ToList();
                }
                if (businessPlans != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(businessPlans);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveBusinessPlans(__item);
                    }
                }
                if(value == null)
                {
                    businessPlans = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddBusinessPlans(__item);
                }
            }
        }
        public virtual void AddBusinessPlans(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddBusinessPlans(__item);
            }
        }

        public virtual void InternalAddBusinessPlans(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            businessPlans?.Add(__item);
        }

        public virtual void InternalRemoveBusinessPlans(SupplierUploads __item)
        {
            if (__item == null) return;
            businessPlans?.Remove(__item);
        }

        public virtual void AddBusinessPlans(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddBusinessPlans(__item);
        }

        public virtual void AddAtIndexBusinessPlans(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            businessPlans?.Insert(index, __item);
        }

        public virtual void RemoveBusinessPlans(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveBusinessPlans(__item);
            }
        }
        public virtual void SetBusinessPlansAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                businessPlans[__index] = null;
            }
            else
            {
                businessPlans[__index] = __item;
            }
        }

        public virtual void ClearBusinessPlans()
        {
            if (businessPlans!=null)
            {
                var __itemsToRemove = businessPlans.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveBusinessPlans(__item);
                }
            }
        }
        [DataMember(Name="PriorOutstandingBalances")]
        protected IList<SupplierUploads> priorOutstandingBalances = new List<SupplierUploads>();
        public virtual List<SupplierUploads> PriorOutstandingBalances
        {
            get
            {
                if (priorOutstandingBalances is SupplierUploads[])
                {
                    priorOutstandingBalances = priorOutstandingBalances.ToList();
                }
                if (priorOutstandingBalances == null)
                {
                    priorOutstandingBalances = new List<SupplierUploads>();
                }
                return priorOutstandingBalances.ToList();
            }
            set
            {
                if (priorOutstandingBalances is SupplierUploads[])
                {
                    priorOutstandingBalances = priorOutstandingBalances.ToList();
                }
                if (priorOutstandingBalances != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(priorOutstandingBalances);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemovePriorOutstandingBalances(__item);
                    }
                }
                if(value == null)
                {
                    priorOutstandingBalances = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddPriorOutstandingBalances(__item);
                }
            }
        }
        public virtual void AddPriorOutstandingBalances(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddPriorOutstandingBalances(__item);
            }
        }

        public virtual void InternalAddPriorOutstandingBalances(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            priorOutstandingBalances?.Add(__item);
        }

        public virtual void InternalRemovePriorOutstandingBalances(SupplierUploads __item)
        {
            if (__item == null) return;
            priorOutstandingBalances?.Remove(__item);
        }

        public virtual void AddPriorOutstandingBalances(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddPriorOutstandingBalances(__item);
        }

        public virtual void AddAtIndexPriorOutstandingBalances(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            priorOutstandingBalances?.Insert(index, __item);
        }

        public virtual void RemovePriorOutstandingBalances(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemovePriorOutstandingBalances(__item);
            }
        }
        public virtual void SetPriorOutstandingBalancesAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                priorOutstandingBalances[__index] = null;
            }
            else
            {
                priorOutstandingBalances[__index] = __item;
            }
        }

        public virtual void ClearPriorOutstandingBalances()
        {
            if (priorOutstandingBalances!=null)
            {
                var __itemsToRemove = priorOutstandingBalances.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemovePriorOutstandingBalances(__item);
                }
            }
        }
        [DataMember(Name="OutstandingBalances")]
        protected IList<SupplierUploads> outstandingBalances = new List<SupplierUploads>();
        public virtual List<SupplierUploads> OutstandingBalances
        {
            get
            {
                if (outstandingBalances is SupplierUploads[])
                {
                    outstandingBalances = outstandingBalances.ToList();
                }
                if (outstandingBalances == null)
                {
                    outstandingBalances = new List<SupplierUploads>();
                }
                return outstandingBalances.ToList();
            }
            set
            {
                if (outstandingBalances is SupplierUploads[])
                {
                    outstandingBalances = outstandingBalances.ToList();
                }
                if (outstandingBalances != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(outstandingBalances);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveOutstandingBalances(__item);
                    }
                }
                if(value == null)
                {
                    outstandingBalances = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddOutstandingBalances(__item);
                }
            }
        }
        public virtual void AddOutstandingBalances(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddOutstandingBalances(__item);
            }
        }

        public virtual void InternalAddOutstandingBalances(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            outstandingBalances?.Add(__item);
        }

        public virtual void InternalRemoveOutstandingBalances(SupplierUploads __item)
        {
            if (__item == null) return;
            outstandingBalances?.Remove(__item);
        }

        public virtual void AddOutstandingBalances(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddOutstandingBalances(__item);
        }

        public virtual void AddAtIndexOutstandingBalances(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            outstandingBalances?.Insert(index, __item);
        }

        public virtual void RemoveOutstandingBalances(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveOutstandingBalances(__item);
            }
        }
        public virtual void SetOutstandingBalancesAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                outstandingBalances[__index] = null;
            }
            else
            {
                outstandingBalances[__index] = __item;
            }
        }

        public virtual void ClearOutstandingBalances()
        {
            if (outstandingBalances!=null)
            {
                var __itemsToRemove = outstandingBalances.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveOutstandingBalances(__item);
                }
            }
        }
        [DataMember(Name="CurrentSituations")]
        protected IList<SupplierUploads> currentSituations = new List<SupplierUploads>();
        public virtual List<SupplierUploads> CurrentSituations
        {
            get
            {
                if (currentSituations is SupplierUploads[])
                {
                    currentSituations = currentSituations.ToList();
                }
                if (currentSituations == null)
                {
                    currentSituations = new List<SupplierUploads>();
                }
                return currentSituations.ToList();
            }
            set
            {
                if (currentSituations is SupplierUploads[])
                {
                    currentSituations = currentSituations.ToList();
                }
                if (currentSituations != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(currentSituations);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCurrentSituations(__item);
                    }
                }
                if(value == null)
                {
                    currentSituations = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCurrentSituations(__item);
                }
            }
        }
        public virtual void AddCurrentSituations(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddCurrentSituations(__item);
            }
        }

        public virtual void InternalAddCurrentSituations(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            currentSituations?.Add(__item);
        }

        public virtual void InternalRemoveCurrentSituations(SupplierUploads __item)
        {
            if (__item == null) return;
            currentSituations?.Remove(__item);
        }

        public virtual void AddCurrentSituations(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddCurrentSituations(__item);
        }

        public virtual void AddAtIndexCurrentSituations(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            currentSituations?.Insert(index, __item);
        }

        public virtual void RemoveCurrentSituations(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveCurrentSituations(__item);
            }
        }
        public virtual void SetCurrentSituationsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                currentSituations[__index] = null;
            }
            else
            {
                currentSituations[__index] = __item;
            }
        }

        public virtual void ClearCurrentSituations()
        {
            if (currentSituations!=null)
            {
                var __itemsToRemove = currentSituations.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCurrentSituations(__item);
                }
            }
        }
        [DataMember(Name="CurrentStatements")]
        protected IList<SupplierUploads> currentStatements = new List<SupplierUploads>();
        public virtual List<SupplierUploads> CurrentStatements
        {
            get
            {
                if (currentStatements is SupplierUploads[])
                {
                    currentStatements = currentStatements.ToList();
                }
                if (currentStatements == null)
                {
                    currentStatements = new List<SupplierUploads>();
                }
                return currentStatements.ToList();
            }
            set
            {
                if (currentStatements is SupplierUploads[])
                {
                    currentStatements = currentStatements.ToList();
                }
                if (currentStatements != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(currentStatements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCurrentStatements(__item);
                    }
                }
                if(value == null)
                {
                    currentStatements = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCurrentStatements(__item);
                }
            }
        }
        public virtual void AddCurrentStatements(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddCurrentStatements(__item);
            }
        }

        public virtual void InternalAddCurrentStatements(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            currentStatements?.Add(__item);
        }

        public virtual void InternalRemoveCurrentStatements(SupplierUploads __item)
        {
            if (__item == null) return;
            currentStatements?.Remove(__item);
        }

        public virtual void AddCurrentStatements(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddCurrentStatements(__item);
        }

        public virtual void AddAtIndexCurrentStatements(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            currentStatements?.Insert(index, __item);
        }

        public virtual void RemoveCurrentStatements(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveCurrentStatements(__item);
            }
        }
        public virtual void SetCurrentStatementsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                currentStatements[__index] = null;
            }
            else
            {
                currentStatements[__index] = __item;
            }
        }

        public virtual void ClearCurrentStatements()
        {
            if (currentStatements!=null)
            {
                var __itemsToRemove = currentStatements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCurrentStatements(__item);
                }
            }
        }
        [DataMember(Name="CurrentCredits")]
        protected IList<SupplierUploads> currentCredits = new List<SupplierUploads>();
        public virtual List<SupplierUploads> CurrentCredits
        {
            get
            {
                if (currentCredits is SupplierUploads[])
                {
                    currentCredits = currentCredits.ToList();
                }
                if (currentCredits == null)
                {
                    currentCredits = new List<SupplierUploads>();
                }
                return currentCredits.ToList();
            }
            set
            {
                if (currentCredits is SupplierUploads[])
                {
                    currentCredits = currentCredits.ToList();
                }
                if (currentCredits != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(currentCredits);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCurrentCredits(__item);
                    }
                }
                if(value == null)
                {
                    currentCredits = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCurrentCredits(__item);
                }
            }
        }
        public virtual void AddCurrentCredits(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddCurrentCredits(__item);
            }
        }

        public virtual void InternalAddCurrentCredits(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            currentCredits?.Add(__item);
        }

        public virtual void InternalRemoveCurrentCredits(SupplierUploads __item)
        {
            if (__item == null) return;
            currentCredits?.Remove(__item);
        }

        public virtual void AddCurrentCredits(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddCurrentCredits(__item);
        }

        public virtual void AddAtIndexCurrentCredits(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            currentCredits?.Insert(index, __item);
        }

        public virtual void RemoveCurrentCredits(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveCurrentCredits(__item);
            }
        }
        public virtual void SetCurrentCreditsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                currentCredits[__index] = null;
            }
            else
            {
                currentCredits[__index] = __item;
            }
        }

        public virtual void ClearCurrentCredits()
        {
            if (currentCredits!=null)
            {
                var __itemsToRemove = currentCredits.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCurrentCredits(__item);
                }
            }
        }
        [DataMember(Name="FactoringAgreements")]
        protected IList<SupplierUploads> factoringAgreements = new List<SupplierUploads>();
        public virtual List<SupplierUploads> FactoringAgreements
        {
            get
            {
                if (factoringAgreements is SupplierUploads[])
                {
                    factoringAgreements = factoringAgreements.ToList();
                }
                if (factoringAgreements == null)
                {
                    factoringAgreements = new List<SupplierUploads>();
                }
                return factoringAgreements.ToList();
            }
            set
            {
                if (factoringAgreements is SupplierUploads[])
                {
                    factoringAgreements = factoringAgreements.ToList();
                }
                if (factoringAgreements != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(factoringAgreements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveFactoringAgreements(__item);
                    }
                }
                if(value == null)
                {
                    factoringAgreements = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddFactoringAgreements(__item);
                }
            }
        }
        public virtual void AddFactoringAgreements(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddFactoringAgreements(__item);
            }
        }

        public virtual void InternalAddFactoringAgreements(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            factoringAgreements?.Add(__item);
        }

        public virtual void InternalRemoveFactoringAgreements(SupplierUploads __item)
        {
            if (__item == null) return;
            factoringAgreements?.Remove(__item);
        }

        public virtual void AddFactoringAgreements(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddFactoringAgreements(__item);
        }

        public virtual void AddAtIndexFactoringAgreements(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            factoringAgreements?.Insert(index, __item);
        }

        public virtual void RemoveFactoringAgreements(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveFactoringAgreements(__item);
            }
        }
        public virtual void SetFactoringAgreementsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                factoringAgreements[__index] = null;
            }
            else
            {
                factoringAgreements[__index] = __item;
            }
        }

        public virtual void ClearFactoringAgreements()
        {
            if (factoringAgreements!=null)
            {
                var __itemsToRemove = factoringAgreements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveFactoringAgreements(__item);
                }
            }
        }
        [DataMember(Name="CustomerAgreements")]
        protected IList<SupplierUploads> customerAgreements = new List<SupplierUploads>();
        public virtual List<SupplierUploads> CustomerAgreements
        {
            get
            {
                if (customerAgreements is SupplierUploads[])
                {
                    customerAgreements = customerAgreements.ToList();
                }
                if (customerAgreements == null)
                {
                    customerAgreements = new List<SupplierUploads>();
                }
                return customerAgreements.ToList();
            }
            set
            {
                if (customerAgreements is SupplierUploads[])
                {
                    customerAgreements = customerAgreements.ToList();
                }
                if (customerAgreements != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(customerAgreements);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCustomerAgreements(__item);
                    }
                }
                if(value == null)
                {
                    customerAgreements = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCustomerAgreements(__item);
                }
            }
        }
        public virtual void AddCustomerAgreements(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddCustomerAgreements(__item);
            }
        }

        public virtual void InternalAddCustomerAgreements(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            customerAgreements?.Add(__item);
        }

        public virtual void InternalRemoveCustomerAgreements(SupplierUploads __item)
        {
            if (__item == null) return;
            customerAgreements?.Remove(__item);
        }

        public virtual void AddCustomerAgreements(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddCustomerAgreements(__item);
        }

        public virtual void AddAtIndexCustomerAgreements(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            customerAgreements?.Insert(index, __item);
        }

        public virtual void RemoveCustomerAgreements(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveCustomerAgreements(__item);
            }
        }
        public virtual void SetCustomerAgreementsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                customerAgreements[__index] = null;
            }
            else
            {
                customerAgreements[__index] = __item;
            }
        }

        public virtual void ClearCustomerAgreements()
        {
            if (customerAgreements!=null)
            {
                var __itemsToRemove = customerAgreements.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCustomerAgreements(__item);
                }
            }
        }
        [DataMember(Name="GeneralConstractuals")]
        protected IList<SupplierUploads> generalConstractuals = new List<SupplierUploads>();
        public virtual List<SupplierUploads> GeneralConstractuals
        {
            get
            {
                if (generalConstractuals is SupplierUploads[])
                {
                    generalConstractuals = generalConstractuals.ToList();
                }
                if (generalConstractuals == null)
                {
                    generalConstractuals = new List<SupplierUploads>();
                }
                return generalConstractuals.ToList();
            }
            set
            {
                if (generalConstractuals is SupplierUploads[])
                {
                    generalConstractuals = generalConstractuals.ToList();
                }
                if (generalConstractuals != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(generalConstractuals);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveGeneralConstractuals(__item);
                    }
                }
                if(value == null)
                {
                    generalConstractuals = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddGeneralConstractuals(__item);
                }
            }
        }
        public virtual void AddGeneralConstractuals(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddGeneralConstractuals(__item);
            }
        }

        public virtual void InternalAddGeneralConstractuals(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            generalConstractuals?.Add(__item);
        }

        public virtual void InternalRemoveGeneralConstractuals(SupplierUploads __item)
        {
            if (__item == null) return;
            generalConstractuals?.Remove(__item);
        }

        public virtual void AddGeneralConstractuals(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddGeneralConstractuals(__item);
        }

        public virtual void AddAtIndexGeneralConstractuals(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            generalConstractuals?.Insert(index, __item);
        }

        public virtual void RemoveGeneralConstractuals(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveGeneralConstractuals(__item);
            }
        }
        public virtual void SetGeneralConstractualsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                generalConstractuals[__index] = null;
            }
            else
            {
                generalConstractuals[__index] = __item;
            }
        }

        public virtual void ClearGeneralConstractuals()
        {
            if (generalConstractuals!=null)
            {
                var __itemsToRemove = generalConstractuals.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveGeneralConstractuals(__item);
                }
            }
        }
        [DataMember(Name="OrganizationalCharts")]
        protected IList<SupplierUploads> organizationalCharts = new List<SupplierUploads>();
        public virtual List<SupplierUploads> OrganizationalCharts
        {
            get
            {
                if (organizationalCharts is SupplierUploads[])
                {
                    organizationalCharts = organizationalCharts.ToList();
                }
                if (organizationalCharts == null)
                {
                    organizationalCharts = new List<SupplierUploads>();
                }
                return organizationalCharts.ToList();
            }
            set
            {
                if (organizationalCharts is SupplierUploads[])
                {
                    organizationalCharts = organizationalCharts.ToList();
                }
                if (organizationalCharts != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(organizationalCharts);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveOrganizationalCharts(__item);
                    }
                }
                if(value == null)
                {
                    organizationalCharts = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddOrganizationalCharts(__item);
                }
            }
        }
        public virtual void AddOrganizationalCharts(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddOrganizationalCharts(__item);
            }
        }

        public virtual void InternalAddOrganizationalCharts(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            organizationalCharts?.Add(__item);
        }

        public virtual void InternalRemoveOrganizationalCharts(SupplierUploads __item)
        {
            if (__item == null) return;
            organizationalCharts?.Remove(__item);
        }

        public virtual void AddOrganizationalCharts(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddOrganizationalCharts(__item);
        }

        public virtual void AddAtIndexOrganizationalCharts(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            organizationalCharts?.Insert(index, __item);
        }

        public virtual void RemoveOrganizationalCharts(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveOrganizationalCharts(__item);
            }
        }
        public virtual void SetOrganizationalChartsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                organizationalCharts[__index] = null;
            }
            else
            {
                organizationalCharts[__index] = __item;
            }
        }

        public virtual void ClearOrganizationalCharts()
        {
            if (organizationalCharts!=null)
            {
                var __itemsToRemove = organizationalCharts.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveOrganizationalCharts(__item);
                }
            }
        }
        [DataMember(Name="InvoicesForms")]
        protected IList<SupplierUploads> invoicesForms = new List<SupplierUploads>();
        public virtual List<SupplierUploads> InvoicesForms
        {
            get
            {
                if (invoicesForms is SupplierUploads[])
                {
                    invoicesForms = invoicesForms.ToList();
                }
                if (invoicesForms == null)
                {
                    invoicesForms = new List<SupplierUploads>();
                }
                return invoicesForms.ToList();
            }
            set
            {
                if (invoicesForms is SupplierUploads[])
                {
                    invoicesForms = invoicesForms.ToList();
                }
                if (invoicesForms != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(invoicesForms);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveInvoicesForms(__item);
                    }
                }
                if(value == null)
                {
                    invoicesForms = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddInvoicesForms(__item);
                }
            }
        }
        public virtual void AddInvoicesForms(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddInvoicesForms(__item);
            }
        }

        public virtual void InternalAddInvoicesForms(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            invoicesForms?.Add(__item);
        }

        public virtual void InternalRemoveInvoicesForms(SupplierUploads __item)
        {
            if (__item == null) return;
            invoicesForms?.Remove(__item);
        }

        public virtual void AddInvoicesForms(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddInvoicesForms(__item);
        }

        public virtual void AddAtIndexInvoicesForms(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            invoicesForms?.Insert(index, __item);
        }

        public virtual void RemoveInvoicesForms(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveInvoicesForms(__item);
            }
        }
        public virtual void SetInvoicesFormsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                invoicesForms[__index] = null;
            }
            else
            {
                invoicesForms[__index] = __item;
            }
        }

        public virtual void ClearInvoicesForms()
        {
            if (invoicesForms!=null)
            {
                var __itemsToRemove = invoicesForms.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveInvoicesForms(__item);
                }
            }
        }
        [DataMember(Name="Declarations")]
        protected IList<SupplierUploads> declarations = new List<SupplierUploads>();
        public virtual List<SupplierUploads> Declarations
        {
            get
            {
                if (declarations is SupplierUploads[])
                {
                    declarations = declarations.ToList();
                }
                if (declarations == null)
                {
                    declarations = new List<SupplierUploads>();
                }
                return declarations.ToList();
            }
            set
            {
                if (declarations is SupplierUploads[])
                {
                    declarations = declarations.ToList();
                }
                if (declarations != null)
                {
                    var __itemsToDelete = new List<SupplierUploads>(declarations);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveDeclarations(__item);
                    }
                }
                if(value == null)
                {
                    declarations = new List<SupplierUploads>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddDeclarations(__item);
                }
            }
        }
        public virtual void AddDeclarations(IList<SupplierUploads> __items)
        {
            foreach (var __item in __items)
            {
                AddDeclarations(__item);
            }
        }

        public virtual void InternalAddDeclarations(SupplierUploads __item)
        {
            if (__item == null || disableInternalAdditions) return;
            declarations?.Add(__item);
        }

        public virtual void InternalRemoveDeclarations(SupplierUploads __item)
        {
            if (__item == null) return;
            declarations?.Remove(__item);
        }

        public virtual void AddDeclarations(SupplierUploads __item)
        {
            if (__item == null) return;
            InternalAddDeclarations(__item);
        }

        public virtual void AddAtIndexDeclarations(int index, SupplierUploads __item)
        {
            if (__item == null) return;
            declarations?.Insert(index, __item);
        }

        public virtual void RemoveDeclarations(SupplierUploads __item)
        {
            if (__item != null)
            {
                InternalRemoveDeclarations(__item);
            }
        }
        public virtual void SetDeclarationsAt(SupplierUploads __item, int __index)
        {
            if (__item == null)
            {
                declarations[__index] = null;
            }
            else
            {
                declarations[__index] = __item;
            }
        }

        public virtual void ClearDeclarations()
        {
            if (declarations!=null)
            {
                var __itemsToRemove = declarations.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveDeclarations(__item);
                }
            }
        }
        [DataMember(Name="SupplierEvaluation")]
        protected SupplierEvaluation supplierEvaluation;
        public virtual SupplierEvaluation SupplierEvaluation
        {
            get
            {
                return supplierEvaluation;
            }
            set
            {
                if(Equals(supplierEvaluation, value)) return;
                var __oldValue = supplierEvaluation;
                if (value != null)
                {
                    supplierEvaluation = value;
                }
                else
                {
                    if (supplierEvaluation != null)
                    {
                        supplierEvaluation = null;
                    }
                }
            }
        }
        [DataMember(Name="DataQuality")]
        protected DataQuality dataQuality;
        public virtual DataQuality DataQuality
        {
            get
            {
                return dataQuality;
            }
            set
            {
                if(Equals(dataQuality, value)) return;
                var __oldValue = dataQuality;
                if (value != null)
                {
                    dataQuality = value;
                }
                else
                {
                    if (dataQuality != null)
                    {
                        dataQuality = null;
                    }
                }
            }
        }
        [DataMember(Name="DataAvailability")]
        protected DataAvailability dataAvailability;
        public virtual DataAvailability DataAvailability
        {
            get
            {
                return dataAvailability;
            }
            set
            {
                if(Equals(dataAvailability, value)) return;
                var __oldValue = dataAvailability;
                if (value != null)
                {
                    if(dataAvailability != null && !Equals(dataAvailability, value))
                        dataAvailability.Supplier = null;
                    dataAvailability = value;
                    if(dataAvailability.Supplier != this)
                        dataAvailability.Supplier = this;
                }
                else
                {
                    if (dataAvailability != null)
                    {
                        var __obj = dataAvailability;
                        dataAvailability = null;
                        __obj.Supplier = null;
                    }
                }
            }
        }
        [DataMember(Name="SupplierProducts")]
        protected IList<SupplierProduct> supplierProducts = new List<SupplierProduct>();
        public virtual List<SupplierProduct> SupplierProducts
        {
            get
            {
                if (supplierProducts is SupplierProduct[])
                {
                    supplierProducts = supplierProducts.ToList();
                }
                if (supplierProducts == null)
                {
                    supplierProducts = new List<SupplierProduct>();
                }
                return supplierProducts.ToList();
            }
            set
            {
                if (supplierProducts is SupplierProduct[])
                {
                    supplierProducts = supplierProducts.ToList();
                }
                if (supplierProducts != null)
                {
                    var __itemsToDelete = new List<SupplierProduct>(supplierProducts);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveSupplierProducts(__item);
                    }
                }
                if(value == null)
                {
                    supplierProducts = new List<SupplierProduct>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddSupplierProducts(__item);
                }
            }
        }
        public virtual void AddSupplierProducts(IList<SupplierProduct> __items)
        {
            foreach (var __item in __items)
            {
                AddSupplierProducts(__item);
            }
        }

        public virtual void InternalAddSupplierProducts(SupplierProduct __item)
        {
            if (__item == null || disableInternalAdditions) return;
            supplierProducts?.Add(__item);
        }

        public virtual void InternalRemoveSupplierProducts(SupplierProduct __item)
        {
            if (__item == null) return;
            supplierProducts?.Remove(__item);
        }

        public virtual void AddSupplierProducts(SupplierProduct __item)
        {
            if (__item == null) return;
            if (__item.Supplier != this)
                __item.Supplier = this;
        }

        public virtual void AddAtIndexSupplierProducts(int index, SupplierProduct __item)
        {
            if (__item == null) return;
            supplierProducts?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveSupplierProducts(SupplierProduct __item)
        {
            if (__item != null)
            {
                __item.Supplier = null;
            }
        }
        public virtual void SetSupplierProductsAt(SupplierProduct __item, int __index)
        {
            if (__item == null)
            {
                supplierProducts[__index].Supplier = null;
            }
            else
            {
                supplierProducts[__index] = __item;
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
        }

        public virtual void ClearSupplierProducts()
        {
            if (supplierProducts!=null)
            {
                var __itemsToRemove = supplierProducts.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveSupplierProducts(__item);
                }
            }
        }
        [DataMember(Name="Transactions")]
        protected IList<Transaction> transactions = new List<Transaction>();
        public virtual List<Transaction> Transactions
        {
            get
            {
                if (transactions is Transaction[])
                {
                    transactions = transactions.ToList();
                }
                if (transactions == null)
                {
                    transactions = new List<Transaction>();
                }
                return transactions.ToList();
            }
            set
            {
                if (transactions is Transaction[])
                {
                    transactions = transactions.ToList();
                }
                if (transactions != null)
                {
                    var __itemsToDelete = new List<Transaction>(transactions);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveTransactions(__item);
                    }
                }
                if(value == null)
                {
                    transactions = new List<Transaction>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddTransactions(__item);
                }
            }
        }
        public virtual void AddTransactions(IList<Transaction> __items)
        {
            foreach (var __item in __items)
            {
                AddTransactions(__item);
            }
        }

        public virtual void InternalAddTransactions(Transaction __item)
        {
            if (__item == null || disableInternalAdditions) return;
            transactions?.Add(__item);
        }

        public virtual void InternalRemoveTransactions(Transaction __item)
        {
            if (__item == null) return;
            transactions?.Remove(__item);
        }

        public virtual void AddTransactions(Transaction __item)
        {
            if (__item == null) return;
            if (__item.Supplier != this)
                __item.Supplier = this;
        }

        public virtual void AddAtIndexTransactions(int index, Transaction __item)
        {
            if (__item == null) return;
            transactions?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveTransactions(Transaction __item)
        {
            if (__item != null)
            {
                __item.Supplier = null;
            }
        }
        public virtual void SetTransactionsAt(Transaction __item, int __index)
        {
            if (__item == null)
            {
                transactions[__index].Supplier = null;
            }
            else
            {
                transactions[__index] = __item;
                if (__item.Supplier != this)
                    __item.Supplier = this;
            }
        }

        public virtual void ClearTransactions()
        {
            if (transactions!=null)
            {
                var __itemsToRemove = transactions.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveTransactions(__item);
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Supplier class
/// </summary>
/// <returns>New Supplier object</returns>
/// <remarks></remarks>
        public Supplier(): base()
        {
            acceptedPolicyTerms = false;
        }
        #endregion
        #region Methods

        public override List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            __errors = base._Validate(throwException);
            if (Company != null && Company.Length > 100)
            {
                __errors.Add("Length of property 'Company' cannot be greater than 100.");
            }
            if (CompanyLogo != null && CompanyLogo.Length > 100)
            {
                __errors.Add("Length of property 'CompanyLogo' cannot be greater than 100.");
            }
            if (Business != null && Business.Length > 100)
            {
                __errors.Add("Length of property 'Business' cannot be greater than 100.");
            }
            if (CurrentAmount != null && CurrentAmount.Length > 100)
            {
                __errors.Add("Length of property 'CurrentAmount' cannot be greater than 100.");
            }
            if (AverageAmount != null && AverageAmount.Length > 255)
            {
                __errors.Add("Length of property 'AverageAmount' cannot be greater than 255.");
            }
            if (PercentageOfCreditNotes != null && PercentageOfCreditNotes.Length > 100)
            {
                __errors.Add("Length of property 'PercentageOfCreditNotes' cannot be greater than 100.");
            }
            if (PrimaryPhone != null && PrimaryPhone.Length > 100)
            {
                __errors.Add("Length of property 'PrimaryPhone' cannot be greater than 100.");
            }
            if (SecondaryPhone != null && SecondaryPhone.Length > 100)
            {
                __errors.Add("Length of property 'SecondaryPhone' cannot be greater than 100.");
            }
            if (Fax != null && Fax.Length > 100)
            {
                __errors.Add("Length of property 'Fax' cannot be greater than 100.");
            }
            if (WebSite != null && WebSite.Length > 100)
            {
                __errors.Add("Length of property 'WebSite' cannot be greater than 100.");
            }
            if (SupplierStatus != null && SupplierStatus.Length > 100)
            {
                __errors.Add("Length of property 'SupplierStatus' cannot be greater than 100.");
            }
            if (DomainFocus != null && DomainFocus.Length > 100)
            {
                __errors.Add("Length of property 'DomainFocus' cannot be greater than 100.");
            }
            if (EvaluationResult != null && EvaluationResult.Length > 100)
            {
                __errors.Add("Length of property 'EvaluationResult' cannot be greater than 100.");
            }
            if (Prefix != null && Prefix.Length > 100)
            {
                __errors.Add("Length of property 'Prefix' cannot be greater than 100.");
            }
            if (VATNumber != null && VATNumber.Length > 100)
            {
                __errors.Add("Length of property 'VATNumber' cannot be greater than 100.");
            }
            if (MarketSegment != null && MarketSegment.Length > 100)
            {
                __errors.Add("Length of property 'MarketSegment' cannot be greater than 100.");
            }
            if (AdditionalComments != null && AdditionalComments.Length > 2147483647)
            {
                __errors.Add("Length of property 'AdditionalComments' cannot be greater than 2147483647.");
            }
            if (AdditionalCommentsStep2 != null && AdditionalCommentsStep2.Length > 2147483647)
            {
                __errors.Add("Length of property 'AdditionalCommentsStep2' cannot be greater than 2147483647.");
            }
            if (AdditionalCommentsStep3 != null && AdditionalCommentsStep3.Length > 2147483647)
            {
                __errors.Add("Length of property 'AdditionalCommentsStep3' cannot be greater than 2147483647.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Supplier' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (SupplierId?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Company?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CompanyLogo?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Business?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (CurrentAmount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AverageAmount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PercentageOfCreditNotes?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PrimaryPhone?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SecondaryPhone?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Fax?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (WebSite?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AcceptedPolicyTerms.GetHashCode() );
            hashCode = hashCode * -1521134295 + (SupplierStatus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (DomainFocus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EvaluationResult?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EvaluationCountResult?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AnnualTurnover.GetHashCode() );
            hashCode = hashCode * -1521134295 + (BEnvironment.GetHashCode() );
            hashCode = hashCode * -1521134295 + (PTerms.GetHashCode() );
            hashCode = hashCode * -1521134295 + (Average.GetHashCode() );
            hashCode = hashCode * -1521134295 + (InvoiceValue.GetHashCode() );
            hashCode = hashCode * -1521134295 + (EqRatio.GetHashCode() );
            hashCode = hashCode * -1521134295 + (Prefix?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (VATNumber?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (MarketSegment?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AdditionalComments?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AdditionalCommentsStep2?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (AdditionalCommentsStep3?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (UserName?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PasswordHash?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (SecurityStamp?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (EmailConfirmed.GetHashCode() );
            hashCode = hashCode * -1521134295 + (LockoutEnabled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (PhoneNumberConfirmed.GetHashCode() );
            hashCode = hashCode * -1521134295 + (TwoFactorEnabled.GetHashCode() );
            hashCode = hashCode * -1521134295 + (AccessFailedCount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Name?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Email?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PhoneNumber?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (LockoutEndDate?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Supplier] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Supplier Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Supplier copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Supplier)copiedObjects[this];
            copy = copy ?? new Supplier();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
            }
            copy.SupplierId = this.SupplierId;
            copy.Company = this.Company;
            copy.CompanyLogo = this.CompanyLogo;
            copy.Business = this.Business;
            copy.CurrentAmount = this.CurrentAmount;
            copy.AverageAmount = this.AverageAmount;
            copy.PercentageOfCreditNotes = this.PercentageOfCreditNotes;
            copy.PrimaryPhone = this.PrimaryPhone;
            copy.SecondaryPhone = this.SecondaryPhone;
            copy.Fax = this.Fax;
            copy.WebSite = this.WebSite;
            copy.AcceptedPolicyTerms = this.AcceptedPolicyTerms;
            copy.SupplierStatus = this.SupplierStatus;
            copy.DomainFocus = this.DomainFocus;
            copy.EvaluationResult = this.EvaluationResult;
            copy.EvaluationCountResult = this.EvaluationCountResult;
            copy.AnnualTurnover = this.AnnualTurnover;
            copy.BEnvironment = this.BEnvironment;
            copy.PTerms = this.PTerms;
            copy.Average = this.Average;
            copy.InvoiceValue = this.InvoiceValue;
            copy.EqRatio = this.EqRatio;
            copy.Prefix = this.Prefix;
            copy.VATNumber = this.VATNumber;
            copy.MarketSegment = this.MarketSegment;
            copy.AdditionalComments = this.AdditionalComments;
            copy.AdditionalCommentsStep2 = this.AdditionalCommentsStep2;
            copy.AdditionalCommentsStep3 = this.AdditionalCommentsStep3;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            copy.commercialAgreements = new List<CommercialAgreement>();
            if(deep && this.commercialAgreements != null)
            {
                foreach (var __item in this.commercialAgreements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCommercialAgreements(__item);
                        else
                            copy.AddCommercialAgreements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCommercialAgreements((CommercialAgreement)copiedObjects[__item]);
                    }
                }
            }
            copy.agreements = new List<Agreement>();
            if(deep && this.agreements != null)
            {
                foreach (var __item in this.agreements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddAgreements(__item);
                        else
                            copy.AddAgreements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddAgreements((Agreement)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.supplierBusinessStructureData != null)
            {
                if (!copiedObjects.Contains(this.supplierBusinessStructureData))
                {
                    if (asNew && reuseNestedObjects)
                        copy.SupplierBusinessStructureData = this.SupplierBusinessStructureData;
                    else if (asNew)
                        copy.SupplierBusinessStructureData = this.SupplierBusinessStructureData.Copy(deep, copiedObjects, true);
                    else
                        copy.supplierBusinessStructureData = this.supplierBusinessStructureData.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.SupplierBusinessStructureData = (SupplierBusinessStructureData)copiedObjects[this.SupplierBusinessStructureData];
                    else
                        copy.supplierBusinessStructureData = (SupplierBusinessStructureData)copiedObjects[this.SupplierBusinessStructureData];
                }
            }
            if(deep && this.supplierReceivables != null)
            {
                if (!copiedObjects.Contains(this.supplierReceivables))
                {
                    if (asNew && reuseNestedObjects)
                        copy.SupplierReceivables = this.SupplierReceivables;
                    else if (asNew)
                        copy.SupplierReceivables = this.SupplierReceivables.Copy(deep, copiedObjects, true);
                    else
                        copy.supplierReceivables = this.supplierReceivables.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.SupplierReceivables = (SupplierReceivables)copiedObjects[this.SupplierReceivables];
                    else
                        copy.supplierReceivables = (SupplierReceivables)copiedObjects[this.SupplierReceivables];
                }
            }
            if(deep && this.supplierContactInformation != null)
            {
                if (!copiedObjects.Contains(this.supplierContactInformation))
                {
                    if (asNew && reuseNestedObjects)
                        copy.SupplierContactInformation = this.SupplierContactInformation;
                    else if (asNew)
                        copy.SupplierContactInformation = this.SupplierContactInformation.Copy(deep, copiedObjects, true);
                    else
                        copy.supplierContactInformation = this.supplierContactInformation.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.SupplierContactInformation = (SupplierContactInformation)copiedObjects[this.SupplierContactInformation];
                    else
                        copy.supplierContactInformation = (SupplierContactInformation)copiedObjects[this.SupplierContactInformation];
                }
            }
            if(deep && this.supplierTurnover != null)
            {
                if (!copiedObjects.Contains(this.supplierTurnover))
                {
                    if (asNew && reuseNestedObjects)
                        copy.SupplierTurnover = this.SupplierTurnover;
                    else if (asNew)
                        copy.SupplierTurnover = this.SupplierTurnover.Copy(deep, copiedObjects, true);
                    else
                        copy.supplierTurnover = this.supplierTurnover.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.SupplierTurnover = (SupplierTurnover)copiedObjects[this.SupplierTurnover];
                    else
                        copy.supplierTurnover = (SupplierTurnover)copiedObjects[this.SupplierTurnover];
                }
            }
            if(deep && this.supplierExtraInformation != null)
            {
                if (!copiedObjects.Contains(this.supplierExtraInformation))
                {
                    if (asNew && reuseNestedObjects)
                        copy.SupplierExtraInformation = this.SupplierExtraInformation;
                    else if (asNew)
                        copy.SupplierExtraInformation = this.SupplierExtraInformation.Copy(deep, copiedObjects, true);
                    else
                        copy.supplierExtraInformation = this.supplierExtraInformation.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.SupplierExtraInformation = (SupplierExtraInformation)copiedObjects[this.SupplierExtraInformation];
                    else
                        copy.supplierExtraInformation = (SupplierExtraInformation)copiedObjects[this.SupplierExtraInformation];
                }
            }
            copy.financialStatements = new List<SupplierUploads>();
            if(deep && this.financialStatements != null)
            {
                foreach (var __item in this.financialStatements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddFinancialStatements(__item);
                        else
                            copy.AddFinancialStatements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddFinancialStatements((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.economicEvaluations = new List<SupplierUploads>();
            if(deep && this.economicEvaluations != null)
            {
                foreach (var __item in this.economicEvaluations)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddEconomicEvaluations(__item);
                        else
                            copy.AddEconomicEvaluations(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddEconomicEvaluations((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.businessPlans = new List<SupplierUploads>();
            if(deep && this.businessPlans != null)
            {
                foreach (var __item in this.businessPlans)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddBusinessPlans(__item);
                        else
                            copy.AddBusinessPlans(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddBusinessPlans((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.priorOutstandingBalances = new List<SupplierUploads>();
            if(deep && this.priorOutstandingBalances != null)
            {
                foreach (var __item in this.priorOutstandingBalances)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddPriorOutstandingBalances(__item);
                        else
                            copy.AddPriorOutstandingBalances(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddPriorOutstandingBalances((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.outstandingBalances = new List<SupplierUploads>();
            if(deep && this.outstandingBalances != null)
            {
                foreach (var __item in this.outstandingBalances)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddOutstandingBalances(__item);
                        else
                            copy.AddOutstandingBalances(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddOutstandingBalances((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.currentSituations = new List<SupplierUploads>();
            if(deep && this.currentSituations != null)
            {
                foreach (var __item in this.currentSituations)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCurrentSituations(__item);
                        else
                            copy.AddCurrentSituations(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCurrentSituations((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.currentStatements = new List<SupplierUploads>();
            if(deep && this.currentStatements != null)
            {
                foreach (var __item in this.currentStatements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCurrentStatements(__item);
                        else
                            copy.AddCurrentStatements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCurrentStatements((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.currentCredits = new List<SupplierUploads>();
            if(deep && this.currentCredits != null)
            {
                foreach (var __item in this.currentCredits)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCurrentCredits(__item);
                        else
                            copy.AddCurrentCredits(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCurrentCredits((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.factoringAgreements = new List<SupplierUploads>();
            if(deep && this.factoringAgreements != null)
            {
                foreach (var __item in this.factoringAgreements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddFactoringAgreements(__item);
                        else
                            copy.AddFactoringAgreements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddFactoringAgreements((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.customerAgreements = new List<SupplierUploads>();
            if(deep && this.customerAgreements != null)
            {
                foreach (var __item in this.customerAgreements)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCustomerAgreements(__item);
                        else
                            copy.AddCustomerAgreements(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCustomerAgreements((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.generalConstractuals = new List<SupplierUploads>();
            if(deep && this.generalConstractuals != null)
            {
                foreach (var __item in this.generalConstractuals)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddGeneralConstractuals(__item);
                        else
                            copy.AddGeneralConstractuals(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddGeneralConstractuals((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.organizationalCharts = new List<SupplierUploads>();
            if(deep && this.organizationalCharts != null)
            {
                foreach (var __item in this.organizationalCharts)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddOrganizationalCharts(__item);
                        else
                            copy.AddOrganizationalCharts(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddOrganizationalCharts((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.invoicesForms = new List<SupplierUploads>();
            if(deep && this.invoicesForms != null)
            {
                foreach (var __item in this.invoicesForms)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddInvoicesForms(__item);
                        else
                            copy.AddInvoicesForms(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddInvoicesForms((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            copy.declarations = new List<SupplierUploads>();
            if(deep && this.declarations != null)
            {
                foreach (var __item in this.declarations)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddDeclarations(__item);
                        else
                            copy.AddDeclarations(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddDeclarations((SupplierUploads)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.supplierEvaluation != null)
            {
                if (!copiedObjects.Contains(this.supplierEvaluation))
                {
                    if (asNew && reuseNestedObjects)
                        copy.SupplierEvaluation = this.SupplierEvaluation;
                    else if (asNew)
                        copy.SupplierEvaluation = this.SupplierEvaluation.Copy(deep, copiedObjects, true);
                    else
                        copy.supplierEvaluation = this.supplierEvaluation.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.SupplierEvaluation = (SupplierEvaluation)copiedObjects[this.SupplierEvaluation];
                    else
                        copy.supplierEvaluation = (SupplierEvaluation)copiedObjects[this.SupplierEvaluation];
                }
            }
            if(deep && this.dataQuality != null)
            {
                if (!copiedObjects.Contains(this.dataQuality))
                {
                    if (asNew && reuseNestedObjects)
                        copy.DataQuality = this.DataQuality;
                    else if (asNew)
                        copy.DataQuality = this.DataQuality.Copy(deep, copiedObjects, true);
                    else
                        copy.dataQuality = this.dataQuality.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.DataQuality = (DataQuality)copiedObjects[this.DataQuality];
                    else
                        copy.dataQuality = (DataQuality)copiedObjects[this.DataQuality];
                }
            }
            if(deep && this.dataAvailability != null)
            {
                if (!copiedObjects.Contains(this.dataAvailability))
                {
                    if (asNew && reuseNestedObjects)
                        copy.DataAvailability = this.DataAvailability;
                    else if (asNew)
                        copy.DataAvailability = this.DataAvailability.Copy(deep, copiedObjects, true);
                    else
                        copy.dataAvailability = this.dataAvailability.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.DataAvailability = (DataAvailability)copiedObjects[this.DataAvailability];
                    else
                        copy.dataAvailability = (DataAvailability)copiedObjects[this.DataAvailability];
                }
            }
            copy.supplierProducts = new List<SupplierProduct>();
            if(deep && this.supplierProducts != null)
            {
                foreach (var __item in this.supplierProducts)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddSupplierProducts(__item);
                        else
                            copy.AddSupplierProducts(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddSupplierProducts((SupplierProduct)copiedObjects[__item]);
                    }
                }
            }
            copy.transactions = new List<Transaction>();
            if(deep && this.transactions != null)
            {
                foreach (var __item in this.transactions)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddTransactions(__item);
                        else
                            copy.AddTransactions(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddTransactions((Transaction)copiedObjects[__item]);
                    }
                }
            }
            base.Copy(deep, copiedObjects, asNew, reuseNestedObjects, copy);
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Supplier;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Supplier x, Supplier y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Supplier x, Supplier y)
        {
            return !(x == y);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        #endregion


    }
}
