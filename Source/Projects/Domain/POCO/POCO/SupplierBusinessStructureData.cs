// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DemonstratorApp.BO
{
    /// <summary>
    /// The SupplierBusinessStructureData class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class SupplierBusinessStructureData : IDomainModelClass
    {
        #region SupplierBusinessStructureData's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="NumOfCustomersD")]
        protected int? numOfCustomersD;
        [DataMember(Name="NumOfCustomersAbroad")]
        protected int? numOfCustomersAbroad;
        [DataMember(Name="NumOfCustomersEU")]
        protected int? numOfCustomersEU;
        [DataMember(Name="NumOfCustomers")]
        protected int? numOfCustomers;
        [DataMember(Name="ThereofActiveD")]
        protected int? thereofActiveD;
        [DataMember(Name="ThereofActiveAbroad")]
        protected int? thereofActiveAbroad;
        [DataMember(Name="ThereofActiveEU")]
        protected int? thereofActiveEU;
        [DataMember(Name="ThereofActive")]
        protected int? thereofActive;
        [DataMember(Name="NumOfOccasionalCustD")]
        protected int? numOfOccasionalCustD;
        [DataMember(Name="NumOfOccasionalCustAbroad")]
        protected int? numOfOccasionalCustAbroad;
        [DataMember(Name="NumOfOccasionalCustEU")]
        protected int? numOfOccasionalCustEU;
        [DataMember(Name="NumOfOccasionalCust")]
        protected int? numOfOccasionalCust;
        [DataMember(Name="NumOpenBalanceD")]
        protected int? numOpenBalanceD;
        [DataMember(Name="NumOpenBalanceAboad")]
        protected int? numOpenBalanceAboad;
        [DataMember(Name="NumOpenBalanceEU")]
        protected int? numOpenBalanceEU;
        [DataMember(Name="NumOpenBalance")]
        protected int? numOpenBalance;
        [DataMember(Name="NumOfInvoicesD")]
        protected int? numOfInvoicesD;
        [DataMember(Name="NumOfInvoicesAbroad")]
        protected int? numOfInvoicesAbroad;
        [DataMember(Name="NumOfInvoicesEU")]
        protected int? numOfInvoicesEU;
        [DataMember(Name="NumOfInvoices")]
        protected int? numOfInvoices;
        [DataMember(Name="NumOfEmployeesD")]
        protected int? numOfEmployeesD;
        [DataMember(Name="NumOfEmployeesAbroad")]
        protected int? numOfEmployeesAbroad;
        [DataMember(Name="NumTransCustD")]
        protected int? numTransCustD;
        [DataMember(Name="NumTransCustAbroad")]
        protected int? numTransCustAbroad;
        [DataMember(Name="NumTransCustEU")]
        protected int? numTransCustEU;
        [DataMember(Name="NumTransCust")]
        protected int? numTransCust;
        [DataMember(Name="ApplicableCommercialLaw")]
        protected string applicableCommercialLaw;
        [DataMember(Name="Jurisdiction")]
        protected string jurisdiction;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

        #endregion
        #region SupplierBusinessStructureData's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The NumOfCustomersD property
///
/// </summary>
///
        public virtual int? NumOfCustomersD
        {
            get
            {
                return numOfCustomersD;
            }
            set
            {
                numOfCustomersD = value;
            }
        }
/// <summary>
/// The NumOfCustomersAbroad property
///
/// </summary>
///
        public virtual int? NumOfCustomersAbroad
        {
            get
            {
                return numOfCustomersAbroad;
            }
            set
            {
                numOfCustomersAbroad = value;
            }
        }
/// <summary>
/// The NumOfCustomersEU property
///
/// </summary>
///
        public virtual int? NumOfCustomersEU
        {
            get
            {
                return numOfCustomersEU;
            }
            set
            {
                numOfCustomersEU = value;
            }
        }
/// <summary>
/// The NumOfCustomers property
///
/// </summary>
///
        public virtual int? NumOfCustomers
        {
            get
            {
                return numOfCustomers;
            }
            set
            {
                numOfCustomers = value;
            }
        }
/// <summary>
/// The ThereofActiveD property
///
/// </summary>
///
        public virtual int? ThereofActiveD
        {
            get
            {
                return thereofActiveD;
            }
            set
            {
                thereofActiveD = value;
            }
        }
/// <summary>
/// The ThereofActiveAbroad property
///
/// </summary>
///
        public virtual int? ThereofActiveAbroad
        {
            get
            {
                return thereofActiveAbroad;
            }
            set
            {
                thereofActiveAbroad = value;
            }
        }
/// <summary>
/// The ThereofActiveEU property
///
/// </summary>
///
        public virtual int? ThereofActiveEU
        {
            get
            {
                return thereofActiveEU;
            }
            set
            {
                thereofActiveEU = value;
            }
        }
/// <summary>
/// The ThereofActive property
///
/// </summary>
///
        public virtual int? ThereofActive
        {
            get
            {
                return thereofActive;
            }
            set
            {
                thereofActive = value;
            }
        }
/// <summary>
/// The NumOfOccasionalCustD property
///
/// </summary>
///
        public virtual int? NumOfOccasionalCustD
        {
            get
            {
                return numOfOccasionalCustD;
            }
            set
            {
                numOfOccasionalCustD = value;
            }
        }
/// <summary>
/// The NumOfOccasionalCustAbroad property
///
/// </summary>
///
        public virtual int? NumOfOccasionalCustAbroad
        {
            get
            {
                return numOfOccasionalCustAbroad;
            }
            set
            {
                numOfOccasionalCustAbroad = value;
            }
        }
/// <summary>
/// The NumOfOccasionalCustEU property
///
/// </summary>
///
        public virtual int? NumOfOccasionalCustEU
        {
            get
            {
                return numOfOccasionalCustEU;
            }
            set
            {
                numOfOccasionalCustEU = value;
            }
        }
/// <summary>
/// The NumOfOccasionalCust property
///
/// </summary>
///
        public virtual int? NumOfOccasionalCust
        {
            get
            {
                return numOfOccasionalCust;
            }
            set
            {
                numOfOccasionalCust = value;
            }
        }
/// <summary>
/// The NumOpenBalanceD property
///
/// </summary>
///
        public virtual int? NumOpenBalanceD
        {
            get
            {
                return numOpenBalanceD;
            }
            set
            {
                numOpenBalanceD = value;
            }
        }
/// <summary>
/// The NumOpenBalanceAboad property
///
/// </summary>
///
        public virtual int? NumOpenBalanceAboad
        {
            get
            {
                return numOpenBalanceAboad;
            }
            set
            {
                numOpenBalanceAboad = value;
            }
        }
/// <summary>
/// The NumOpenBalanceEU property
///
/// </summary>
///
        public virtual int? NumOpenBalanceEU
        {
            get
            {
                return numOpenBalanceEU;
            }
            set
            {
                numOpenBalanceEU = value;
            }
        }
/// <summary>
/// The NumOpenBalance property
///
/// </summary>
///
        public virtual int? NumOpenBalance
        {
            get
            {
                return numOpenBalance;
            }
            set
            {
                numOpenBalance = value;
            }
        }
/// <summary>
/// The NumOfInvoicesD property
///
/// </summary>
///
        public virtual int? NumOfInvoicesD
        {
            get
            {
                return numOfInvoicesD;
            }
            set
            {
                numOfInvoicesD = value;
            }
        }
/// <summary>
/// The NumOfInvoicesAbroad property
///
/// </summary>
///
        public virtual int? NumOfInvoicesAbroad
        {
            get
            {
                return numOfInvoicesAbroad;
            }
            set
            {
                numOfInvoicesAbroad = value;
            }
        }
/// <summary>
/// The NumOfInvoicesEU property
///
/// </summary>
///
        public virtual int? NumOfInvoicesEU
        {
            get
            {
                return numOfInvoicesEU;
            }
            set
            {
                numOfInvoicesEU = value;
            }
        }
/// <summary>
/// The NumOfInvoices property
///
/// </summary>
///
        public virtual int? NumOfInvoices
        {
            get
            {
                return numOfInvoices;
            }
            set
            {
                numOfInvoices = value;
            }
        }
/// <summary>
/// The NumOfEmployeesD property
///
/// </summary>
///
        public virtual int? NumOfEmployeesD
        {
            get
            {
                return numOfEmployeesD;
            }
            set
            {
                numOfEmployeesD = value;
            }
        }
/// <summary>
/// The NumOfEmployeesAbroad property
///
/// </summary>
///
        public virtual int? NumOfEmployeesAbroad
        {
            get
            {
                return numOfEmployeesAbroad;
            }
            set
            {
                numOfEmployeesAbroad = value;
            }
        }
/// <summary>
/// The NumTransCustD property
///
/// </summary>
///
        public virtual int? NumTransCustD
        {
            get
            {
                return numTransCustD;
            }
            set
            {
                numTransCustD = value;
            }
        }
/// <summary>
/// The NumTransCustAbroad property
///
/// </summary>
///
        public virtual int? NumTransCustAbroad
        {
            get
            {
                return numTransCustAbroad;
            }
            set
            {
                numTransCustAbroad = value;
            }
        }
/// <summary>
/// The NumTransCustEU property
///
/// </summary>
///
        public virtual int? NumTransCustEU
        {
            get
            {
                return numTransCustEU;
            }
            set
            {
                numTransCustEU = value;
            }
        }
/// <summary>
/// The NumTransCust property
///
/// </summary>
///
        public virtual int? NumTransCust
        {
            get
            {
                return numTransCust;
            }
            set
            {
                numTransCust = value;
            }
        }
/// <summary>
/// The ApplicableCommercialLaw property
///
/// </summary>
///
        public virtual string ApplicableCommercialLaw
        {
            get
            {
                return applicableCommercialLaw;
            }
            set
            {
                applicableCommercialLaw = value;
            }
        }
/// <summary>
/// The Jurisdiction property
///
/// </summary>
///
        public virtual string Jurisdiction
        {
            get
            {
                return jurisdiction;
            }
            set
            {
                jurisdiction = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the SupplierBusinessStructureData class
/// </summary>
/// <returns>New SupplierBusinessStructureData object</returns>
/// <remarks></remarks>
        public SupplierBusinessStructureData() {}
        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (ApplicableCommercialLaw != null && ApplicableCommercialLaw.Length > 100)
            {
                __errors.Add("Length of property 'ApplicableCommercialLaw' cannot be greater than 100.");
            }
            if (Jurisdiction != null && Jurisdiction.Length > 100)
            {
                __errors.Add("Length of property 'Jurisdiction' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'SupplierBusinessStructureData' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfCustomersD?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfCustomersAbroad?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfCustomersEU?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfCustomers?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ThereofActiveD?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ThereofActiveAbroad?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ThereofActiveEU?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ThereofActive?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfOccasionalCustD?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfOccasionalCustAbroad?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfOccasionalCustEU?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfOccasionalCust?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOpenBalanceD?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOpenBalanceAboad?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOpenBalanceEU?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOpenBalance?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfInvoicesD?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfInvoicesAbroad?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfInvoicesEU?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfInvoices?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfEmployeesD?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumOfEmployeesAbroad?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumTransCustD?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumTransCustAbroad?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumTransCustEU?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (NumTransCust?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ApplicableCommercialLaw?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (Jurisdiction?.GetHashCode() ?? 0);
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [SupplierBusinessStructureData] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual SupplierBusinessStructureData Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, SupplierBusinessStructureData copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (SupplierBusinessStructureData)copiedObjects[this];
            copy = copy ?? new SupplierBusinessStructureData();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.NumOfCustomersD = this.NumOfCustomersD;
            copy.NumOfCustomersAbroad = this.NumOfCustomersAbroad;
            copy.NumOfCustomersEU = this.NumOfCustomersEU;
            copy.NumOfCustomers = this.NumOfCustomers;
            copy.ThereofActiveD = this.ThereofActiveD;
            copy.ThereofActiveAbroad = this.ThereofActiveAbroad;
            copy.ThereofActiveEU = this.ThereofActiveEU;
            copy.ThereofActive = this.ThereofActive;
            copy.NumOfOccasionalCustD = this.NumOfOccasionalCustD;
            copy.NumOfOccasionalCustAbroad = this.NumOfOccasionalCustAbroad;
            copy.NumOfOccasionalCustEU = this.NumOfOccasionalCustEU;
            copy.NumOfOccasionalCust = this.NumOfOccasionalCust;
            copy.NumOpenBalanceD = this.NumOpenBalanceD;
            copy.NumOpenBalanceAboad = this.NumOpenBalanceAboad;
            copy.NumOpenBalanceEU = this.NumOpenBalanceEU;
            copy.NumOpenBalance = this.NumOpenBalance;
            copy.NumOfInvoicesD = this.NumOfInvoicesD;
            copy.NumOfInvoicesAbroad = this.NumOfInvoicesAbroad;
            copy.NumOfInvoicesEU = this.NumOfInvoicesEU;
            copy.NumOfInvoices = this.NumOfInvoices;
            copy.NumOfEmployeesD = this.NumOfEmployeesD;
            copy.NumOfEmployeesAbroad = this.NumOfEmployeesAbroad;
            copy.NumTransCustD = this.NumTransCustD;
            copy.NumTransCustAbroad = this.NumTransCustAbroad;
            copy.NumTransCustEU = this.NumTransCustEU;
            copy.NumTransCust = this.NumTransCust;
            copy.ApplicableCommercialLaw = this.ApplicableCommercialLaw;
            copy.Jurisdiction = this.Jurisdiction;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as SupplierBusinessStructureData;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(SupplierBusinessStructureData x, SupplierBusinessStructureData y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(SupplierBusinessStructureData x, SupplierBusinessStructureData y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(SupplierBusinessStructureData compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
