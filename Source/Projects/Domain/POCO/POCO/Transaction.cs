// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
using System;
using System.Runtime.Serialization;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Collections;
using System.ComponentModel.DataAnnotations;
using System.Linq.Expressions;
using zAppDev.DotNet.Framework.Linq;
using zAppDev.DotNet.Framework.Data.Domain;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Identity.Model;

namespace DemonstratorApp.BO
{
    /// <summary>
    /// The Transaction class
    ///
    /// </summary>
    [Serializable]
    [DataContract]
    public class Transaction : IDomainModelClass
    {
        #region Transaction's Fields

        protected Guid _transientId= Guid.NewGuid();
        public virtual Guid TransientId
        {
            get
            {
                return _transientId;
            }
            set
            {
                _transientId = value;
            }
        }
        [DataMember(Name="Id")]
        protected int? id = 0;
        [DataMember(Name="TransactionDateOccured")]
        protected DateTime? transactionDateOccured;
        [DataMember(Name="TransactionValue")]
        protected decimal? transactionValue;
        [DataMember(Name="FundedAmount")]
        protected decimal? fundedAmount;
        [DataMember(Name="ToBePaidAmount")]
        protected decimal? toBePaidAmount;
        [DataMember(Name="InvoicedDate")]
        protected DateTime? invoicedDate;
        [DataMember(Name="PaymentStatus")]
        protected string paymentStatus;
        [DataMember(Name="PaymentDate")]
        protected DateTime? paymentDate;
        [DataMember(Name="RestPaymentAmount")]
        protected decimal? restPaymentAmount;
        [DataMember(Name="PaidByBuyer")]
        protected bool paidByBuyer;
        [DataMember(Name="VersionTimestamp")]
        protected byte[] versionTimestamp;

#pragma warning disable 0649
        private bool disableInternalAdditions;
#pragma warning restore 0649
        #endregion
        #region Transaction's Properties
/// <summary>
/// The Id property
///
/// </summary>
///
        [Key]
        public virtual int? Id
        {
            get
            {
                return id;
            }
            set
            {
                id = value;
            }
        }
/// <summary>
/// The TransactionDateOccured property
///
/// </summary>
///
        public virtual DateTime? TransactionDateOccured
        {
            get
            {
                return transactionDateOccured;
            }
            set
            {
                transactionDateOccured = value;
            }
        }
/// <summary>
/// The TransactionValue property
///
/// </summary>
///
        public virtual decimal? TransactionValue
        {
            get
            {
                var __valToGet = Get_TransactionValue();
                return __valToGet;
            }
            set
            {
                transactionValue = value;
            }
        }
/// <summary>
/// The FundedAmount property
///
/// </summary>
///
        public virtual decimal? FundedAmount
        {
            get
            {
                var __valToGet = Get_FundedAmount();
                return __valToGet;
            }
            set
            {
                fundedAmount = value;
            }
        }
/// <summary>
/// The ToBePaidAmount property
///
/// </summary>
///
        public virtual decimal? ToBePaidAmount
        {
            get
            {
                return toBePaidAmount;
            }
            set
            {
                toBePaidAmount = value;
            }
        }
/// <summary>
/// The InvoicedDate property
///
/// </summary>
///
        public virtual DateTime? InvoicedDate
        {
            get
            {
                return invoicedDate;
            }
            set
            {
                invoicedDate = value;
            }
        }
/// <summary>
/// The PaymentStatus property
///
/// </summary>
///
        public virtual string PaymentStatus
        {
            get
            {
                return paymentStatus;
            }
            set
            {
                paymentStatus = value;
            }
        }
/// <summary>
/// The PaymentDate property
///
/// </summary>
///
        public virtual DateTime? PaymentDate
        {
            get
            {
                return paymentDate;
            }
            set
            {
                paymentDate = value;
            }
        }
/// <summary>
/// The RestPaymentAmount property
///
/// </summary>
///
        public virtual decimal? RestPaymentAmount
        {
            get
            {
                return restPaymentAmount;
            }
            set
            {
                restPaymentAmount = value;
            }
        }
/// <summary>
/// The PaidByBuyer property
///
/// </summary>
///
        public virtual bool PaidByBuyer
        {
            get
            {
                return paidByBuyer;
            }
            set
            {
                paidByBuyer = value;
            }
        }
/// <summary>
/// The VersionTimestamp property
///Provides concurrency control for the class
/// </summary>
///
        public virtual byte[] VersionTimestamp
        {
            get
            {
                return versionTimestamp;
            }
            set
            {
                versionTimestamp = value;
            }
        }
        #endregion
        #region Transaction's Participant Properties
        [DataMember(Name="CommercialAgreement")]
        protected CommercialAgreement commercialAgreement;
        public virtual CommercialAgreement CommercialAgreement
        {
            get
            {
                return commercialAgreement;
            }
            set
            {
                if(Equals(commercialAgreement, value)) return;
                var __oldValue = commercialAgreement;
                commercialAgreement?.InternalRemoveTransactions(this);
                commercialAgreement = value;
                if (value != null)
                {
                    commercialAgreement.InternalAddTransactions(this);
                }
            }
        }
        [DataMember(Name="Orders")]
        protected IList<Order> orders = new List<Order>();
        public virtual List<Order> Orders
        {
            get
            {
                if (orders is Order[])
                {
                    orders = orders.ToList();
                }
                if (orders == null)
                {
                    orders = new List<Order>();
                }
                return orders.ToList();
            }
            set
            {
                if (orders is Order[])
                {
                    orders = orders.ToList();
                }
                if (orders != null)
                {
                    var __itemsToDelete = new List<Order>(orders);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveOrders(__item);
                    }
                }
                if(value == null)
                {
                    orders = new List<Order>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddOrders(__item);
                }
            }
        }
        public virtual void AddOrders(IList<Order> __items)
        {
            foreach (var __item in __items)
            {
                AddOrders(__item);
            }
        }

        public virtual void InternalAddOrders(Order __item)
        {
            if (__item == null || disableInternalAdditions) return;
            orders?.Add(__item);
        }

        public virtual void InternalRemoveOrders(Order __item)
        {
            if (__item == null) return;
            orders?.Remove(__item);
        }

        public virtual void AddOrders(Order __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexOrders(int index, Order __item)
        {
            if (__item == null) return;
            orders?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveOrders(Order __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetOrdersAt(Order __item, int __index)
        {
            if (__item == null)
            {
                orders[__index].Transaction = null;
            }
            else
            {
                orders[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearOrders()
        {
            if (orders!=null)
            {
                var __itemsToRemove = orders.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveOrders(__item);
                }
            }
        }
        [DataMember(Name="CreditNotes")]
        protected IList<CreditNote> creditNotes = new List<CreditNote>();
        public virtual List<CreditNote> CreditNotes
        {
            get
            {
                if (creditNotes is CreditNote[])
                {
                    creditNotes = creditNotes.ToList();
                }
                if (creditNotes == null)
                {
                    creditNotes = new List<CreditNote>();
                }
                return creditNotes.ToList();
            }
            set
            {
                if (creditNotes is CreditNote[])
                {
                    creditNotes = creditNotes.ToList();
                }
                if (creditNotes != null)
                {
                    var __itemsToDelete = new List<CreditNote>(creditNotes);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCreditNotes(__item);
                    }
                }
                if(value == null)
                {
                    creditNotes = new List<CreditNote>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCreditNotes(__item);
                }
            }
        }
        public virtual void AddCreditNotes(IList<CreditNote> __items)
        {
            foreach (var __item in __items)
            {
                AddCreditNotes(__item);
            }
        }

        public virtual void InternalAddCreditNotes(CreditNote __item)
        {
            if (__item == null || disableInternalAdditions) return;
            creditNotes?.Add(__item);
        }

        public virtual void InternalRemoveCreditNotes(CreditNote __item)
        {
            if (__item == null) return;
            creditNotes?.Remove(__item);
        }

        public virtual void AddCreditNotes(CreditNote __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexCreditNotes(int index, CreditNote __item)
        {
            if (__item == null) return;
            creditNotes?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveCreditNotes(CreditNote __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetCreditNotesAt(CreditNote __item, int __index)
        {
            if (__item == null)
            {
                creditNotes[__index].Transaction = null;
            }
            else
            {
                creditNotes[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearCreditNotes()
        {
            if (creditNotes!=null)
            {
                var __itemsToRemove = creditNotes.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCreditNotes(__item);
                }
            }
        }
        [DataMember(Name="DeliveryNotes")]
        protected IList<DeliveryNote> deliveryNotes = new List<DeliveryNote>();
        public virtual List<DeliveryNote> DeliveryNotes
        {
            get
            {
                if (deliveryNotes is DeliveryNote[])
                {
                    deliveryNotes = deliveryNotes.ToList();
                }
                if (deliveryNotes == null)
                {
                    deliveryNotes = new List<DeliveryNote>();
                }
                return deliveryNotes.ToList();
            }
            set
            {
                if (deliveryNotes is DeliveryNote[])
                {
                    deliveryNotes = deliveryNotes.ToList();
                }
                if (deliveryNotes != null)
                {
                    var __itemsToDelete = new List<DeliveryNote>(deliveryNotes);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveDeliveryNotes(__item);
                    }
                }
                if(value == null)
                {
                    deliveryNotes = new List<DeliveryNote>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddDeliveryNotes(__item);
                }
            }
        }
        public virtual void AddDeliveryNotes(IList<DeliveryNote> __items)
        {
            foreach (var __item in __items)
            {
                AddDeliveryNotes(__item);
            }
        }

        public virtual void InternalAddDeliveryNotes(DeliveryNote __item)
        {
            if (__item == null || disableInternalAdditions) return;
            deliveryNotes?.Add(__item);
        }

        public virtual void InternalRemoveDeliveryNotes(DeliveryNote __item)
        {
            if (__item == null) return;
            deliveryNotes?.Remove(__item);
        }

        public virtual void AddDeliveryNotes(DeliveryNote __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexDeliveryNotes(int index, DeliveryNote __item)
        {
            if (__item == null) return;
            deliveryNotes?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveDeliveryNotes(DeliveryNote __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetDeliveryNotesAt(DeliveryNote __item, int __index)
        {
            if (__item == null)
            {
                deliveryNotes[__index].Transaction = null;
            }
            else
            {
                deliveryNotes[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearDeliveryNotes()
        {
            if (deliveryNotes!=null)
            {
                var __itemsToRemove = deliveryNotes.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveDeliveryNotes(__item);
                }
            }
        }
        [DataMember(Name="Invoices")]
        protected IList<Invoice> invoices = new List<Invoice>();
        public virtual List<Invoice> Invoices
        {
            get
            {
                if (invoices is Invoice[])
                {
                    invoices = invoices.ToList();
                }
                if (invoices == null)
                {
                    invoices = new List<Invoice>();
                }
                return invoices.ToList();
            }
            set
            {
                if (invoices is Invoice[])
                {
                    invoices = invoices.ToList();
                }
                if (invoices != null)
                {
                    var __itemsToDelete = new List<Invoice>(invoices);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveInvoices(__item);
                    }
                }
                if(value == null)
                {
                    invoices = new List<Invoice>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddInvoices(__item);
                }
            }
        }
        public virtual void AddInvoices(IList<Invoice> __items)
        {
            foreach (var __item in __items)
            {
                AddInvoices(__item);
            }
        }

        public virtual void InternalAddInvoices(Invoice __item)
        {
            if (__item == null || disableInternalAdditions) return;
            invoices?.Add(__item);
        }

        public virtual void InternalRemoveInvoices(Invoice __item)
        {
            if (__item == null) return;
            invoices?.Remove(__item);
        }

        public virtual void AddInvoices(Invoice __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexInvoices(int index, Invoice __item)
        {
            if (__item == null) return;
            invoices?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveInvoices(Invoice __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetInvoicesAt(Invoice __item, int __index)
        {
            if (__item == null)
            {
                invoices[__index].Transaction = null;
            }
            else
            {
                invoices[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearInvoices()
        {
            if (invoices!=null)
            {
                var __itemsToRemove = invoices.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveInvoices(__item);
                }
            }
        }
        [DataMember(Name="ProofOfDeliveries")]
        protected IList<ProofOfDelivery> proofOfDeliveries = new List<ProofOfDelivery>();
        public virtual List<ProofOfDelivery> ProofOfDeliveries
        {
            get
            {
                if (proofOfDeliveries is ProofOfDelivery[])
                {
                    proofOfDeliveries = proofOfDeliveries.ToList();
                }
                if (proofOfDeliveries == null)
                {
                    proofOfDeliveries = new List<ProofOfDelivery>();
                }
                return proofOfDeliveries.ToList();
            }
            set
            {
                if (proofOfDeliveries is ProofOfDelivery[])
                {
                    proofOfDeliveries = proofOfDeliveries.ToList();
                }
                if (proofOfDeliveries != null)
                {
                    var __itemsToDelete = new List<ProofOfDelivery>(proofOfDeliveries);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveProofOfDeliveries(__item);
                    }
                }
                if(value == null)
                {
                    proofOfDeliveries = new List<ProofOfDelivery>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddProofOfDeliveries(__item);
                }
            }
        }
        public virtual void AddProofOfDeliveries(IList<ProofOfDelivery> __items)
        {
            foreach (var __item in __items)
            {
                AddProofOfDeliveries(__item);
            }
        }

        public virtual void InternalAddProofOfDeliveries(ProofOfDelivery __item)
        {
            if (__item == null || disableInternalAdditions) return;
            proofOfDeliveries?.Add(__item);
        }

        public virtual void InternalRemoveProofOfDeliveries(ProofOfDelivery __item)
        {
            if (__item == null) return;
            proofOfDeliveries?.Remove(__item);
        }

        public virtual void AddProofOfDeliveries(ProofOfDelivery __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexProofOfDeliveries(int index, ProofOfDelivery __item)
        {
            if (__item == null) return;
            proofOfDeliveries?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveProofOfDeliveries(ProofOfDelivery __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetProofOfDeliveriesAt(ProofOfDelivery __item, int __index)
        {
            if (__item == null)
            {
                proofOfDeliveries[__index].Transaction = null;
            }
            else
            {
                proofOfDeliveries[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearProofOfDeliveries()
        {
            if (proofOfDeliveries!=null)
            {
                var __itemsToRemove = proofOfDeliveries.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveProofOfDeliveries(__item);
                }
            }
        }
        [DataMember(Name="TransactionStatus")]
        protected TransactionStatus transactionStatus;
        public virtual TransactionStatus TransactionStatus
        {
            get
            {
                return transactionStatus;
            }
            set
            {
                if(Equals(transactionStatus, value)) return;
                var __oldValue = transactionStatus;
                if (value != null)
                {
                    transactionStatus = value;
                }
                else
                {
                    if (transactionStatus != null)
                    {
                        transactionStatus = null;
                    }
                }
            }
        }
        [DataMember(Name="Supplier")]
        protected Supplier supplier;
        public virtual Supplier Supplier
        {
            get
            {
                return supplier;
            }
            set
            {
                if(Equals(supplier, value)) return;
                var __oldValue = supplier;
                supplier?.InternalRemoveTransactions(this);
                supplier = value;
                if (value != null)
                {
                    supplier.InternalAddTransactions(this);
                }
            }
        }
        [DataMember(Name="ImportedBuyer")]
        protected ImportedBuyer importedBuyer;
        public virtual ImportedBuyer ImportedBuyer
        {
            get
            {
                return importedBuyer;
            }
            set
            {
                if(Equals(importedBuyer, value)) return;
                var __oldValue = importedBuyer;
                importedBuyer?.InternalRemoveTransactions(this);
                importedBuyer = value;
                if (value != null)
                {
                    importedBuyer.InternalAddTransactions(this);
                }
            }
        }
        [DataMember(Name="LetterOfCredits")]
        protected IList<LetterOfCredit> letterOfCredits = new List<LetterOfCredit>();
        public virtual List<LetterOfCredit> LetterOfCredits
        {
            get
            {
                if (letterOfCredits is LetterOfCredit[])
                {
                    letterOfCredits = letterOfCredits.ToList();
                }
                if (letterOfCredits == null)
                {
                    letterOfCredits = new List<LetterOfCredit>();
                }
                return letterOfCredits.ToList();
            }
            set
            {
                if (letterOfCredits is LetterOfCredit[])
                {
                    letterOfCredits = letterOfCredits.ToList();
                }
                if (letterOfCredits != null)
                {
                    var __itemsToDelete = new List<LetterOfCredit>(letterOfCredits);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveLetterOfCredits(__item);
                    }
                }
                if(value == null)
                {
                    letterOfCredits = new List<LetterOfCredit>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddLetterOfCredits(__item);
                }
            }
        }
        public virtual void AddLetterOfCredits(IList<LetterOfCredit> __items)
        {
            foreach (var __item in __items)
            {
                AddLetterOfCredits(__item);
            }
        }

        public virtual void InternalAddLetterOfCredits(LetterOfCredit __item)
        {
            if (__item == null || disableInternalAdditions) return;
            letterOfCredits?.Add(__item);
        }

        public virtual void InternalRemoveLetterOfCredits(LetterOfCredit __item)
        {
            if (__item == null) return;
            letterOfCredits?.Remove(__item);
        }

        public virtual void AddLetterOfCredits(LetterOfCredit __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexLetterOfCredits(int index, LetterOfCredit __item)
        {
            if (__item == null) return;
            letterOfCredits?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveLetterOfCredits(LetterOfCredit __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetLetterOfCreditsAt(LetterOfCredit __item, int __index)
        {
            if (__item == null)
            {
                letterOfCredits[__index].Transaction = null;
            }
            else
            {
                letterOfCredits[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearLetterOfCredits()
        {
            if (letterOfCredits!=null)
            {
                var __itemsToRemove = letterOfCredits.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveLetterOfCredits(__item);
                }
            }
        }
        [DataMember(Name="Intermediaries")]
        protected IList<Intermediary> intermediaries = new List<Intermediary>();
        public virtual List<Intermediary> Intermediaries
        {
            get
            {
                if (intermediaries is Intermediary[])
                {
                    intermediaries = intermediaries.ToList();
                }
                if (intermediaries == null)
                {
                    intermediaries = new List<Intermediary>();
                }
                return intermediaries.ToList();
            }
            set
            {
                if (intermediaries is Intermediary[])
                {
                    intermediaries = intermediaries.ToList();
                }
                if (intermediaries != null)
                {
                    var __itemsToDelete = new List<Intermediary>(intermediaries);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveIntermediaries(__item);
                    }
                }
                if(value == null)
                {
                    intermediaries = new List<Intermediary>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddIntermediaries(__item);
                }
            }
        }
        public virtual void AddIntermediaries(IList<Intermediary> __items)
        {
            foreach (var __item in __items)
            {
                AddIntermediaries(__item);
            }
        }

        public virtual void InternalAddIntermediaries(Intermediary __item)
        {
            if (__item == null || disableInternalAdditions) return;
            intermediaries?.Add(__item);
        }

        public virtual void InternalRemoveIntermediaries(Intermediary __item)
        {
            if (__item == null) return;
            intermediaries?.Remove(__item);
        }

        public virtual void AddIntermediaries(Intermediary __item)
        {
            if (__item == null) return;
            if (!intermediaries.Contains(__item))
                InternalAddIntermediaries(__item);
            if (!__item.Transactions.Contains(this))
                __item.AddTransactions(this);
        }

        public virtual void AddAtIndexIntermediaries(int index, Intermediary __item)
        {
            if (__item == null) return;
            if (!intermediaries.Contains(__item))
                intermediaries.Insert(index, __item);
            if (!__item.Transactions.Contains(this))
                __item.AddTransactions(this);
        }

        public virtual void RemoveIntermediaries(Intermediary __item)
        {
            if (__item != null)
            {
                if (intermediaries.Contains(__item))
                    InternalRemoveIntermediaries(__item);
                if(__item.Transactions.Contains(this))
                    __item.RemoveTransactions(this);
            }
        }
        public virtual void SetIntermediariesAt(Intermediary __item, int __index)
        {
            if (__item == null)
            {
                intermediaries[__index].RemoveTransactions(this);
            }
            else
            {
                intermediaries[__index] = __item;
                if (!__item.Transactions.Contains(this))
                    __item.AddTransactions(this);
            }
        }

        public virtual void ClearIntermediaries()
        {
            if (intermediaries!=null)
            {
                var __itemsToRemove = intermediaries.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveIntermediaries(__item);
                }
            }
        }
        [DataMember(Name="PartialProofOfDeliveries")]
        protected IList<PartialProofOfDelivery> partialProofOfDeliveries = new List<PartialProofOfDelivery>();
        public virtual List<PartialProofOfDelivery> PartialProofOfDeliveries
        {
            get
            {
                if (partialProofOfDeliveries is PartialProofOfDelivery[])
                {
                    partialProofOfDeliveries = partialProofOfDeliveries.ToList();
                }
                if (partialProofOfDeliveries == null)
                {
                    partialProofOfDeliveries = new List<PartialProofOfDelivery>();
                }
                return partialProofOfDeliveries.ToList();
            }
            set
            {
                if (partialProofOfDeliveries is PartialProofOfDelivery[])
                {
                    partialProofOfDeliveries = partialProofOfDeliveries.ToList();
                }
                if (partialProofOfDeliveries != null)
                {
                    var __itemsToDelete = new List<PartialProofOfDelivery>(partialProofOfDeliveries);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemovePartialProofOfDeliveries(__item);
                    }
                }
                if(value == null)
                {
                    partialProofOfDeliveries = new List<PartialProofOfDelivery>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddPartialProofOfDeliveries(__item);
                }
            }
        }
        public virtual void AddPartialProofOfDeliveries(IList<PartialProofOfDelivery> __items)
        {
            foreach (var __item in __items)
            {
                AddPartialProofOfDeliveries(__item);
            }
        }

        public virtual void InternalAddPartialProofOfDeliveries(PartialProofOfDelivery __item)
        {
            if (__item == null || disableInternalAdditions) return;
            partialProofOfDeliveries?.Add(__item);
        }

        public virtual void InternalRemovePartialProofOfDeliveries(PartialProofOfDelivery __item)
        {
            if (__item == null) return;
            partialProofOfDeliveries?.Remove(__item);
        }

        public virtual void AddPartialProofOfDeliveries(PartialProofOfDelivery __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexPartialProofOfDeliveries(int index, PartialProofOfDelivery __item)
        {
            if (__item == null) return;
            partialProofOfDeliveries?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemovePartialProofOfDeliveries(PartialProofOfDelivery __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetPartialProofOfDeliveriesAt(PartialProofOfDelivery __item, int __index)
        {
            if (__item == null)
            {
                partialProofOfDeliveries[__index].Transaction = null;
            }
            else
            {
                partialProofOfDeliveries[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearPartialProofOfDeliveries()
        {
            if (partialProofOfDeliveries!=null)
            {
                var __itemsToRemove = partialProofOfDeliveries.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemovePartialProofOfDeliveries(__item);
                }
            }
        }
        [DataMember(Name="CustomsClearingDocumentations")]
        protected IList<CustomsClearingDocumentation> customsClearingDocumentations = new List<CustomsClearingDocumentation>();
        public virtual List<CustomsClearingDocumentation> CustomsClearingDocumentations
        {
            get
            {
                if (customsClearingDocumentations is CustomsClearingDocumentation[])
                {
                    customsClearingDocumentations = customsClearingDocumentations.ToList();
                }
                if (customsClearingDocumentations == null)
                {
                    customsClearingDocumentations = new List<CustomsClearingDocumentation>();
                }
                return customsClearingDocumentations.ToList();
            }
            set
            {
                if (customsClearingDocumentations is CustomsClearingDocumentation[])
                {
                    customsClearingDocumentations = customsClearingDocumentations.ToList();
                }
                if (customsClearingDocumentations != null)
                {
                    var __itemsToDelete = new List<CustomsClearingDocumentation>(customsClearingDocumentations);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveCustomsClearingDocumentations(__item);
                    }
                }
                if(value == null)
                {
                    customsClearingDocumentations = new List<CustomsClearingDocumentation>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddCustomsClearingDocumentations(__item);
                }
            }
        }
        public virtual void AddCustomsClearingDocumentations(IList<CustomsClearingDocumentation> __items)
        {
            foreach (var __item in __items)
            {
                AddCustomsClearingDocumentations(__item);
            }
        }

        public virtual void InternalAddCustomsClearingDocumentations(CustomsClearingDocumentation __item)
        {
            if (__item == null || disableInternalAdditions) return;
            customsClearingDocumentations?.Add(__item);
        }

        public virtual void InternalRemoveCustomsClearingDocumentations(CustomsClearingDocumentation __item)
        {
            if (__item == null) return;
            customsClearingDocumentations?.Remove(__item);
        }

        public virtual void AddCustomsClearingDocumentations(CustomsClearingDocumentation __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexCustomsClearingDocumentations(int index, CustomsClearingDocumentation __item)
        {
            if (__item == null) return;
            customsClearingDocumentations?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveCustomsClearingDocumentations(CustomsClearingDocumentation __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetCustomsClearingDocumentationsAt(CustomsClearingDocumentation __item, int __index)
        {
            if (__item == null)
            {
                customsClearingDocumentations[__index].Transaction = null;
            }
            else
            {
                customsClearingDocumentations[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearCustomsClearingDocumentations()
        {
            if (customsClearingDocumentations!=null)
            {
                var __itemsToRemove = customsClearingDocumentations.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveCustomsClearingDocumentations(__item);
                }
            }
        }
        [DataMember(Name="BillOfLandings")]
        protected IList<BillOfLanding> billOfLandings = new List<BillOfLanding>();
        public virtual List<BillOfLanding> BillOfLandings
        {
            get
            {
                if (billOfLandings is BillOfLanding[])
                {
                    billOfLandings = billOfLandings.ToList();
                }
                if (billOfLandings == null)
                {
                    billOfLandings = new List<BillOfLanding>();
                }
                return billOfLandings.ToList();
            }
            set
            {
                if (billOfLandings is BillOfLanding[])
                {
                    billOfLandings = billOfLandings.ToList();
                }
                if (billOfLandings != null)
                {
                    var __itemsToDelete = new List<BillOfLanding>(billOfLandings);
                    foreach (var __item in __itemsToDelete)
                    {
                        RemoveBillOfLandings(__item);
                    }
                }
                if(value == null)
                {
                    billOfLandings = new List<BillOfLanding>();
                    return;
                }
                foreach(var __item in value)
                {
                    AddBillOfLandings(__item);
                }
            }
        }
        public virtual void AddBillOfLandings(IList<BillOfLanding> __items)
        {
            foreach (var __item in __items)
            {
                AddBillOfLandings(__item);
            }
        }

        public virtual void InternalAddBillOfLandings(BillOfLanding __item)
        {
            if (__item == null || disableInternalAdditions) return;
            billOfLandings?.Add(__item);
        }

        public virtual void InternalRemoveBillOfLandings(BillOfLanding __item)
        {
            if (__item == null) return;
            billOfLandings?.Remove(__item);
        }

        public virtual void AddBillOfLandings(BillOfLanding __item)
        {
            if (__item == null) return;
            if (__item.Transaction != this)
                __item.Transaction = this;
        }

        public virtual void AddAtIndexBillOfLandings(int index, BillOfLanding __item)
        {
            if (__item == null) return;
            billOfLandings?.Insert(index, __item);
            disableInternalAdditions = true;
            try
            {
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
            finally
            {
                disableInternalAdditions = false;
            }
        }

        public virtual void RemoveBillOfLandings(BillOfLanding __item)
        {
            if (__item != null)
            {
                __item.Transaction = null;
            }
        }
        public virtual void SetBillOfLandingsAt(BillOfLanding __item, int __index)
        {
            if (__item == null)
            {
                billOfLandings[__index].Transaction = null;
            }
            else
            {
                billOfLandings[__index] = __item;
                if (__item.Transaction != this)
                    __item.Transaction = this;
            }
        }

        public virtual void ClearBillOfLandings()
        {
            if (billOfLandings!=null)
            {
                var __itemsToRemove = billOfLandings.ToList();
                foreach(var __item in __itemsToRemove)
                {
                    RemoveBillOfLandings(__item);
                }
            }
        }
        [DataMember(Name="TransactionOverview")]
        protected TransactionOverview transactionOverview;
        public virtual TransactionOverview TransactionOverview
        {
            get
            {
                return transactionOverview;
            }
            set
            {
                if(Equals(transactionOverview, value)) return;
                var __oldValue = transactionOverview;
                if (value != null)
                {
                    transactionOverview = value;
                }
                else
                {
                    if (transactionOverview != null)
                    {
                        transactionOverview = null;
                    }
                }
            }
        }
        #endregion
        #region Constructors
/// <summary>
/// Public constructors of the Transaction class
/// </summary>
/// <returns>New Transaction object</returns>
/// <remarks></remarks>
        public Transaction() {}
        #endregion
        #region Accessors Implementation
        private decimal? Get_TransactionValue()
        {
            return (this?.invoices?.Count() ?? 0) > 0 ? (this?.invoices?.Sum((a) => a.TotalPrice) ?? 0) : 0;
        }

        private decimal? Get_FundedAmount()
        {
            decimal? totalInv = 0;
            decimal? total = 0;
            totalInv = (this?.invoices?.Sum((a) => a.TotalPrice) ?? 0);
            total = (totalInv.GetValueOrDefault(0) * (this?.commercialAgreement?.Agreement?.FundedRate ?? 0)) / 100;
            return (this?.invoices?.Count() ?? 0) > 0 ? total : 0;
        }

        #endregion
        #region Methods

        public virtual List<string> _Validate(bool throwException = true)
        {
            var __errors = new List<string>();
            if (Id == null)
            {
                __errors.Add("Property 'Id' is required.");
            }
            if (PaymentStatus != null && PaymentStatus.Length > 100)
            {
                __errors.Add("Length of property 'PaymentStatus' cannot be greater than 100.");
            }
            if (throwException && __errors.Any())
            {
                throw new zAppDev.DotNet.Framework.Exceptions.BusinessException("An instance of TypeClass 'Transaction' has validation errors:\r\n\r\n" + string.Join("\r\n", __errors));
            }
            return __errors;
        }

        public virtual int _GetUniqueIdentifier()
        {
            var hashCode = 399326290;
            hashCode = hashCode * -1521134295 + (Id?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TransactionDateOccured?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (TransactionValue?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (FundedAmount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (ToBePaidAmount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (InvoicedDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PaymentStatus?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PaymentDate?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (RestPaymentAmount?.GetHashCode() ?? 0);
            hashCode = hashCode * -1521134295 + (PaidByBuyer.GetHashCode() );
            return hashCode;
        }






/// <summary>
/// Copies the current object to a new instance
/// </summary>
/// <param name="deep">Copy members that refer to objects external to this class (not dependent)</param>
/// <param name="copiedObjects">Objects that should be reused</param>
/// <param name="asNew">Copy the current object as a new one, ready to be persisted, along all its members.</param>
/// <param name="reuseNestedObjects">If asNew is true, this flag if set, forces the reuse of all external objects.</param>
/// <param name="copy">Optional - An existing [Transaction] instance to use as the destination.</param>
/// <returns>A copy of the object</returns>
        public virtual Transaction Copy(bool deep=false, Hashtable copiedObjects=null, bool asNew=false, bool reuseNestedObjects = false, Transaction copy = null)
        {
            if(copiedObjects == null)
            {
                copiedObjects = new Hashtable();
            }
            if (copy == null && copiedObjects.Contains(this))
                return (Transaction)copiedObjects[this];
            copy = copy ?? new Transaction();
            if (!asNew)
            {
                copy.TransientId = this.TransientId;
                copy.Id = this.Id;
            }
            copy.TransactionDateOccured = this.TransactionDateOccured;
            copy.TransactionValue = this.TransactionValue;
            copy.FundedAmount = this.FundedAmount;
            copy.ToBePaidAmount = this.ToBePaidAmount;
            copy.InvoicedDate = this.InvoicedDate;
            copy.PaymentStatus = this.PaymentStatus;
            copy.PaymentDate = this.PaymentDate;
            copy.RestPaymentAmount = this.RestPaymentAmount;
            copy.PaidByBuyer = this.PaidByBuyer;
            if (!copiedObjects.Contains(this))
            {
                copiedObjects.Add(this, copy);
            }
            if(deep && this.commercialAgreement != null)
            {
                if (!copiedObjects.Contains(this.commercialAgreement))
                {
                    if (asNew && reuseNestedObjects)
                        copy.CommercialAgreement = this.CommercialAgreement;
                    else if (asNew)
                        copy.CommercialAgreement = this.CommercialAgreement.Copy(deep, copiedObjects, true);
                    else
                        copy.commercialAgreement = this.commercialAgreement.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.CommercialAgreement = (CommercialAgreement)copiedObjects[this.CommercialAgreement];
                    else
                        copy.commercialAgreement = (CommercialAgreement)copiedObjects[this.CommercialAgreement];
                }
            }
            copy.orders = new List<Order>();
            if(deep && this.orders != null)
            {
                foreach (var __item in this.orders)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddOrders(__item);
                        else
                            copy.AddOrders(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddOrders((Order)copiedObjects[__item]);
                    }
                }
            }
            copy.creditNotes = new List<CreditNote>();
            if(deep && this.creditNotes != null)
            {
                foreach (var __item in this.creditNotes)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCreditNotes(__item);
                        else
                            copy.AddCreditNotes(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCreditNotes((CreditNote)copiedObjects[__item]);
                    }
                }
            }
            copy.deliveryNotes = new List<DeliveryNote>();
            if(deep && this.deliveryNotes != null)
            {
                foreach (var __item in this.deliveryNotes)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddDeliveryNotes(__item);
                        else
                            copy.AddDeliveryNotes(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddDeliveryNotes((DeliveryNote)copiedObjects[__item]);
                    }
                }
            }
            copy.invoices = new List<Invoice>();
            if(deep && this.invoices != null)
            {
                foreach (var __item in this.invoices)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddInvoices(__item);
                        else
                            copy.AddInvoices(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddInvoices((Invoice)copiedObjects[__item]);
                    }
                }
            }
            copy.proofOfDeliveries = new List<ProofOfDelivery>();
            if(deep && this.proofOfDeliveries != null)
            {
                foreach (var __item in this.proofOfDeliveries)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddProofOfDeliveries(__item);
                        else
                            copy.AddProofOfDeliveries(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddProofOfDeliveries((ProofOfDelivery)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.transactionStatus != null)
            {
                if (!copiedObjects.Contains(this.transactionStatus))
                {
                    if (asNew && reuseNestedObjects)
                        copy.TransactionStatus = this.TransactionStatus;
                    else if (asNew)
                        copy.TransactionStatus = this.TransactionStatus.Copy(deep, copiedObjects, true);
                    else
                        copy.transactionStatus = this.transactionStatus.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.TransactionStatus = (TransactionStatus)copiedObjects[this.TransactionStatus];
                    else
                        copy.transactionStatus = (TransactionStatus)copiedObjects[this.TransactionStatus];
                }
            }
            if(deep && this.supplier != null)
            {
                if (!copiedObjects.Contains(this.supplier))
                {
                    if (asNew && reuseNestedObjects)
                        copy.Supplier = this.Supplier;
                    else if (asNew)
                        copy.Supplier = this.Supplier.Copy(deep, copiedObjects, true);
                    else
                        copy.supplier = this.supplier.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.Supplier = (Supplier)copiedObjects[this.Supplier];
                    else
                        copy.supplier = (Supplier)copiedObjects[this.Supplier];
                }
            }
            if(deep && this.importedBuyer != null)
            {
                if (!copiedObjects.Contains(this.importedBuyer))
                {
                    if (asNew && reuseNestedObjects)
                        copy.ImportedBuyer = this.ImportedBuyer;
                    else if (asNew)
                        copy.ImportedBuyer = this.ImportedBuyer.Copy(deep, copiedObjects, true);
                    else
                        copy.importedBuyer = this.importedBuyer.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.ImportedBuyer = (ImportedBuyer)copiedObjects[this.ImportedBuyer];
                    else
                        copy.importedBuyer = (ImportedBuyer)copiedObjects[this.ImportedBuyer];
                }
            }
            copy.letterOfCredits = new List<LetterOfCredit>();
            if(deep && this.letterOfCredits != null)
            {
                foreach (var __item in this.letterOfCredits)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddLetterOfCredits(__item);
                        else
                            copy.AddLetterOfCredits(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddLetterOfCredits((LetterOfCredit)copiedObjects[__item]);
                    }
                }
            }
            copy.intermediaries = new List<Intermediary>();
            if(deep && this.intermediaries != null)
            {
                foreach (var __item in this.intermediaries)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddIntermediaries(__item);
                        else
                            copy.AddIntermediaries(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddIntermediaries((Intermediary)copiedObjects[__item]);
                    }
                }
            }
            copy.partialProofOfDeliveries = new List<PartialProofOfDelivery>();
            if(deep && this.partialProofOfDeliveries != null)
            {
                foreach (var __item in this.partialProofOfDeliveries)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddPartialProofOfDeliveries(__item);
                        else
                            copy.AddPartialProofOfDeliveries(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddPartialProofOfDeliveries((PartialProofOfDelivery)copiedObjects[__item]);
                    }
                }
            }
            copy.customsClearingDocumentations = new List<CustomsClearingDocumentation>();
            if(deep && this.customsClearingDocumentations != null)
            {
                foreach (var __item in this.customsClearingDocumentations)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddCustomsClearingDocumentations(__item);
                        else
                            copy.AddCustomsClearingDocumentations(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddCustomsClearingDocumentations((CustomsClearingDocumentation)copiedObjects[__item]);
                    }
                }
            }
            copy.billOfLandings = new List<BillOfLanding>();
            if(deep && this.billOfLandings != null)
            {
                foreach (var __item in this.billOfLandings)
                {
                    if (!copiedObjects.Contains(__item))
                    {
                        if (asNew && reuseNestedObjects)
                            copy.AddBillOfLandings(__item);
                        else
                            copy.AddBillOfLandings(__item.Copy(deep, copiedObjects, asNew));
                    }
                    else
                    {
                        copy.AddBillOfLandings((BillOfLanding)copiedObjects[__item]);
                    }
                }
            }
            if(deep && this.transactionOverview != null)
            {
                if (!copiedObjects.Contains(this.transactionOverview))
                {
                    if (asNew && reuseNestedObjects)
                        copy.TransactionOverview = this.TransactionOverview;
                    else if (asNew)
                        copy.TransactionOverview = this.TransactionOverview.Copy(deep, copiedObjects, true);
                    else
                        copy.transactionOverview = this.transactionOverview.Copy(deep, copiedObjects, false);
                }
                else
                {
                    if (asNew)
                        copy.TransactionOverview = (TransactionOverview)copiedObjects[this.TransactionOverview];
                    else
                        copy.transactionOverview = (TransactionOverview)copiedObjects[this.TransactionOverview];
                }
            }
            return copy;
        }

        public override bool Equals(object obj)
        {
            var compareTo = obj as Transaction;
            if (ReferenceEquals(this, compareTo))
            {
                return true;
            }
            if (compareTo == null || !this.GetType().Equals(compareTo.GetTypeUnproxied()))
            {
                return false;
            }
            if (this.HasSameNonDefaultIdAs(compareTo))
            {
                return true;
            }
            // Since the Ids aren't the same, both of them must be transient to
            // compare domain signatures; because if one is transient and the
            // other is a persisted entity, then they cannot be the same object.
            return this.IsTransient() && compareTo.IsTransient() && (base.Equals(compareTo) || this.TransientId.Equals(compareTo.TransientId));
        }

// Maintain equality operator semantics for entities.
        public static bool operator ==(Transaction x, Transaction y)
        {
            // By default, == and Equals compares references. In order to
            // maintain these semantics with entities, we need to compare by
            // identity value. The Equals(x, y) override is used to guard
            // against null values; it then calls EntityEquals().
            return Equals(x, y);
        }

// Maintain inequality operator semantics for entities.
        public static bool operator !=(Transaction x, Transaction y)
        {
            return !(x == y);
        }

        private PropertyInfo __propertyKeyCache;
        public virtual PropertyInfo GetPrimaryKey()
        {
            if (__propertyKeyCache == null)
            {
                __propertyKeyCache = this.GetType().GetProperty("Id");
            }
            return __propertyKeyCache;
        }


/// <summary>
///     To help ensure hashcode uniqueness, a carefully selected random number multiplier
///     is used within the calculation.  Goodrich and Tamassia's Data Structures and
///     Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
///     of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
///     for more information.
/// </summary>
        private const int HashMultiplier = 31;
        private int? cachedHashcode;

        public override int GetHashCode()
        {
            if (this.cachedHashcode.HasValue)
            {
                return this.cachedHashcode.Value;
            }
            if (this.IsTransient())
            {
                //this.cachedHashcode = base.GetHashCode();
                return this.TransientId.GetHashCode(); //don't cache because this won't stay transient forever
            }
            else
            {
                unchecked
                {
                    // It's possible for two objects to return the same hash code based on
                    // identically valued properties, even if they're of two different types,
                    // so we include the object's type in the hash calculation
                    var hashCode = this.GetType().GetHashCode();
                    this.cachedHashcode = (hashCode * HashMultiplier) ^ this.Id.GetHashCode();
                }
            }
            return this.cachedHashcode.Value;
        }

/// <summary>
///     Transient objects are not associated with an item already in storage.  For instance,
///     a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed
///     objects to be lazily loaded.
/// </summary>
        public virtual bool IsTransient()
        {
            return this.Id == default(int) || this.Id.Equals(default(int));
        }

/// <summary>
///     When NHibernate proxies objects, it masks the type of the actual entity object.
///     This wrapper burrows into the proxied object to get its actual type.
///
///     Although this assumes NHibernate is being used, it doesn't require any NHibernate
///     related dependencies and has no bad side effects if NHibernate isn't being used.
///
///     Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
/// </summary>
        protected virtual System.Type GetTypeUnproxied()
        {
            return this.GetType();
        }

/// <summary>
///     Returns true if self and the provided entity have the same Id values
///     and the Ids are not of the default Id value
/// </summary>
        protected bool HasSameNonDefaultIdAs(Transaction compareTo)
        {
            return !this.IsTransient() && !compareTo.IsTransient() && this.Id.Equals(compareTo.Id);
        }

        #endregion


    }
}
