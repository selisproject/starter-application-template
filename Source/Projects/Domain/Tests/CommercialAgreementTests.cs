// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DemonstratorApp.BO;
using DemonstratorApp.BoTesting.Tests.Common;
using DemonstratorApp.DAL;

namespace DemonstratorApp.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for CommercialAgreementTest and is intended
    ///to contain all CommercialAgreementTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("CommercialAgreement Repository Tests")]
    [Category("CommercialAgreement Repository Tests")]
    internal class CommercialAgreementTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `CommercialAgreement`")]
        [Order(0)]
        public void CommercialAgreement_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _agreement_supplier_commercialagreements = new DemonstratorApp.BO.Supplier
            {
                SupplierId = 6459,
                Company = "Supplier_Company",
                CompanyLogo = "Supplier_CompanyLogo",
                Business = "Supplier_Business",
                CurrentAmount = "Supplier_CurrentAmount",
                AverageAmount = "Supplier_AverageAmount",
                PercentageOfCreditNotes = "Supplier_PercentageOfCreditNotes",
                PrimaryPhone = "Supplier_PrimaryPhone",
                SecondaryPhone = "Supplier_SecondaryPhone",
                Fax = "Supplier_Fax",
                WebSite = "Supplier_WebSite",
                AcceptedPolicyTerms = true,
                SupplierStatus = "Supplier_SupplierStatus",
                DomainFocus = "Supplier_DomainFocus",
                EvaluationResult = "Supplier_EvaluationResult",
                EvaluationCountResult = 722,
                AnnualTurnover = true,
                BEnvironment = true,
                PTerms = true,
                Average = true,
                InvoiceValue = true,
                EqRatio = true,
                Prefix = "Supplier_Prefix",
                VATNumber = "Supplier_VATNumber",
                MarketSegment = "Supplier_MarketSegment",
                AdditionalComments = "Supplier_AdditionalComments",
                AdditionalCommentsStep2 = "Supplier_AdditionalCommentsStep2",
                AdditionalCommentsStep3 = "Supplier_AdditionalCommentsStep3",
                UserName = "74d6b4bc-4b21-407d-a5fd-fb5fe1c95fcbSupplier_UserName",
                PasswordHash = "Supplier_PasswordHash",
                SecurityStamp = "Supplier_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 9167,
                Name = "Supplier_Name",
                Email = "Supplier_Email",
                PhoneNumber = "Supplier_PhoneNumber",
                LockoutEndDate = now,
            };
            var _agreement_buyer_commercialagreements = new DemonstratorApp.BO.Buyer
            {
                BuyerId = 3108,
                PrimaryPhone = "Buyer_PrimaryPhone",
                SecondaryPhone = "Buyer_SecondaryPhone",
                Fax = "Buyer_Fax",
                WebSite = "Buyer_WebSite",
                Company = "Buyer_Company",
                AnnualTurnOver = 2222222222.22222M,
                LegalRepresentative = "Buyer_LegalRepresentative",
                Rating = "Buyer_Rating",
                CreditInsurance = true,
                Logo = "Buyer_Logo",
                AddressOne = "Buyer_AddressOne",
                AddressTwo = "Buyer_AddressTwo",
                VatNumber = "Buyer_VatNumber",
                ContactPerson = "Buyer_ContactPerson",
                Prefix = "Buyer_Prefix",
                Temp = "Buyer_Temp",
                UserName = "a43fc6a3-bb3b-4412-b6d5-4a9d15bad805Buyer_UserName",
                PasswordHash = "Buyer_PasswordHash",
                SecurityStamp = "Buyer_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 3407,
                Name = "Buyer_Name",
                Email = "Buyer_Email",
                PhoneNumber = "Buyer_PhoneNumber",
                LockoutEndDate = now,
            };
            var _agreement_orders_commercialagreement = new DemonstratorApp.BO.Order
            {
                OrderNumber = "Order_OrderNumber",
                EstimatedDateOfDelivery = now,
                PaymentTerms = "Order_PaymentTerms",
                IntermediateParty = true,
                IsCancelled = true,
                DateOfOrder = now,
                OrderAmount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                From = "Order_From",
                DeliveryTo = "Order_DeliveryTo",
                OrderAttachment = "Order_OrderAttachment",
            };
            var _agreement_orders_commercialagreement2 = new DemonstratorApp.BO.Order
            {
                OrderNumber = "Order_OrderNumber",
                EstimatedDateOfDelivery = now,
                PaymentTerms = "Order_PaymentTerms",
                IntermediateParty = true,
                IsCancelled = true,
                DateOfOrder = now,
                OrderAmount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                From = "Order_From",
                DeliveryTo = "Order_DeliveryTo",
                OrderAttachment = "Order_OrderAttachment",
            };
            var _agreement_importedbuyer_commercialagreement = new DemonstratorApp.BO.ImportedBuyer
            {
                Code = "ImportedBuyer_Code",
                VATNumber = "ImportedBuyer_VATNumber",
                Company = "ImportedBuyer_Company",
                AddressOne = "ImportedBuyer_AddressOne",
                AddressTwo = "ImportedBuyer_AddressTwo",
                Phone = "ImportedBuyer_Phone",
            };
            var _agreement_transactions_commercialagreement = new DemonstratorApp.BO.Transaction
            {
                TransactionDateOccured = now,
                TransactionValue = 2222222222.22222M,
                FundedAmount = 2222222222.22222M,
                ToBePaidAmount = 2222222222.22222M,
                InvoicedDate = now,
                PaymentStatus = "Transaction_PaymentStatus",
                PaymentDate = now,
                RestPaymentAmount = 2222222222.22222M,
                PaidByBuyer = true,
            };
            var _agreement_transactions_commercialagreement2 = new DemonstratorApp.BO.Transaction
            {
                TransactionDateOccured = now,
                TransactionValue = 2222222222.22222M,
                FundedAmount = 2222222222.22222M,
                ToBePaidAmount = 2222222222.22222M,
                InvoicedDate = now,
                PaymentStatus = "Transaction_PaymentStatus",
                PaymentDate = now,
                RestPaymentAmount = 2222222222.22222M,
                PaidByBuyer = true,
            };
            var _agreement_agreement_commercialagreements = new DemonstratorApp.BO.Agreement
            {
                StartDate = now,
                EndDate = now,
                FundedRate = 222222.22M,
                FundedAmount = 222222.22M,
                CurrentAgreementStatus = "Agreement_CurrentAgreementStatus",
                InterestRate = 222222.22M,
            };
            new PersistenceSpecification<DemonstratorApp.BO.CommercialAgreement>(Session)
            .CheckProperty(p => p.ProductCategory, "CommercialAgreement_ProductCategory")
            .CheckProperty(p => p.PaymentTerms, "CommercialAgreement_PaymentTerms")
            .CheckReference(p => p.Supplier, _agreement_supplier_commercialagreements)
            .CheckReference(p => p.Buyer, _agreement_buyer_commercialagreements)
            .CheckBag(p => p.Orders, (new List<DemonstratorApp.BO.Order>
            {
                _agreement_orders_commercialagreement,
                _agreement_orders_commercialagreement2
            }))
            .CheckReference(p => p.ImportedBuyer, _agreement_importedbuyer_commercialagreement)
            .CheckBag(p => p.Transactions, (new List<DemonstratorApp.BO.Transaction>
            {
                _agreement_transactions_commercialagreement,
                _agreement_transactions_commercialagreement2
            }))
            .CheckReference(p => p.Agreement, _agreement_agreement_commercialagreements)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `CommercialAgreement`")]
        [Order(1)]
        public void CommercialAgreement_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DemonstratorApp.BO.CommercialAgreement> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DemonstratorApp.BO.CommercialAgreement>(
                              a => true
                              && (a.ProductCategory != string.Empty && a.ProductCategory != null)
                              && (a.PaymentTerms != string.Empty && a.PaymentTerms != null)
                              && a.Supplier != null
                              && a.Buyer != null
                              && a.Orders.Any()
                              && a.ImportedBuyer != null
                              && a.Transactions.Any()
                              && a.Agreement != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}