// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DemonstratorApp.BO;
using DemonstratorApp.BoTesting.Tests.Common;
using DemonstratorApp.DAL;

namespace DemonstratorApp.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for DeliveryNoteTest and is intended
    ///to contain all DeliveryNoteTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("DeliveryNote Repository Tests")]
    [Category("DeliveryNote Repository Tests")]
    internal class DeliveryNoteTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `DeliveryNote`")]
        [Order(0)]
        public void DeliveryNote_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _deliverynote_products_deliverynote = new DemonstratorApp.BO.OrderProduct
            {
                Code = "OrderProduct_Code",
                Quantity = 222222.22M,
                Description = "OrderProduct_Description",
                UnitValue = "OrderProduct_UnitValue",
                MeasurementUnit = "OrderProduct_MeasurementUnit",
                Price = 222222.22M,
                LineTotalPrice = 222222.22M,
            };
            var _deliverynote_products_deliverynote2 = new DemonstratorApp.BO.OrderProduct
            {
                Code = "OrderProduct_Code",
                Quantity = 222222.22M,
                Description = "OrderProduct_Description",
                UnitValue = "OrderProduct_UnitValue",
                MeasurementUnit = "OrderProduct_MeasurementUnit",
                Price = 222222.22M,
                LineTotalPrice = 222222.22M,
            };
            var _deliverynote_deliverynoteproducts_deliverynote = new DemonstratorApp.BO.DeliveryNoteProduct
            {
                Code = "DeliveryNoteProduct_Code",
                Quantity = 222222.22M,
                Description = "DeliveryNoteProduct_Description",
                UnitValue = "DeliveryNoteProduct_UnitValue",
                MeasurementUnit = "DeliveryNoteProduct_MeasurementUnit",
                Price = 222222.22M,
                LineTotalPrice = 222222.22M,
            };
            var _deliverynote_deliverynoteproducts_deliverynote2 = new DemonstratorApp.BO.DeliveryNoteProduct
            {
                Code = "DeliveryNoteProduct_Code",
                Quantity = 222222.22M,
                Description = "DeliveryNoteProduct_Description",
                UnitValue = "DeliveryNoteProduct_UnitValue",
                MeasurementUnit = "DeliveryNoteProduct_MeasurementUnit",
                Price = 222222.22M,
                LineTotalPrice = 222222.22M,
            };
            var _order_orders_deliverynotes = new DemonstratorApp.BO.Order
            {
                OrderNumber = "Order_OrderNumber",
                EstimatedDateOfDelivery = now,
                PaymentTerms = "Order_PaymentTerms",
                IntermediateParty = true,
                IsCancelled = true,
                DateOfOrder = now,
                OrderAmount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                From = "Order_From",
                DeliveryTo = "Order_DeliveryTo",
                OrderAttachment = "Order_OrderAttachment",
            };
            var _order_orders_deliverynotes2 = new DemonstratorApp.BO.Order
            {
                OrderNumber = "Order_OrderNumber",
                EstimatedDateOfDelivery = now,
                PaymentTerms = "Order_PaymentTerms",
                IntermediateParty = true,
                IsCancelled = true,
                DateOfOrder = now,
                OrderAmount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                From = "Order_From",
                DeliveryTo = "Order_DeliveryTo",
                OrderAttachment = "Order_OrderAttachment",
            };
            var _transaction_transaction_deliverynotes = new DemonstratorApp.BO.Transaction
            {
                TransactionDateOccured = now,
                TransactionValue = 2222222222.22222M,
                FundedAmount = 2222222222.22222M,
                ToBePaidAmount = 2222222222.22222M,
                InvoicedDate = now,
                PaymentStatus = "Transaction_PaymentStatus",
                PaymentDate = now,
                RestPaymentAmount = 2222222222.22222M,
                PaidByBuyer = true,
            };
            new PersistenceSpecification<DemonstratorApp.BO.DeliveryNote>(Session)
            .CheckProperty(p => p.DeliveryNoteNumber, "DeliveryNote_DeliveryNoteNumber")
            .CheckProperty(p => p.Description, "DeliveryNote_Description")
            .CheckProperty(p => p.DateIssued, now)
            .CheckProperty(p => p.Amount, 2222222222222.22M)
            .CheckProperty(p => p.TotalPrice, 222222.22M)
            .CheckProperty(p => p.DNoteAttachment, "DeliveryNote_DNoteAttachment")
            .CheckBag(p => p.Products, (new List<DemonstratorApp.BO.OrderProduct>
            {
                _deliverynote_products_deliverynote,
                _deliverynote_products_deliverynote2
            }))
            .CheckBag(p => p.DeliveryNoteProducts, (new List<DemonstratorApp.BO.DeliveryNoteProduct>
            {
                _deliverynote_deliverynoteproducts_deliverynote,
                _deliverynote_deliverynoteproducts_deliverynote2
            }))
            .CheckBag(p => p.Orders, (new List<DemonstratorApp.BO.Order>
            {
                _order_orders_deliverynotes,
                _order_orders_deliverynotes2
            }))
            .CheckReference(p => p.Transaction, _transaction_transaction_deliverynotes)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `DeliveryNote`")]
        [Order(1)]
        public void DeliveryNote_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DemonstratorApp.BO.DeliveryNote> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DemonstratorApp.BO.DeliveryNote>(
                              a => true
                              && (a.DeliveryNoteNumber != string.Empty && a.DeliveryNoteNumber != null)
                              && (a.Description != string.Empty && a.Description != null)
                              && a.DateIssued.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.Amount + 123 > 0)
                              && (a.TotalPrice + 123 > 0)
                              && (a.DNoteAttachment != string.Empty && a.DNoteAttachment != null)
                              && a.Status == DemonstratorApp.BO.Status.Initial
                              && a.Products.Any()
                              && a.DeliveryNoteProducts.Any()
                              && a.Orders.Any()
                              && a.Transaction != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}