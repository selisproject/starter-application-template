// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DemonstratorApp.BO;
using DemonstratorApp.BoTesting.Tests.Common;
using DemonstratorApp.DAL;

namespace DemonstratorApp.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for ImportedBuyerTest and is intended
    ///to contain all ImportedBuyerTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("ImportedBuyer Repository Tests")]
    [Category("ImportedBuyer Repository Tests")]
    internal class ImportedBuyerTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `ImportedBuyer`")]
        [Order(0)]
        public void ImportedBuyer_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _agreement_commercialagreement_importedbuyer = new DemonstratorApp.BO.CommercialAgreement
            {
                ProductCategory = "CommercialAgreement_ProductCategory",
                PaymentTerms = "CommercialAgreement_PaymentTerms",
            };
            var _agreement_commercialagreement_importedbuyer2 = new DemonstratorApp.BO.CommercialAgreement
            {
                ProductCategory = "CommercialAgreement_ProductCategory",
                PaymentTerms = "CommercialAgreement_PaymentTerms",
            };
            var _transaction_transactions_importedbuyer = new DemonstratorApp.BO.Transaction
            {
                TransactionDateOccured = now,
                TransactionValue = 2222222222.22222M,
                FundedAmount = 2222222222.22222M,
                ToBePaidAmount = 2222222222.22222M,
                InvoicedDate = now,
                PaymentStatus = "Transaction_PaymentStatus",
                PaymentDate = now,
                RestPaymentAmount = 2222222222.22222M,
                PaidByBuyer = true,
            };
            var _transaction_transactions_importedbuyer2 = new DemonstratorApp.BO.Transaction
            {
                TransactionDateOccured = now,
                TransactionValue = 2222222222.22222M,
                FundedAmount = 2222222222.22222M,
                ToBePaidAmount = 2222222222.22222M,
                InvoicedDate = now,
                PaymentStatus = "Transaction_PaymentStatus",
                PaymentDate = now,
                RestPaymentAmount = 2222222222.22222M,
                PaidByBuyer = true,
            };
            new PersistenceSpecification<DemonstratorApp.BO.ImportedBuyer>(Session)
            .CheckProperty(p => p.Code, "ImportedBuyer_Code")
            .CheckProperty(p => p.VATNumber, "ImportedBuyer_VATNumber")
            .CheckProperty(p => p.Company, "ImportedBuyer_Company")
            .CheckProperty(p => p.AddressOne, "ImportedBuyer_AddressOne")
            .CheckProperty(p => p.AddressTwo, "ImportedBuyer_AddressTwo")
            .CheckProperty(p => p.Phone, "ImportedBuyer_Phone")
            .CheckBag(p => p.CommercialAgreement, (new List<DemonstratorApp.BO.CommercialAgreement>
            {
                _agreement_commercialagreement_importedbuyer,
                _agreement_commercialagreement_importedbuyer2
            }))
            .CheckBag(p => p.Transactions, (new List<DemonstratorApp.BO.Transaction>
            {
                _transaction_transactions_importedbuyer,
                _transaction_transactions_importedbuyer2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `ImportedBuyer`")]
        [Order(1)]
        public void ImportedBuyer_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DemonstratorApp.BO.ImportedBuyer> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DemonstratorApp.BO.ImportedBuyer>(
                              a => true
                              && (a.Code != string.Empty && a.Code != null)
                              && (a.VATNumber != string.Empty && a.VATNumber != null)
                              && (a.Company != string.Empty && a.Company != null)
                              && (a.AddressOne != string.Empty && a.AddressOne != null)
                              && (a.AddressTwo != string.Empty && a.AddressTwo != null)
                              && (a.Phone != string.Empty && a.Phone != null)
                              && a.CommercialAgreement.Any()
                              && a.Transactions.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}