// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DemonstratorApp.BO;
using DemonstratorApp.BoTesting.Tests.Common;
using DemonstratorApp.DAL;

namespace DemonstratorApp.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for IntermediaryTest and is intended
    ///to contain all IntermediaryTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Intermediary Repository Tests")]
    [Category("Intermediary Repository Tests")]
    internal class IntermediaryTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Intermediary`")]
        [Order(0)]
        public void Intermediary_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _order_orders_intermediaries = new DemonstratorApp.BO.Order
            {
                OrderNumber = "Order_OrderNumber",
                EstimatedDateOfDelivery = now,
                PaymentTerms = "Order_PaymentTerms",
                IntermediateParty = true,
                IsCancelled = true,
                DateOfOrder = now,
                OrderAmount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                From = "Order_From",
                DeliveryTo = "Order_DeliveryTo",
                OrderAttachment = "Order_OrderAttachment",
            };
            var _order_orders_intermediaries2 = new DemonstratorApp.BO.Order
            {
                OrderNumber = "Order_OrderNumber",
                EstimatedDateOfDelivery = now,
                PaymentTerms = "Order_PaymentTerms",
                IntermediateParty = true,
                IsCancelled = true,
                DateOfOrder = now,
                OrderAmount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                From = "Order_From",
                DeliveryTo = "Order_DeliveryTo",
                OrderAttachment = "Order_OrderAttachment",
            };
            var _transaction_transactions_intermediaries = new DemonstratorApp.BO.Transaction
            {
                TransactionDateOccured = now,
                TransactionValue = 2222222222.22222M,
                FundedAmount = 2222222222.22222M,
                ToBePaidAmount = 2222222222.22222M,
                InvoicedDate = now,
                PaymentStatus = "Transaction_PaymentStatus",
                PaymentDate = now,
                RestPaymentAmount = 2222222222.22222M,
                PaidByBuyer = true,
            };
            var _transaction_transactions_intermediaries2 = new DemonstratorApp.BO.Transaction
            {
                TransactionDateOccured = now,
                TransactionValue = 2222222222.22222M,
                FundedAmount = 2222222222.22222M,
                ToBePaidAmount = 2222222222.22222M,
                InvoicedDate = now,
                PaymentStatus = "Transaction_PaymentStatus",
                PaymentDate = now,
                RestPaymentAmount = 2222222222.22222M,
                PaidByBuyer = true,
            };
            new PersistenceSpecification<DemonstratorApp.BO.Intermediary>(Session)
            .CheckProperty(p => p.OtherDescription, "Intermediary_OtherDescription")
            .CheckProperty(p => p.Company, "Intermediary_Company")
            .CheckProperty(p => p.EMail, "Intermediary_EMail")
            .CheckProperty(p => p.GUID, "Intermediary_GUID")
            .CheckBag(p => p.Orders, (new List<DemonstratorApp.BO.Order>
            {
                _order_orders_intermediaries,
                _order_orders_intermediaries2
            }))
            .CheckBag(p => p.Transactions, (new List<DemonstratorApp.BO.Transaction>
            {
                _transaction_transactions_intermediaries,
                _transaction_transactions_intermediaries2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Intermediary`")]
        [Order(1)]
        public void Intermediary_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DemonstratorApp.BO.Intermediary> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DemonstratorApp.BO.Intermediary>(
                              a => true
                              && (a.OtherDescription != string.Empty && a.OtherDescription != null)
                              && a.IntermediaryType == DemonstratorApp.BO.IntermediaryType.ThirdPartyLogisticsProviders
                              && (a.Company != string.Empty && a.Company != null)
                              && (a.EMail != string.Empty && a.EMail != null)
                              && (a.GUID != string.Empty && a.GUID != null)
                              && a.Orders.Any()
                              && a.Transactions.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}