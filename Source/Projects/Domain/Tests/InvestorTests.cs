// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DemonstratorApp.BO;
using DemonstratorApp.BoTesting.Tests.Common;
using DemonstratorApp.DAL;

namespace DemonstratorApp.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for InvestorTest and is intended
    ///to contain all InvestorTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Investor Repository Tests")]
    [Category("Investor Repository Tests")]
    internal class InvestorTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Investor`")]
        [Order(0)]
        public void Investor_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _agreement_agreements_investor = new DemonstratorApp.BO.Agreement
            {
                StartDate = now,
                EndDate = now,
                FundedRate = 222222.22M,
                FundedAmount = 222222.22M,
                CurrentAgreementStatus = "Agreement_CurrentAgreementStatus",
                InterestRate = 222222.22M,
            };
            var _agreement_agreements_investor2 = new DemonstratorApp.BO.Agreement
            {
                StartDate = now,
                EndDate = now,
                FundedRate = 222222.22M,
                FundedAmount = 222222.22M,
                CurrentAgreementStatus = "Agreement_CurrentAgreementStatus",
                InterestRate = 222222.22M,
            };
            var _investor_annualtransactionvolumes_investor = new DemonstratorApp.BO.AnnualTransactionVolume
            {
                Volume = 222222.22M,
                Year = 6299,
            };
            var _investor_annualtransactionvolumes_investor2 = new DemonstratorApp.BO.AnnualTransactionVolume
            {
                Volume = 222222.22M,
                Year = 3301,
            };
            new PersistenceSpecification<DemonstratorApp.BO.Investor>(Session)
            .CheckProperty(p => p.InvestorId, 184)
            .CheckProperty(p => p.PrimaryPhone, "Investor_PrimaryPhone")
            .CheckProperty(p => p.SecondaryPhone, "Investor_SecondaryPhone")
            .CheckProperty(p => p.Fax, "Investor_Fax")
            .CheckProperty(p => p.WebSite, "Investor_WebSite")
            .CheckProperty(p => p.Company, "Investor_Company")
            .CheckProperty(p => p.ContactPerson, "Investor_ContactPerson")
            .CheckProperty(p => p.Logo, "Investor_Logo")
            .CheckProperty(p => p.SupervisingAuthority, "Investor_SupervisingAuthority")
            .CheckProperty(p => p.RegistrationNo, "Investor_RegistrationNo")
            .CheckProperty(p => p.DomainFocus, "Investor_DomainFocus")
            .CheckProperty(p => p.TurnOver, 2222222222.22222M)
            .CheckProperty(p => p.VatNumber, "Investor_VatNumber")
            .CheckProperty(p => p.AddressTwo, "Investor_AddressTwo")
            .CheckProperty(p => p.AddressOne, "Investor_AddressOne")
            .CheckProperty(p => p.ManagingDirector, "Investor_ManagingDirector")
            .CheckProperty(p => p.TargetMarket, "Investor_TargetMarket")
            .CheckProperty(p => p.CustomerSizeFrom, "Investor_CustomerSizeFrom")
            .CheckProperty(p => p.CustomerSizeTo, "Investor_CustomerSizeTo")
            .CheckProperty(p => p.LocalJurisdiction, "Investor_LocalJurisdiction")
            .CheckProperty(p => p.CommercialRegNo, "Investor_CommercialRegNo")
            .CheckProperty(p => p.OtherMinRequirements, "Investor_OtherMinRequirements")
            .CheckProperty(p => p.CRR, true)
            .CheckProperty(p => p.UploadCompliance, "Investor_UploadCompliance")
            .CheckProperty(p => p.OtherMemberships, "Investor_OtherMemberships")
            .CheckProperty(p => p.OtherDomainFocus, "Investor_OtherDomainFocus")
            .CheckProperty(p => p.InvestorStatus, "Investor_InvestorStatus")
            .CheckProperty(p => p.IAFC, true)
            .CheckProperty(p => p.Prefix, "Investor_Prefix")
            .CheckProperty(p => p.UserName, "4b35910b-0897-453a-9dc2-3da23bebfa86Investor_UserName")
            .CheckProperty(p => p.PasswordHash, "Investor_PasswordHash")
            .CheckProperty(p => p.SecurityStamp, "Investor_SecurityStamp")
            .CheckProperty(p => p.EmailConfirmed, true)
            .CheckProperty(p => p.LockoutEnabled, true)
            .CheckProperty(p => p.PhoneNumberConfirmed, true)
            .CheckProperty(p => p.TwoFactorEnabled, true)
            .CheckProperty(p => p.AccessFailedCount, 5784)
            .CheckProperty(p => p.Name, "Investor_Name")
            .CheckProperty(p => p.Email, "Investor_Email")
            .CheckProperty(p => p.PhoneNumber, "Investor_PhoneNumber")
            .CheckProperty(p => p.LockoutEndDate, now)
            .CheckBag(p => p.Agreements, (new List<DemonstratorApp.BO.Agreement>
            {
                _agreement_agreements_investor,
                _agreement_agreements_investor2
            }))
            .CheckBag(p => p.AnnualTransactionVolumes, (new List<DemonstratorApp.BO.AnnualTransactionVolume>
            {
                _investor_annualtransactionvolumes_investor,
                _investor_annualtransactionvolumes_investor2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Investor`")]
        [Order(1)]
        public void Investor_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DemonstratorApp.BO.Investor> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DemonstratorApp.BO.Investor>(
                              a => true
                              && (a.InvestorId + 123 > 0)
                              && (a.PrimaryPhone != string.Empty && a.PrimaryPhone != null)
                              && (a.SecondaryPhone != string.Empty && a.SecondaryPhone != null)
                              && (a.Fax != string.Empty && a.Fax != null)
                              && (a.WebSite != string.Empty && a.WebSite != null)
                              && (a.Company != string.Empty && a.Company != null)
                              && (a.ContactPerson != string.Empty && a.ContactPerson != null)
                              && (a.Logo != string.Empty && a.Logo != null)
                              && (a.SupervisingAuthority != string.Empty && a.SupervisingAuthority != null)
                              && (a.RegistrationNo != string.Empty && a.RegistrationNo != null)
                              && (a.DomainFocus != string.Empty && a.DomainFocus != null)
                              && (a.TurnOver + 123 > 0)
                              && (a.VatNumber != string.Empty && a.VatNumber != null)
                              && (a.AddressTwo != string.Empty && a.AddressTwo != null)
                              && (a.AddressOne != string.Empty && a.AddressOne != null)
                              && (a.ManagingDirector != string.Empty && a.ManagingDirector != null)
                              && (a.TargetMarket != string.Empty && a.TargetMarket != null)
                              && (a.CustomerSizeFrom != string.Empty && a.CustomerSizeFrom != null)
                              && (a.CustomerSizeTo != string.Empty && a.CustomerSizeTo != null)
                              && (a.LocalJurisdiction != string.Empty && a.LocalJurisdiction != null)
                              && (a.CommercialRegNo != string.Empty && a.CommercialRegNo != null)
                              && (a.OtherMinRequirements != string.Empty && a.OtherMinRequirements != null)
                              && !a.CRR
                              && (a.UploadCompliance != string.Empty && a.UploadCompliance != null)
                              && (a.OtherMemberships != string.Empty && a.OtherMemberships != null)
                              && (a.OtherDomainFocus != string.Empty && a.OtherDomainFocus != null)
                              && (a.InvestorStatus != string.Empty && a.InvestorStatus != null)
                              && !a.IAFC
                              && (a.Prefix != string.Empty && a.Prefix != null)
                              && (a.UserName != string.Empty && a.UserName != null)
                              && (a.PasswordHash != string.Empty && a.PasswordHash != null)
                              && (a.SecurityStamp != string.Empty && a.SecurityStamp != null)
                              && !a.EmailConfirmed
                              && !a.LockoutEnabled
                              && !a.PhoneNumberConfirmed
                              && !a.TwoFactorEnabled
                              && (a.AccessFailedCount + 123 > 0)
                              && (a.Name != string.Empty && a.Name != null)
                              && (a.Email != string.Empty && a.Email != null)
                              && (a.PhoneNumber != string.Empty && a.PhoneNumber != null)
                              && a.LockoutEndDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.Agreements.Any()
                              && a.AnnualTransactionVolumes.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}