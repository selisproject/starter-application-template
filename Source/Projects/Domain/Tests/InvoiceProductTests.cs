// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DemonstratorApp.BO;
using DemonstratorApp.BoTesting.Tests.Common;
using DemonstratorApp.DAL;

namespace DemonstratorApp.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for InvoiceProductTest and is intended
    ///to contain all InvoiceProductTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("InvoiceProduct Repository Tests")]
    [Category("InvoiceProduct Repository Tests")]
    internal class InvoiceProductTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `InvoiceProduct`")]
        [Order(0)]
        public void InvoiceProduct_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _invoice_invoice_invoiceproducts = new DemonstratorApp.BO.Invoice
            {
                InvoiceNumber = "Invoice_InvoiceNumber",
                Description = "Invoice_Description",
                DateIssued = now,
                Amount = 2222222222222.22M,
                CustomerType = "Invoice_CustomerType",
                CumulativeBalance = 222222.22M,
                TotalPrice = 222222.22M,
                DescriptionTwo = "Invoice_DescriptionTwo",
                Attribute = "Invoice_Attribute",
                InvoiceAttachment = "Invoice_InvoiceAttachment",
            };
            var _invoiceproduct_supplierproduct_invoiceproduct = new DemonstratorApp.BO.SupplierProduct
            {
                Code = "SupplierProduct_Code",
                Description = "SupplierProduct_Description",
                UnitValue = "SupplierProduct_UnitValue",
                MeasurementUnit = "SupplierProduct_MeasurementUnit",
                Price = 222222.22M,
            };
            new PersistenceSpecification<DemonstratorApp.BO.InvoiceProduct>(Session)
            .CheckProperty(p => p.Code, "InvoiceProduct_Code")
            .CheckProperty(p => p.Quantity, 222222.22M)
            .CheckProperty(p => p.Description, "InvoiceProduct_Description")
            .CheckProperty(p => p.UnitValue, "InvoiceProduct_UnitValue")
            .CheckProperty(p => p.MeasurementUnit, "InvoiceProduct_MeasurementUnit")
            .CheckProperty(p => p.Price, 222222.22M)
            .CheckProperty(p => p.LineTotalPrice, 222222.22M)
            .CheckReference(p => p.Invoice, _invoice_invoice_invoiceproducts)
            .CheckReference(p => p.SupplierProduct, _invoiceproduct_supplierproduct_invoiceproduct)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `InvoiceProduct`")]
        [Order(1)]
        public void InvoiceProduct_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DemonstratorApp.BO.InvoiceProduct> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DemonstratorApp.BO.InvoiceProduct>(
                              a => true
                              && (a.Code != string.Empty && a.Code != null)
                              && (a.Quantity + 123 > 0)
                              && (a.Description != string.Empty && a.Description != null)
                              && (a.UnitValue != string.Empty && a.UnitValue != null)
                              && (a.MeasurementUnit != string.Empty && a.MeasurementUnit != null)
                              && (a.Price + 123 > 0)
                              && (a.LineTotalPrice + 123 > 0)
                              && a.Invoice != null
                              && a.SupplierProduct != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}