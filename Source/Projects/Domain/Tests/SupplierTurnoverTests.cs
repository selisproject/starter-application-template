// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DemonstratorApp.BO;
using DemonstratorApp.BoTesting.Tests.Common;
using DemonstratorApp.DAL;

namespace DemonstratorApp.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for SupplierTurnoverTest and is intended
    ///to contain all SupplierTurnoverTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("SupplierTurnover Repository Tests")]
    [Category("SupplierTurnover Repository Tests")]
    internal class SupplierTurnoverTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `SupplierTurnover`")]
        [Order(0)]
        public void SupplierTurnover_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            new PersistenceSpecification<DemonstratorApp.BO.SupplierTurnover>(Session)
            .CheckProperty(p => p.PlannedCurrentYear, 2222222222.22222M)
            .CheckProperty(p => p.PlannedCurrentYearD, 2222222222.22222M)
            .CheckProperty(p => p.PlannedCurrentYearEU, 2222222222.22222M)
            .CheckProperty(p => p.PlannedCurrentYearAbroad, 2222222222.22222M)
            .CheckProperty(p => p.PlannedNextYear, 2222222222.22222M)
            .CheckProperty(p => p.PlannedNextYearD, 2222222222.22222M)
            .CheckProperty(p => p.PlannedNextYearEU, 2222222222.22222M)
            .CheckProperty(p => p.PlannedNextYearAbroad, 2222222222.22222M)
            .CheckProperty(p => p.ActualPreviousYear, 2222222222.22222M)
            .CheckProperty(p => p.ActualPreviousYearAbroad, 2222222222.22222M)
            .CheckProperty(p => p.ActualPreviousYearD, 2222222222.22222M)
            .CheckProperty(p => p.ActualPreviousYearEU, 2222222222.22222M)
            .CheckProperty(p => p.PercentageD, 2222222222.22222M)
            .CheckProperty(p => p.PercentageEU, 2222222222.22222M)
            .CheckProperty(p => p.PercentageAbroad, 2222222222.22222M)
            .CheckProperty(p => p.PercentageCND, 2222222222.22222M)
            .CheckProperty(p => p.PercentageCNEU, 2222222222.22222M)
            .CheckProperty(p => p.PercentageCNAbroad, 2222222222.22222M)
            .CheckProperty(p => p.PercentageSales, 2222222222.22222M)
            .CheckProperty(p => p.PercentageCN, 2222222222.22222M)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `SupplierTurnover`")]
        [Order(1)]
        public void SupplierTurnover_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DemonstratorApp.BO.SupplierTurnover> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DemonstratorApp.BO.SupplierTurnover>(
                              a => true
                              && (a.PlannedCurrentYear + 123 > 0)
                              && (a.PlannedCurrentYearD + 123 > 0)
                              && (a.PlannedCurrentYearEU + 123 > 0)
                              && (a.PlannedCurrentYearAbroad + 123 > 0)
                              && (a.PlannedNextYear + 123 > 0)
                              && (a.PlannedNextYearD + 123 > 0)
                              && (a.PlannedNextYearEU + 123 > 0)
                              && (a.PlannedNextYearAbroad + 123 > 0)
                              && (a.ActualPreviousYear + 123 > 0)
                              && (a.ActualPreviousYearAbroad + 123 > 0)
                              && (a.ActualPreviousYearD + 123 > 0)
                              && (a.ActualPreviousYearEU + 123 > 0)
                              && (a.PercentageD + 123 > 0)
                              && (a.PercentageEU + 123 > 0)
                              && (a.PercentageAbroad + 123 > 0)
                              && (a.PercentageCND + 123 > 0)
                              && (a.PercentageCNEU + 123 > 0)
                              && (a.PercentageCNAbroad + 123 > 0)
                              && (a.PercentageSales + 123 > 0)
                              && (a.PercentageCN + 123 > 0)
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}