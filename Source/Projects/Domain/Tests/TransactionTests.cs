// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DemonstratorApp.BO;
using DemonstratorApp.BoTesting.Tests.Common;
using DemonstratorApp.DAL;

namespace DemonstratorApp.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for TransactionTest and is intended
    ///to contain all TransactionTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("Transaction Repository Tests")]
    [Category("Transaction Repository Tests")]
    internal class TransactionTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `Transaction`")]
        [Order(0)]
        public void Transaction_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _agreement_commercialagreement_transactions = new DemonstratorApp.BO.CommercialAgreement
            {
                ProductCategory = "CommercialAgreement_ProductCategory",
                PaymentTerms = "CommercialAgreement_PaymentTerms",
            };
            var _transaction_orders_transaction = new DemonstratorApp.BO.Order
            {
                OrderNumber = "Order_OrderNumber",
                EstimatedDateOfDelivery = now,
                PaymentTerms = "Order_PaymentTerms",
                IntermediateParty = true,
                IsCancelled = true,
                DateOfOrder = now,
                OrderAmount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                From = "Order_From",
                DeliveryTo = "Order_DeliveryTo",
                OrderAttachment = "Order_OrderAttachment",
            };
            var _transaction_orders_transaction2 = new DemonstratorApp.BO.Order
            {
                OrderNumber = "Order_OrderNumber",
                EstimatedDateOfDelivery = now,
                PaymentTerms = "Order_PaymentTerms",
                IntermediateParty = true,
                IsCancelled = true,
                DateOfOrder = now,
                OrderAmount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                From = "Order_From",
                DeliveryTo = "Order_DeliveryTo",
                OrderAttachment = "Order_OrderAttachment",
            };
            var _transaction_creditnotes_transaction = new DemonstratorApp.BO.CreditNote
            {
                CreditNoteNumber = "CreditNote_CreditNoteNumber",
                Description = "CreditNote_Description",
                DateIssued = now,
                Amount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                CreditNoteDocument = "CreditNote_CreditNoteDocument",
                CNoteAttachment = "CreditNote_CNoteAttachment",
            };
            var _transaction_creditnotes_transaction2 = new DemonstratorApp.BO.CreditNote
            {
                CreditNoteNumber = "CreditNote_CreditNoteNumber",
                Description = "CreditNote_Description",
                DateIssued = now,
                Amount = 2222222222.22222M,
                TotalPrice = 2222222222.22222M,
                CreditNoteDocument = "CreditNote_CreditNoteDocument",
                CNoteAttachment = "CreditNote_CNoteAttachment",
            };
            var _transaction_deliverynotes_transaction = new DemonstratorApp.BO.DeliveryNote
            {
                DeliveryNoteNumber = "DeliveryNote_DeliveryNoteNumber",
                Description = "DeliveryNote_Description",
                DateIssued = now,
                Amount = 2222222222222.22M,
                TotalPrice = 222222.22M,
                DNoteAttachment = "DeliveryNote_DNoteAttachment",
            };
            var _transaction_deliverynotes_transaction2 = new DemonstratorApp.BO.DeliveryNote
            {
                DeliveryNoteNumber = "DeliveryNote_DeliveryNoteNumber",
                Description = "DeliveryNote_Description",
                DateIssued = now,
                Amount = 2222222222222.22M,
                TotalPrice = 222222.22M,
                DNoteAttachment = "DeliveryNote_DNoteAttachment",
            };
            var _transaction_invoices_transaction = new DemonstratorApp.BO.Invoice
            {
                InvoiceNumber = "Invoice_InvoiceNumber",
                Description = "Invoice_Description",
                DateIssued = now,
                Amount = 2222222222222.22M,
                CustomerType = "Invoice_CustomerType",
                CumulativeBalance = 222222.22M,
                TotalPrice = 222222.22M,
                DescriptionTwo = "Invoice_DescriptionTwo",
                Attribute = "Invoice_Attribute",
                InvoiceAttachment = "Invoice_InvoiceAttachment",
            };
            var _transaction_invoices_transaction2 = new DemonstratorApp.BO.Invoice
            {
                InvoiceNumber = "Invoice_InvoiceNumber",
                Description = "Invoice_Description",
                DateIssued = now,
                Amount = 2222222222222.22M,
                CustomerType = "Invoice_CustomerType",
                CumulativeBalance = 222222.22M,
                TotalPrice = 222222.22M,
                DescriptionTwo = "Invoice_DescriptionTwo",
                Attribute = "Invoice_Attribute",
                InvoiceAttachment = "Invoice_InvoiceAttachment",
            };
            var _transaction_proofofdeliveries_transaction = new DemonstratorApp.BO.ProofOfDelivery
            {
                PODNumber = "ProofOfDelivery_PODNumber",
                DateIssued = now,
                QualityStatus = "ProofOfDelivery_QualityStatus",
                QuantityStatus = "ProofOfDelivery_QuantityStatus",
                DeliveryStatus = "ProofOfDelivery_DeliveryStatus",
                PODAttachment = "ProofOfDelivery_PODAttachment",
                Comments = "ProofOfDelivery_Comments",
            };
            var _transaction_proofofdeliveries_transaction2 = new DemonstratorApp.BO.ProofOfDelivery
            {
                PODNumber = "ProofOfDelivery_PODNumber",
                DateIssued = now,
                QualityStatus = "ProofOfDelivery_QualityStatus",
                QuantityStatus = "ProofOfDelivery_QuantityStatus",
                DeliveryStatus = "ProofOfDelivery_DeliveryStatus",
                PODAttachment = "ProofOfDelivery_PODAttachment",
                Comments = "ProofOfDelivery_Comments",
            };
            var _transaction_transactionstatus_transaction = new DemonstratorApp.BO.TransactionStatus
            {
                TransactionDateOccured = now,
                Status = "TransactionStatus_Status",
                Shipped = true,
                Invoiced = true,
                ShippedDateOccured = now,
                InvoicedDateOccured = now,
                Cancelled = true,
                InTransit = true,
                Picked = true,
                PaymentStatus = true,
                InitialOrderDate = now,
                FinalOrderDate = now,
                Delivered = true,
                Ordered = true,
            };
            var _transaction_supplier_transactions = new DemonstratorApp.BO.Supplier
            {
                SupplierId = 1315,
                Company = "Supplier_Company",
                CompanyLogo = "Supplier_CompanyLogo",
                Business = "Supplier_Business",
                CurrentAmount = "Supplier_CurrentAmount",
                AverageAmount = "Supplier_AverageAmount",
                PercentageOfCreditNotes = "Supplier_PercentageOfCreditNotes",
                PrimaryPhone = "Supplier_PrimaryPhone",
                SecondaryPhone = "Supplier_SecondaryPhone",
                Fax = "Supplier_Fax",
                WebSite = "Supplier_WebSite",
                AcceptedPolicyTerms = true,
                SupplierStatus = "Supplier_SupplierStatus",
                DomainFocus = "Supplier_DomainFocus",
                EvaluationResult = "Supplier_EvaluationResult",
                EvaluationCountResult = 4522,
                AnnualTurnover = true,
                BEnvironment = true,
                PTerms = true,
                Average = true,
                InvoiceValue = true,
                EqRatio = true,
                Prefix = "Supplier_Prefix",
                VATNumber = "Supplier_VATNumber",
                MarketSegment = "Supplier_MarketSegment",
                AdditionalComments = "Supplier_AdditionalComments",
                AdditionalCommentsStep2 = "Supplier_AdditionalCommentsStep2",
                AdditionalCommentsStep3 = "Supplier_AdditionalCommentsStep3",
                UserName = "ab47f353-93a5-4c7f-b8dc-2f3f2e2dbe1aSupplier_UserName",
                PasswordHash = "Supplier_PasswordHash",
                SecurityStamp = "Supplier_SecurityStamp",
                EmailConfirmed = true,
                LockoutEnabled = true,
                PhoneNumberConfirmed = true,
                TwoFactorEnabled = true,
                AccessFailedCount = 1010,
                Name = "Supplier_Name",
                Email = "Supplier_Email",
                PhoneNumber = "Supplier_PhoneNumber",
                LockoutEndDate = now,
            };
            var _transaction_importedbuyer_transactions = new DemonstratorApp.BO.ImportedBuyer
            {
                Code = "ImportedBuyer_Code",
                VATNumber = "ImportedBuyer_VATNumber",
                Company = "ImportedBuyer_Company",
                AddressOne = "ImportedBuyer_AddressOne",
                AddressTwo = "ImportedBuyer_AddressTwo",
                Phone = "ImportedBuyer_Phone",
            };
            var _transaction_letterofcredits_transaction = new DemonstratorApp.BO.LetterOfCredit
            {
                ValueOfLoC = 222222.22M,
                IssuingBank = "LetterOfCredit_IssuingBank",
                Detail = "LetterOfCredit_Detail",
                UploadOfScan = "LetterOfCredit_UploadOfScan",
                Calculated = 222222.22M,
                DateOfValidity = now,
                DateOfExpiry = now,
            };
            var _transaction_letterofcredits_transaction2 = new DemonstratorApp.BO.LetterOfCredit
            {
                ValueOfLoC = 222222.22M,
                IssuingBank = "LetterOfCredit_IssuingBank",
                Detail = "LetterOfCredit_Detail",
                UploadOfScan = "LetterOfCredit_UploadOfScan",
                Calculated = 222222.22M,
                DateOfValidity = now,
                DateOfExpiry = now,
            };
            var _transaction_intermediaries_transactions = new DemonstratorApp.BO.Intermediary
            {
                OtherDescription = "Intermediary_OtherDescription",
                Company = "Intermediary_Company",
                EMail = "Intermediary_EMail",
                GUID = "Intermediary_GUID",
            };
            var _transaction_intermediaries_transactions2 = new DemonstratorApp.BO.Intermediary
            {
                OtherDescription = "Intermediary_OtherDescription",
                Company = "Intermediary_Company",
                EMail = "Intermediary_EMail",
                GUID = "Intermediary_GUID",
            };
            var _transaction_partialproofofdeliveries_transaction = new DemonstratorApp.BO.PartialProofOfDelivery
            {
                PODNumber = "PartialProofOfDelivery_PODNumber",
                DateIssued = now,
                QualityStatus = "PartialProofOfDelivery_QualityStatus",
                QuantityStatus = "PartialProofOfDelivery_QuantityStatus",
                DeliveryStatus = "PartialProofOfDelivery_DeliveryStatus",
                PODAttachment = "PartialProofOfDelivery_PODAttachment",
                Comments = "PartialProofOfDelivery_Comments",
            };
            var _transaction_partialproofofdeliveries_transaction2 = new DemonstratorApp.BO.PartialProofOfDelivery
            {
                PODNumber = "PartialProofOfDelivery_PODNumber",
                DateIssued = now,
                QualityStatus = "PartialProofOfDelivery_QualityStatus",
                QuantityStatus = "PartialProofOfDelivery_QuantityStatus",
                DeliveryStatus = "PartialProofOfDelivery_DeliveryStatus",
                PODAttachment = "PartialProofOfDelivery_PODAttachment",
                Comments = "PartialProofOfDelivery_Comments",
            };
            var _transaction_customsclearingdocumentations_transaction = new DemonstratorApp.BO.CustomsClearingDocumentation
            {
                CustomsClearingDate = now,
                ExportingCountry = "CustomsClearingDocumentation_ExportingCountry",
                ImportingCountry = "CustomsClearingDocumentation_ImportingCountry",
                BuyerName = "CustomsClearingDocumentation_BuyerName",
            };
            var _transaction_customsclearingdocumentations_transaction2 = new DemonstratorApp.BO.CustomsClearingDocumentation
            {
                CustomsClearingDate = now,
                ExportingCountry = "CustomsClearingDocumentation_ExportingCountry",
                ImportingCountry = "CustomsClearingDocumentation_ImportingCountry",
                BuyerName = "CustomsClearingDocumentation_BuyerName",
            };
            var _transaction_billoflandings_transaction = new DemonstratorApp.BO.BillOfLanding
            {
                LandingPlace = "BillOfLanding_LandingPlace",
                LandingDate = now,
                DeliveryPlace = "BillOfLanding_DeliveryPlace",
                DeliveryDate = now,
                DOCNumber = 2748,
                ReceivingPartyId = 7628,
                IsBuyerReceiving = true,
            };
            var _transaction_billoflandings_transaction2 = new DemonstratorApp.BO.BillOfLanding
            {
                LandingPlace = "BillOfLanding_LandingPlace",
                LandingDate = now,
                DeliveryPlace = "BillOfLanding_DeliveryPlace",
                DeliveryDate = now,
                DOCNumber = 4481,
                ReceivingPartyId = 684,
                IsBuyerReceiving = true,
            };
            var _transaction_transactionoverview_transaction = new DemonstratorApp.BO.TransactionOverview
            {
                DeliveryDate = now,
                OrderQuantity = 2222222222.22222M,
                OrderDate = now,
                InvoiceId = 4265,
                InvoiceDate = now,
                FundedRate = 2222222222.22222M,
                InterestRate = 2222222222.22222M,
                TotalValue = 2222222222.22222M,
                FundingValue = 2222222222.22222M,
                PaymentId = 4827,
                PayementDate = now,
                CreditNoteNumber = "TransactionOverview_CreditNoteNumber",
            };
            new PersistenceSpecification<DemonstratorApp.BO.Transaction>(Session)
            .CheckProperty(p => p.TransactionDateOccured, now)
            .CheckProperty(p => p.ToBePaidAmount, 2222222222.22222M)
            .CheckProperty(p => p.InvoicedDate, now)
            .CheckProperty(p => p.PaymentStatus, "Transaction_PaymentStatus")
            .CheckProperty(p => p.PaymentDate, now)
            .CheckProperty(p => p.RestPaymentAmount, 2222222222.22222M)
            .CheckProperty(p => p.PaidByBuyer, true)
            .CheckReference(p => p.CommercialAgreement, _agreement_commercialagreement_transactions)
            .CheckBag(p => p.Orders, (new List<DemonstratorApp.BO.Order>
            {
                _transaction_orders_transaction,
                _transaction_orders_transaction2
            }))
            .CheckBag(p => p.CreditNotes, (new List<DemonstratorApp.BO.CreditNote>
            {
                _transaction_creditnotes_transaction,
                _transaction_creditnotes_transaction2
            }))
            .CheckBag(p => p.DeliveryNotes, (new List<DemonstratorApp.BO.DeliveryNote>
            {
                _transaction_deliverynotes_transaction,
                _transaction_deliverynotes_transaction2
            }))
            .CheckBag(p => p.Invoices, (new List<DemonstratorApp.BO.Invoice>
            {
                _transaction_invoices_transaction,
                _transaction_invoices_transaction2
            }))
            .CheckBag(p => p.ProofOfDeliveries, (new List<DemonstratorApp.BO.ProofOfDelivery>
            {
                _transaction_proofofdeliveries_transaction,
                _transaction_proofofdeliveries_transaction2
            }))
            .CheckReference(p => p.TransactionStatus, _transaction_transactionstatus_transaction)
            .CheckReference(p => p.Supplier, _transaction_supplier_transactions)
            .CheckReference(p => p.ImportedBuyer, _transaction_importedbuyer_transactions)
            .CheckBag(p => p.LetterOfCredits, (new List<DemonstratorApp.BO.LetterOfCredit>
            {
                _transaction_letterofcredits_transaction,
                _transaction_letterofcredits_transaction2
            }))
            .CheckBag(p => p.Intermediaries, (new List<DemonstratorApp.BO.Intermediary>
            {
                _transaction_intermediaries_transactions,
                _transaction_intermediaries_transactions2
            }))
            .CheckBag(p => p.PartialProofOfDeliveries, (new List<DemonstratorApp.BO.PartialProofOfDelivery>
            {
                _transaction_partialproofofdeliveries_transaction,
                _transaction_partialproofofdeliveries_transaction2
            }))
            .CheckBag(p => p.CustomsClearingDocumentations, (new List<DemonstratorApp.BO.CustomsClearingDocumentation>
            {
                _transaction_customsclearingdocumentations_transaction,
                _transaction_customsclearingdocumentations_transaction2
            }))
            .CheckBag(p => p.BillOfLandings, (new List<DemonstratorApp.BO.BillOfLanding>
            {
                _transaction_billoflandings_transaction,
                _transaction_billoflandings_transaction2
            }))
            .CheckReference(p => p.TransactionOverview, _transaction_transactionoverview_transaction)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `Transaction`")]
        [Order(1)]
        public void Transaction_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DemonstratorApp.BO.Transaction> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DemonstratorApp.BO.Transaction>(
                              a => true
                              && a.TransactionDateOccured.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.ToBePaidAmount + 123 > 0)
                              && a.InvoicedDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.PaymentStatus != string.Empty && a.PaymentStatus != null)
                              && a.PaymentDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && (a.RestPaymentAmount + 123 > 0)
                              && !a.PaidByBuyer
                              && a.CommercialAgreement != null
                              && a.Orders.Any()
                              && a.CreditNotes.Any()
                              && a.DeliveryNotes.Any()
                              && a.Invoices.Any()
                              && a.ProofOfDeliveries.Any()
                              && a.TransactionStatus != null
                              && a.Supplier != null
                              && a.ImportedBuyer != null
                              && a.LetterOfCredits.Any()
                              && a.Intermediaries.Any()
                              && a.PartialProofOfDeliveries.Any()
                              && a.CustomsClearingDocumentations.Any()
                              && a.BillOfLandings.Any()
                              && a.TransactionOverview != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}